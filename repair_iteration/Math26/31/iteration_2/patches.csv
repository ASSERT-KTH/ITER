bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  p0  =  p2  +  convergent;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p2  +  convergent;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p2  +  convergent;	  p0    =    p1    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
2	[BUG]  [BUGGY]  p0  =  p1  +  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p1  +  denominator;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p1  +  denominator;	  p0    =    p1    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
3	[BUG]  [BUGGY]  p0  =  p1  +  q2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p1  +  q2;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p1  +  q2;	  p0    =    p1    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
4	[BUG]  [BUGGY]  p1  =  p0  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p0  -  1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p0  -  1;	  p1    =    p2    -    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
5	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
6	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
7	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
8	[BUG]  [BUGGY]  p1  =  p0  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p0  +  2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p0  +  2;	  p1    =    p0    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxDenominator);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxDenominator);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxDenominator);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
14	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
15	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
16	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
17	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
18	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
19	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
21	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  p0);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  p0);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  p0);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
24	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)    <    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
25	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)    <    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
26	[BUG]  [BUGGY]  p0  =  p1.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p1.getValue();  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p1.getValue();	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  p0  =  p1.getPosition();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p1.getPosition();  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p1.getPosition();	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
28	[BUG]  [BUGGY]  p2  =  p0  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  p0  +  1;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  p0  +  1;	  p2    =    p1    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
29	[BUG]  [BUGGY]  p1  =  p0  +  p2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p0  +  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p0  +  p2;	  p1    =    p0    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  p1  =  p0  +  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p0  +  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p0  +  denominator;	  p1    =    p0    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  p1  =  p0  +  q2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p0  +  q2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p0  +  q2;	  p1    =    p0    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  p1  =  p1  +  p2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p1  +  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p1  +  p2;	  p1    =    p2    +    q2;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  p1  =  p2  /  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  /  2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  /  2;	  p1    =    p2    /    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
34	[BUG]  [BUGGY]  p1  =  p0  /  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p0  /  1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p0  /  1;	  p1    =    p2    /    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
35	[BUG]  [BUGGY]  p1  =  p2  /  3;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  /  3;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  /  3;	  p1    =    p2    /    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
36	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
37	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
38	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
39	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
40	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
41	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
42	[BUG]  [BUGGY]  if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
46	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  n  =  Math.min(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  =  Math.min(numerator,  denominator);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  =  Math.min(numerator,  denominator);	  n    =    Math.min(numerator,    value);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
48	[BUG]  [BUGGY]  n  =  Math.min(value,  numerator);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  =  Math.min(value,  numerator);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  =  Math.min(value,  numerator);	  n    =    Math.min(numerator,    value);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  n  =  Math.min(value,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  =  Math.min(value,  denominator);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  =  Math.min(value,  denominator);	  n    =    Math.min(denominator,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  n  =  Math.min(denominator,  convergent);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  =  Math.min(denominator,  convergent);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  =  Math.min(denominator,  convergent);	  n    =    Math.min(denominator,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
51	[BUG]  [BUGGY]  if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  p0  =  p0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p0;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p0;	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
56	[BUG]  [BUGGY]  p1  =  p2  +  numerator;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  +  numerator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  +  numerator;	  p1    =    p2    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
57	[BUG]  [BUGGY]  n  =  Math.min(n,  convergent);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  =  Math.min(n,  convergent);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  =  Math.min(n,  convergent);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
58	[BUG]  [BUGGY]  n  =  Math.min(value,  convergent,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  =  Math.min(value,  convergent,  denominator);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  =  Math.min(value,  convergent,  denominator);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
59	[BUG]  [BUGGY]  n  =  Math.min(numerator,  convergent);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  =  Math.min(numerator,  convergent);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  =  Math.min(numerator,  convergent);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
61	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxDenominator);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxDenominator);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxDenominator);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
62	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
63	[BUG]  [BUGGY]  p2  =  p1.next;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  p1.next;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  p1.next;	  p2    =    p2;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  p2  =  p0  +  p1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  p0  +  p1;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  p0  +  p1;	  p2    =    p1    +    p0;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
65	[BUG]  [BUGGY]  p2  =  p1  +  p2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  p1  +  p2;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  p1  +  p2;	  p2    =    p1    +    p0;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
66	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
67	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
68	[BUG]  [BUGGY]  p1  =  p0  +  value;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p0  +  value;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p0  +  value;	  p1    =    p2    +    value;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
69	[BUG]  [BUGGY]  p1  =  p1  +  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p1  +  p0;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p1  +  p0;	  p1    =    p2    +    p0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  p1  =  p1  +  q0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p1  +  q0;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p1  +  q0;	  p1    =    p2    +    q0;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
71	[BUG]  [BUGGY]  p1  =  p0  *  convergent;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p0  *  convergent;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p0  *  convergent;	  p1    =    p2    *    convergent;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
72	[BUG]  [BUGGY]  p1  =  p2  /  convergent;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  /  convergent;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  /  convergent;	  p1    =    p2    *    convergent;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
73	[BUG]  [BUGGY]  p1  =  p2  *  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  *  epsilon;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  *  epsilon;	  p1    =    p2    *    convergent;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
74	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
75	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
76	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
77	[BUG]  [BUGGY]  p0  =  p1  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p1  +  2;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p1  +  2;	  p0    =    p1    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  p1  =  p2  *  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  *  p0;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  *  p0;	  p1    =    p2    +    p0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
79	[BUG]  [BUGGY]  p1  =  p2  +  p1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  +  p1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  +  p1;	  p1    =    p2    +    p0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
80	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2,  epsilon);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2,  epsilon);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
82	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
83	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
84	[BUG]  [BUGGY]  p1  =  p2  -  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  -  2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  -  2;	  p1    =    p2    -    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
85	[BUG]  [BUGGY]  p2  =  p1  +  q0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  p1  +  q0;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  p1  +  q0;	  p2    =    p1    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
86	[BUG]  [BUGGY]  p1  =  p2  *  q0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  *  q0;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  *  q0;	  p1    =    p2    +    q0;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
87	[BUG]  [BUGGY]  p1  =  p2  /  4;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  /  4;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  /  4;	  p1    =    p2    /    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
88	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
89	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
90	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
91	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
92	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  epsilon  >  epsilon)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  epsilon  >  epsilon)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  epsilon  >  epsilon)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
93	[BUG]  [BUGGY]  p2  =  p1  +  q2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  p1  +  q2;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  p1  +  q2;	  p2    =    p1    +    p0;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
94	[BUG]  [BUGGY]  p2  =  p1  +  convergent;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  p1  +  convergent;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  p1  +  convergent;	  p2    =    p1    +    p0;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
95	[BUG]  [BUGGY]  p1  =  p1.getIntValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p1.getIntValue();  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p1.getIntValue();	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
96	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.denominator;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.denominator;	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
97	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p0,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p0,  maxIterations);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p0,  maxIterations);	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
98	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.denominator(value,  p0,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.denominator(value,  p0,  maxIterations);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.denominator(value,  p0,  maxIterations);	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  p0  =  p2  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p2  +  2;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p2  +  2;	  p0    =    p2    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
100	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
101	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
102	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
103	[BUG]  [BUGGY]  p1  =  p2  *  q2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  *  q2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  *  q2;	  p1    =    p2    +    q2;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
104	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
105	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  p1  =  p2;  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  p1  =  p2;  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
106	[BUG]  [BUGGY]  p0  =  p1  +  value;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p1  +  value;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p1  +  value;	  p0    =    p1    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
107	[BUG]  [BUGGY]  p1  =  a2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  a2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  a2;	  p1    =    a1;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
108	[BUG]  [BUGGY]  p2  =  a1  +  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  a1  +  p0;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  a1  +  p0;	  p2    =    a1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
109	[BUG]  [BUGGY]  Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
110	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.getDenominator();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.getDenominator();  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.getDenominator();	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
111	[BUG]  [BUGGY]  p1  =  convergent  *  p2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  convergent  *  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  convergent  *  p2;	  p1    =    p2    *    convergent;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
112	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
113	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
114	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
115	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  epsilon  >  epsilon)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  epsilon  >  epsilon)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  epsilon  >  epsilon)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
116	[BUG]  [BUGGY]  p1  =  a1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  a1  +  1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  a1  +  1;	  p1    =    a1;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
117	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)    <    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
118	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)    <    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
119	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
120	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
121	[BUG]  [BUGGY]  p2  =  a1  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p2  =  a1  +  1;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p2  =  a1  +  1;	  p2    =    a1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
122	[BUG]  [BUGGY]  p0  =  p1  +  p2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p1  +  p2;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p1  +  p2;	  p0    =    p1    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
123	[BUG]  [BUGGY]  if(n  >  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  >  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  >  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
124	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  epsilon  <  q2)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  epsilon  <  q2)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  epsilon  <  q2)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
125	[BUG]  [BUGGY]  if(n  >  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  >  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  >  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
126	[BUG]  [BUGGY]  if(n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  denominator);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  denominator);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  denominator);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
127	[BUG]  [BUGGY]  if(n  <  denominator  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
128	[BUG]  [BUGGY]  if(n  <  denominator  &&  value  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  denominator  &&  value  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  denominator  &&  value  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
129	[BUG]  [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
130	[BUG]  [BUGGY]  p1  =  p1  +  convergent;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p1  +  convergent;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p1  +  convergent;	  p1    =    p0    +    convergent;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
131	[BUG]  [BUGGY]  p1  =  p2  +  a1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  +  a1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  +  a1;	  p1    =    p2    +    value;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
132	[BUG]  [BUGGY]  p1  =  p2  *  value;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  *  value;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  *  value;	  p1    =    p2    +    value;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
133	[BUG]  [BUGGY]  n  =  Math.min(tenerator,  convergent);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  n  =  Math.min(tenerator,  convergent);  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	n  =  Math.min(tenerator,  convergent);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
134	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >=  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >=  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >=  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
135	[BUG]  [BUGGY]  NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
137	[BUG]  [BUGGY]  p0  =  a1  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  a1  +  1;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  a1  +  1;	  p0    =    a1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
138	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
139	[BUG]  [BUGGY]  p0  =  p1.getIntValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p1.getIntValue();  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p1.getIntValue();	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
140	[BUG]  [BUGGY]  p1  =  p2  /  q2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  p2  /  q2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  /  q2;	  p1    =    p2    +    q2;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
141	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
142	[BUG]  [BUGGY]  p1  =  a1  *  convergent;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p1  =  a1  *  convergent;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  a1  *  convergent;	  p1    =    p2    *    convergent;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
143	[BUG]  [BUGGY]  p0  =  p2  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  p0  =  p2  /  1;  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p0  =  p2  /  1;	  p0    =    p2    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
144	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
145	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    epsilon);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
146	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1,  epsilon);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1,  epsilon);  }  [BUGGY]      p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1,  epsilon);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
