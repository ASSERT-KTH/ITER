bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    p2  =  p0;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    p2  =  p0;  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    p2  =  p0;		non-compiled	[CE]  illegal  start  of  type	62	None	add
2	[BUG]  [BUGGY]    p0  =  p1;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    p0  =  p1;  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    p0  =  p1;		non-compiled	[CE]  illegal  start  of  type	62	None	add
3	[BUG]  [BUGGY]    p1  =  p2;  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    p1  =  p2;  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    p1  =  p2;		non-compiled	[CE]  illegal  start  of  type	62	None	add
4	[BUG]  [BUGGY]    p1  =  p0;  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    p1  =  p0;  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    p1  =  p0;		non-compiled	[CE]  illegal  start  of  type	62	None	add
5	[BUG]  [BUGGY]    p0  =  p2;  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    p0  =  p2;  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    p0  =  p2;		non-compiled	[CE]  illegal  start  of  type	62	None	add
6	[BUG]  [BUGGY]  p1  =  p2  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]  p1  =  p2  +  1;  [BUGGY]  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  +  1;	p1  =  p2;  	non-compiled	[CE]  illegal  start  of  type	61	None	replace
7	[BUG]  [BUGGY]  p1  =  p1;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]  p1  =  p1;  [BUGGY]  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p1;	p1  =  p2;  	non-compiled	[CE]  illegal  start  of  type	61	None	replace
8	[BUG]  [BUGGY]  p1  =  p2  +  convergent;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]  p1  =  p2  +  convergent;  [BUGGY]  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	p1  =  p2  +  convergent;	p1  =  p2;  	non-compiled	[CE]  illegal  start  of  type	61	None	replace
9	[BUG]  [BUGGY]    p2  =  p1;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    p2  =  p1;  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    p2  =  p1;		non-compiled	[CE]  illegal  start  of  type	62	None	add
10	[BUG]  [BUGGY]    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2);  }		non-compiled	[CE]  illegal  start  of  type	62	None	add
11	[BUG]  [BUGGY]    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }		non-compiled	[CE]  illegal  start  of  type	62	None	add
12	[BUG]  [BUGGY]    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }		non-compiled	[CE]  illegal  start  of  type	62	None	add
13	[BUG]  [BUGGY]    n  =  Math.min(convergent,  value);  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  [BUGGY]    n  =  Math.min(convergent,  value);  [BUGGY]  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	216	216	1	replace	    n  =  Math.min(convergent,  value);		non-compiled	[CE]  illegal  start  of  type	62	None	add
