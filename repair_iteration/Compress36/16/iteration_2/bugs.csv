bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[NID.kSize];	  archive.packSizes    =    new    long[(int)nid];    	compilable	  [FE]  IOException  	2	12	replace
2	[BUG]  [BUGGY]  archive.packSizes  =  new  long[NID.kSize];  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[NID.kSize];	  archive.packSizes    =    new    long[(int)nid];    	compilable	  [FE]  IOException  	2	12	replace
3	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  -  1];	  archive.packSizes    =    new    long[(int)nid];    	compilable	  [FE]  IOException  	2	12	replace
4	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  -  1];  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  -  1];	  archive.packSizes    =    new    long[(int)nid];    	compilable	  [FE]  IOException  	2	12	replace
5	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  +  1];	  archive.packSizes    =    new    long[(int)nid];    	compilable	  [FE]  IOException  	2	12	replace
6	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  1];  [FE]  IOException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  +  1];	  archive.packSizes    =    new    long[(int)nid];    	compilable	  [FE]  IOException  	2	12	replace
7	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)nid];  [CE]  incompatible  types  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  int[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)nid];	  archive.packSizes    =    new    long[(int)nid];    	non-compiled	[CE]  incompatible  types	2	None	replace
8	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]    NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  Lists.newArrayList();  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  Lists.newArrayList();	      	non-compiled	[CE]  cannot  find  symbol  Lists	10	None	replace
9	[BUG]  [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]      NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readAllOrBits(header,  (int)numPackStreams);	      	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	10	None	replace
10	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams);  [CE]  no  suitable  constructor  found  for  ArrayList(long)  [FE]        NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams);	      	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(long)	10	None	replace
11	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(nid);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(nid);	      	compilable	  [FE]  NullPointerException  	10	12	replace
12	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(nid);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(nid);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(nid);	      	compilable	  [FE]  NullPointerException  	10	12	replace
13	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [FE]            NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList();  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList();	      	non-compiled	[CE]  cannot  find  symbol  Lists	10	None	replace
14	[BUG]  [BUGGY]  Integer  nid  =  readAllOrBits(header,  NID.kSize);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]              NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  Integer  nid  =  readAllOrBits(header,  NID.kSize);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readAllOrBits(header,  NID.kSize);	      	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	10	None	replace
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>();  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>();	      	compilable	  [FE]  NullPointerException  	10	12	replace
16	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>();  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>();  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>();	      	compilable	  [FE]  NullPointerException  	10	12	replace
17	[BUG]  [BUGGY]      int  nid  =  header.readUnsignedByte();  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]    NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]      int  nid  =  header.readUnsignedByte();  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	        int  nid  =  header.readUnsignedByte();	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	9	None	add
18	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    archive.packSizes  =  new  long[(int)numPackStreams  +  6];	  	compilable	  [FE]  NoClassDefFoundError  	13	12	add
19	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    archive.packSizes  =  new  long[(int)numPackStreams  +  6];	  	compilable	  [FE]  NoClassDefFoundError  	13	12	add
20	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archives.packSizes  =  new  long[(int)numPackStreams  +  6];  [CE]  cannot  find  symbol  archives  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archives.packSizes  =  new  long[(int)numPackStreams  +  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    archives.packSizes  =  new  long[(int)numPackStreams  +  6];	  	non-compiled	[CE]  cannot  find  symbol  archives	13	None	add
21	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  Archive.packSizes  =  new  long[(int)numPackStreams  +  6];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  Archive.packSizes  =  new  long[(int)numPackStreams  +  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    Archive.packSizes  =  new  long[(int)numPackStreams  +  6];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	13	None	add
22	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  Archives.packSizes  =  new  long[(int)numPackStreams  +  6];  [CE]  cannot  find  symbol  Archives  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  Archives.packSizes  =  new  long[(int)numPackStreams  +  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    Archives.packSizes  =  new  long[(int)numPackStreams  +  6];	  	non-compiled	[CE]  cannot  find  symbol  Archives	13	None	add
23	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  6];	  	non-compiled	[CE]  ';'  expected	13	None	add
24	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	compilable	  [FE]  NoClassDefFoundError  	13	12	add
25	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [FE]  NoClassDefFoundError  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	compilable	  [FE]  NoClassDefFoundError  	13	12	add
26	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  1];	  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    	compilable	  [FE]  NoClassDefFoundError  	7	12	replace
27	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  1];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  1];	  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    	compilable	  [FE]  NoClassDefFoundError  	7	12	replace
28	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  -  6];	  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    	compilable	  [FE]  NegativeArraySizeException  	7	12	replace
29	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [FE]  NegativeArraySizeException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  -  6];	  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    	compilable	  [FE]  NegativeArraySizeException  	7	12	replace
30	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(int)numPackStreams];  [CE]  incompatible  types  [FE]        NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  byte[(int)numPackStreams];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(int)numPackStreams];	  archive.packSizes    =    new    long[(long)numPackStreams];    	non-compiled	[CE]  incompatible  types	15	None	replace
31	[BUG]  [BUGGY]  archive.packSizes  =  new  short[(int)numPackStreams];  [CE]  incompatible  types  [FE]          NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  short[(int)numPackStreams];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  short[(int)numPackStreams];	  archive.packSizes    =    new    long[(long)numPackStreams];    	non-compiled	[CE]  incompatible  types	15	None	replace
32	[BUG]  [BUGGY]  archive.packSizes  =  new  double[(double)numPackStreams];  [CE]  possible  loss  of  precision  [FE]            NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  double[(double)numPackStreams];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  double[(double)numPackStreams];	  archive.packSizes    =    new    long[(long)numPackStreams];    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
33	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(byte)numPackStreams];  [CE]  incompatible  types  [FE]              NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  byte[(byte)numPackStreams];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(byte)numPackStreams];	  archive.packSizes    =    new    long[(long)numPackStreams];    	non-compiled	[CE]  incompatible  types	15	None	replace
34	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  	compilable	  [FE]  NoClassDefFoundError  	16	12	add
35	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  	compilable	  [FE]  NoClassDefFoundError  	16	12	add
36	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  cannot  find  symbol  archives  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  cannot  find  symbol  archives	16	None	add
37	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  Archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  cannot  find  symbol  Archives  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  Archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    Archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  cannot  find  symbol  Archives	16	None	add
38	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  ';'  expected	16	None	add
39	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  Archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  Archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    Archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	16	None	add
40	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEAder_SIZE];  [CE]  cannot  find  symbol  SIGNATURE_HEAder_SIZE  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEAder_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEAder_SIZE];	  	non-compiled	[CE]  cannot  find  symbol  SIGNATURE_HEAder_SIZE	16	None	add
41	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(byte)nid];  [CE]  incompatible  types  [FE]            NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  byte[(byte)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(byte)nid];	  archive.packSizes    =    new    long[(long)nid];    	non-compiled	[CE]  incompatible  types	5	None	replace
42	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(int)nid];  [CE]  incompatible  types  [FE]              NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  byte[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(int)nid];	  archive.packSizes    =    new    long[(long)nid];    	non-compiled	[CE]  incompatible  types	5	None	replace
43	[BUG]  [BUGGY]  archive.packSizes  =  new  double[(double)nid];  [CE]  possible  loss  of  precision  [FE]                NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  double[(double)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  double[(double)nid];	  archive.packSizes    =    new    long[(long)nid];    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
44	[BUG]  [BUGGY]  archive.packSizes  =  new  short[(int)nid];  [CE]  incompatible  types  [FE]                  NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  short[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  short[(int)nid];	  archive.packSizes    =    new    long[(long)nid];    	non-compiled	[CE]  incompatible  types	5	None	replace
45	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];	  	compilable	  [FE]  NoClassDefFoundError  	11	12	add
46	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];	  	compilable	  [FE]  NoClassDefFoundError  	11	12	add
47	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [CE]  cannot  find  symbol  archives  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];	  	non-compiled	[CE]  cannot  find  symbol  archives	11	None	add
48	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];	  	non-compiled	[CE]  ';'  expected	11	None	add
49	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [CE]  cannot  find  symbol  Archives  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];	  	non-compiled	[CE]  cannot  find  symbol  Archives	11	None	add
50	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	11	None	add
51	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],;  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],;  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],;	  	non-compiled	[CE]  ';'  expected	11	None	add
52	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	compilable	  [FE]  NoClassDefFoundError  	6	12	add
53	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	compilable	  [FE]  NoClassDefFoundError  	6	12	add
54	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  cannot  find  symbol  archives  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archives.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  cannot  find  symbol  archives	6	None	add
55	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    Archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	6	None	add
56	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archives.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  cannot  find  symbol  Archives  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archives.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    Archives.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  cannot  find  symbol  Archives	6	None	add
57	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  ';'  expected	6	None	add
58	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  incompatible  types  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  incompatible  types	6	None	add
59	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]                IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	6	None	add
60	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
61	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
62	[BUG]  [BUGGY]  [FE]  EOFException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  *  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  EOFException  	12	12	replace
63	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  NID.kSize];  [FE]  EOFException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  *  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  EOFException  	12	12	replace
64	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCrc];  [CE]  cannot  find  symbol  kCrc  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCrc];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCrc];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  cannot  find  symbol  kCrc	12	None	replace
65	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
66	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [FE]  IOException  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
67	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length];  [CE]  cannot  find  symbol  length  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
68	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
69	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  NID.kSize];  [FE]  IOException  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
70	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  +  1];  [CE]  incompatible  types  [FE]                NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)numPackStreams  +  1];	  archive.packSizes    =    new    int[(int)numPackStreams];    	non-compiled	[CE]  incompatible  types	8	None	replace
71	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  -  1];  [CE]  incompatible  types  [FE]                  NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)numPackStreams  -  1];	  archive.packSizes    =    new    int[(int)numPackStreams];    	non-compiled	[CE]  incompatible  types	8	None	replace
72	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];	  	compilable	  [FE]  NoClassDefFoundError  	1	12	add
73	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];	  	compilable	  [FE]  NoClassDefFoundError  	1	12	add
74	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid];  Archive  archive.packSizes  =  new  long[(int)nid];  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid];  Archive  archive.packSizes  =  new  long[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)nid];    Archive  archive.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  ';'  expected	1	None	add
75	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid];  archives.packSizes  =  new  long[(int)nid];  [CE]  cannot  find  symbol  archives  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid];  archives.packSizes  =  new  long[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)nid];    archives.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  cannot  find  symbol  archives	1	None	add
76	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid];  Archives.packSizes  =  new  long[(int)nid];  [CE]  cannot  find  symbol  Archives  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid];  Archives.packSizes  =  new  long[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)nid];    Archives.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  cannot  find  symbol  Archives	1	None	add
77	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)nid];  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)nid];    int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	1	None	add
78	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid];  Archive.packSizes  =  new  long[(int)nid];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid];  Archive.packSizes  =  new  long[(int)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)nid];    Archive.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	1	None	add
79	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  IOException  	4	12	replace
80	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  IOException  	4	12	replace
81	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  IOException  	4	12	replace
82	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  IOException  	4	12	replace
83	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  IOException  	4	12	replace
84	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [FE]  IOException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  IOException  	4	12	replace
85	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  16];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  16];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  IOException  	4	12	replace
86	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  16];  [FE]  IOException  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  16];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  16];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  IOException  	4	12	replace
87	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3);  [CE]  ']'  expected  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  3);	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  ']'  expected	4	None	replace
88	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  	compilable	  [FE]  NoClassDefFoundError  	3	12	add
89	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  	compilable	  [FE]  NoClassDefFoundError  	3	12	add
90	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archives.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  cannot  find  symbol  archives  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archives.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archives.packSizes  =  new  long[(int)numPackStreams  +  1];	  	non-compiled	[CE]  cannot  find  symbol  archives	3	None	add
91	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  	non-compiled	[CE]  ';'  expected	3	None	add
92	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  Archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  Archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    Archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	3	None	add
93	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  Archives.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  cannot  find  symbol  Archives  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  Archives.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    Archives.packSizes  =  new  long[(int)numPackStreams  +  1];	  	non-compiled	[CE]  cannot  find  symbol  Archives	3	None	add
94	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  incompatible  types  [FE]              IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  	non-compiled	[CE]  incompatible  types	3	None	add
95	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]                IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	3	None	add
96	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  header);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]                  IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  header);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  header);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	3	None	add
97	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  11];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  11];	  archive.packSizes    =    new    long[(int)numPackStreams    +    6];    	compilable	  [FE]  IOException  	14	12	replace
98	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  11];  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  11];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  11];	  archive.packSizes    =    new    long[(int)numPackStreams    +    6];    	compilable	  [FE]  IOException  	14	12	replace
99	[BUG]  [BUGGY]  [FE]  EOFException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	17	12	replace
100	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [FE]  EOFException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	17	12	replace
101	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
102	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE];  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
103	[BUG]  [BUGGY]  [FE]  EOFException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	17	12	replace
104	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  SIGNATURE_HEADER_SIZE];  [FE]  EOFException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	17	12	replace
105	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	17	12	replace
106	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE  +  1];  [FE]  NoClassDefFoundError  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	17	12	replace
107	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  2];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  2];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
108	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  2];  [FE]  IOException  [FE]            IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  2];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  2];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
109	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [CE]  possible  loss  of  precision  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
110	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  4];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  4];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
111	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  4];  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  4];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  4];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
112	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
113	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [FE]  IOException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
114	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  6];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
115	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [FE]  IOException  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  6];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	17	12	replace
116	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  -  16];	  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    	compilable	  [FE]  NegativeArraySizeException  	7	12	replace
117	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [FE]  NegativeArraySizeException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  -  16];	  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    	compilable	  [FE]  NegativeArraySizeException  	7	12	replace
118	[BUG]  [BUGGY]  byte[]  nextHeaderSize  =  readUint64(header);  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  byte[]  nextHeaderSize  =  readUint64(header);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	byte[]  nextHeaderSize  =  readUint64(header);	      	non-compiled	[CE]  incompatible  types	10	None	replace
119	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packPos  =  readUint64(header);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packPos  =  readUint64(header);	      	compilable	  [FE]  NullPointerException  	10	12	replace
120	[BUG]  [BUGGY]  archive.packPos  =  readUint64(header);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packPos  =  readUint64(header);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packPos  =  readUint64(header);	      	compilable	  [FE]  NullPointerException  	10	12	replace
121	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  NoClassDefFoundError  	4	12	replace
122	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  1];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	compilable	  [FE]  NoClassDefFoundError  	4	12	replace
123	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid].;  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid].;  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid].;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
124	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  int  numPackStreams  =  new  long[(int)numPackStreams  +  1];  [CE]  variable  numPackStreams  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  int  numPackStreams  =  new  long[(int)numPackStreams  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    int  numPackStreams  =  new  long[(int)numPackStreams  +  1];	  	non-compiled	[CE]  variable  numPackStreams  is  already  defined  in  method  readPackInfo(DataInput,Archive)	3	None	add
125	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	compilable	  [FE]  NoClassDefFoundError  	3	12	add
126	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [FE]  NoClassDefFoundError  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	compilable	  [FE]  NoClassDefFoundError  	3	12	add
127	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1)];  [CE]  ']'  expected  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1)];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1)];	  	non-compiled	[CE]  ']'  expected	6	None	add
128	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  archive.packSizes    =    new    long[(int)numPackStreams    +    6];    	compilable	  [FE]  IOException  	14	12	replace
129	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  archive.packSizes    =    new    long[(int)numPackStreams    +    6];    	compilable	  [FE]  IOException  	14	12	replace
130	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  8];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    archive.packSizes  =  new  long[(int)numPackStreams  +  8];	  	compilable	  [FE]  NoClassDefFoundError  	13	12	add
131	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  8];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  6];  archive.packSizes  =  new  long[(int)numPackStreams  +  8];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    6];    archive.packSizes  =  new  long[(int)numPackStreams  +  8];	  	compilable	  [FE]  NoClassDefFoundError  	13	12	add
132	[BUG]  [BUGGY]  archive.packSizes  =  new  short[(long)numPackStreams];  [CE]  possible  loss  of  precision  [FE]        NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  short[(long)numPackStreams];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  short[(long)numPackStreams];	  archive.packSizes    =    new    long[(long)numPackStreams];    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
133	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(long)numPackStreams];  [CE]  possible  loss  of  precision  [FE]          NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  byte[(long)numPackStreams];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(long)numPackStreams];	  archive.packSizes    =    new    long[(long)numPackStreams];    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
134	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
135	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  +  1];  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
136	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kPos];  [CE]  cannot  find  symbol  kPos  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kPos];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kPos];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  cannot  find  symbol  kPos	12	None	replace
137	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
138	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [FE]  IOException  [FE]        IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
139	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.size];  [CE]  cannot  find  symbol  size  [FE]          IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.size];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.size];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  cannot  find  symbol  size	12	None	replace
140	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(long)nid];  [CE]  possible  loss  of  precision  [FE]            NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  byte[(long)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(long)nid];	  archive.packSizes    =    new    long[(long)nid];    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
141	[BUG]  [BUGGY]  archive.packSizes  =  new  short[(long)nid];  [CE]  possible  loss  of  precision  [FE]              NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  short[(long)nid];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  short[(long)nid];	  archive.packSizes    =    new    long[(long)nid];    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
142	[BUG]  [BUGGY]      Integer  nid  =  readUint64(header);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]    NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]      Integer  nid  =  readUint64(header);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	        Integer  nid  =  readUint64(header);	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	9	None	add
143	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)nid  -  1];  [CE]  possible  loss  of  precision  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(long)nid  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)nid  -  1];	  archive.packSizes    =    new    long[(int)nid];    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
144	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  *  NID.kSize];  [CE]  possible  loss  of  precision  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  *  NID.kSize];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
145	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
146	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE];  [FE]  IOException  [FE]      IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	compilable	  [FE]  IOException  	12	12	replace
147	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  -  1];  [CE]  possible  loss  of  precision  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)numPackStreams  -  1];	  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
148	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  incompatible  types  [FE]                NoClassDefFoundError    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    int[(int)numPackStreams];    	non-compiled	[CE]  incompatible  types	8	None	replace
149	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  archive.packSizes    =    new    long[(int)numPackStreams    +    6];    	compilable	  [FE]  IOException  	14	12	replace
150	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [FE]  IOException  [FE]    IOException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  archive.packSizes    =    new    long[(int)numPackStreams    +    6];    	compilable	  [FE]  IOException  	14	12	replace
151	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams);  [CE]  no  suitable  constructor  found  for  ArrayList(long)  [FE]    NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams);	      	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(long)	10	None	replace
152	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]      ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	        ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid);	  	compilable	  [FE]  NoClassDefFoundError  	9	12	add
153	[BUG]  [BUGGY]      ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid);  [FE]  NoClassDefFoundError  [FE]    NullPointerException    [CONTEXT]    private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {    [BUGGY]      ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid);  [BUGGY]    for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	        ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid);	  	compilable	  [FE]  NoClassDefFoundError  	9	12	add
