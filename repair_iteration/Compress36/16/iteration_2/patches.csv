bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  archive.packSizes  =  new  int[NID.kSize];  [CE]  incompatible  types  [FE]              IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  int[NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[NID.kSize];	  archive.packSizes    =    new    int[(int)nid];    	non-compiled	[CE]  incompatible  types	7	None	replace
2	[BUG]  [BUGGY]  archive.packSizes  =  new  int[nid];  [CE]  incompatible  types  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  int[nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[nid];	  archive.packSizes    =    new    int[(int)nid];    	non-compiled	[CE]  incompatible  types	7	None	replace
3	[BUG]  [BUGGY]  archive.packSizes  =  new  String[(int)nid];  [CE]  incompatible  types  [FE]                  IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  String[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  String[(int)nid];	  archive.packSizes    =    new    int[(int)nid];    	non-compiled	[CE]  incompatible  types	7	None	replace
4	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams,  nid);  [CE]  no  suitable  constructor  found  for  ArrayList(long,int)  [FE]        NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams,  nid);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams,  nid);	  ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(numPackStreams);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(long,int)	151	None	replace
5	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid,  numPackStreams);  [CE]  no  suitable  constructor  found  for  ArrayList(int,long)  [FE]          NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid,  numPackStreams);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid,  numPackStreams);	  ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(numPackStreams);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,long)	151	None	replace
6	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(length);  [CE]  cannot  find  symbol  length  [FE]            NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(length);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(length);	  ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(numPackStreams);    	non-compiled	[CE]  cannot  find  symbol  length	151	None	replace
7	[BUG]  [BUGGY]  List  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  List  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	List  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams);	  ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(numPackStreams);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
8	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(archive.packPos);  [CE]  no  suitable  constructor  found  for  ArrayList(long)  [FE]                NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(archive.packPos);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(archive.packPos);	  ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(numPackStreams);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(long)	151	None	replace
9	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams.length);  [CE]  long  cannot  be  dereferenced  [FE]                  NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams.length);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(numPackStreams.length);	  ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(numPackStreams);    	non-compiled	[CE]  long  cannot  be  dereferenced	151	None	replace
10	[BUG]  [BUGGY]  List  <  NID>  deferredBlockStreams  =  Lists.newArrayList();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  List  <  NID>  deferredBlockStreams  =  Lists.newArrayList();  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	List  <  NID>  deferredBlockStreams  =  Lists.newArrayList();	  ArrayList    <    NID>    deferredBlockStreams    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
11	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList(nid);  [CE]  cannot  find  symbol  Lists  [FE]                  NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList(nid);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList(nid);	  ArrayList    <    NID>    deferredBlockStreams    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	13	None	replace
12	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>();  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>();	  ArrayList    <    NID>    deferredBlockStreams    =    Lists.newArrayList();    	compilable	  [FE]  NullPointerException  	13	12	replace
13	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>();  [FE]  NullPointerException  [FE]                    NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>();  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>();	  ArrayList    <    NID>    deferredBlockStreams    =    Lists.newArrayList();    	compilable	  [FE]  NullPointerException  	13	12	replace
14	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  Collections.newArrayList();  [CE]  cannot  find  symbol  Collections  [FE]                      NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  Collections.newArrayList();  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  Collections.newArrayList();	  ArrayList    <    NID>    deferredBlockStreams    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Collections	13	None	replace
15	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList(0);  [CE]  cannot  find  symbol  Lists  [FE]                        NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList(0);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  Lists.newArrayList(0);	  ArrayList    <    NID>    deferredBlockStreams    =    Lists.newArrayList();    	non-compiled	[CE]  cannot  find  symbol  Lists	13	None	replace
16	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1);  [CE]  ']'  expected  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  1);	  archive.packSizes    =    new    long[(int)numPackStreams    +    3);    	non-compiled	[CE]  ']'  expected	87	None	replace
17	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  3);  [CE]  ']'  expected  [FE]                  IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  3);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  3);	  archive.packSizes    =    new    long[(int)numPackStreams    +    3);    	non-compiled	[CE]  ']'  expected	87	None	replace
18	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  3);  [CE]  ']'  expected  [FE]                    IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  +  3);	  archive.packSizes    =    new    long[(int)numPackStreams    +    3);    	non-compiled	[CE]  ']'  expected	87	None	replace
19	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2);  [CE]  ']'  expected  [FE]                      IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  2);	  archive.packSizes    =    new    long[(int)numPackStreams    +    3);    	non-compiled	[CE]  ']'  expected	87	None	replace
20	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4);  [CE]  ']'  expected  [FE]                        IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  4);	  archive.packSizes    =    new    long[(int)numPackStreams    +    3);    	non-compiled	[CE]  ']'  expected	87	None	replace
21	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  *  NID.kSize];  [CE]  incompatible  types  [FE]        IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  *  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(long)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  incompatible  types	144	None	replace
22	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(int)numPackStreams  *  NID.kSize];  [CE]  incompatible  types  [FE]          IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  byte[(int)numPackStreams  *  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(int)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(long)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  incompatible  types	144	None	replace
23	[BUG]  [BUGGY]  archive.packSizes  =  new  short[(int)numPackStreams  *  NID.kSize];  [CE]  incompatible  types  [FE]            IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  short[(int)numPackStreams  *  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  short[(int)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(long)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  incompatible  types	144	None	replace
24	[BUG]  [BUGGY]  archive.packSizes  =  new  short[(long)numPackStreams  *  NID.kSize];  [CE]  possible  loss  of  precision  [FE]              IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  short[(long)numPackStreams  *  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  short[(long)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(long)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  possible  loss  of  precision	144	None	replace
25	[BUG]  [BUGGY]  archive.packSizes  =  new  double[(double)numPackStreams  *  NID.kSize];  [CE]  possible  loss  of  precision  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  double[(double)numPackStreams  *  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  double[(double)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(long)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  possible  loss  of  precision	144	None	replace
26	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  1);	          ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(nid);    	compilable	  [FE]  NullPointerException  	153	12	replace
27	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  1);  [FE]  NullPointerException  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  1);	          ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(nid);    	compilable	  [FE]  NullPointerException  	153	12	replace
28	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid.length);  [CE]  int  cannot  be  dereferenced  [FE]      NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid.length);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid.length);	          ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(nid);    	non-compiled	[CE]  int  cannot  be  dereferenced	153	None	replace
29	[BUG]  [BUGGY]  List  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid);  [CE]  cannot  find  symbol  [FE]        NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  List  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	List  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid);	          ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(nid);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
30	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  2);	          ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(nid);    	compilable	  [FE]  NullPointerException  	153	12	replace
31	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  2);  [FE]  NullPointerException  [FE]          NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(nid  +  2);	          ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(nid);    	compilable	  [FE]  NullPointerException  	153	12	replace
32	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(NID.kSize);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(NID.kSize);	          ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(nid);    	compilable	  [FE]  NullPointerException  	153	12	replace
33	[BUG]  [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(NID.kSize);  [FE]  NullPointerException  [FE]            NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(NID.kSize);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  NID>  deferredBlockStreams  =  new  ArrayList  <  NID>(NID.kSize);	          ArrayList    <    NID>    deferredBlockStreams    =    new    ArrayList    <    NID>(nid);    	compilable	  [FE]  NullPointerException  	153	12	replace
34	[BUG]  [BUGGY]  [FE]  EOFException  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  *  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	102	12	replace
35	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  SIGNATURE_HEADER_SIZE];  [FE]  EOFException  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  *  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	102	12	replace
36	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  /  2];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	102	12	replace
37	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  2];  [FE]  IOException  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  /  2];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	102	12	replace
38	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  /  NID.kSize];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	102	12	replace
39	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  NID.kSize];  [FE]  NoClassDefFoundError  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  /  NID.kSize];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	102	12	replace
40	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE  +  1];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	102	12	replace
41	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE  +  1];  [FE]  NoClassDefFoundError  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  /  SIGNATURE_HEADER_SIZE  +  1];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	102	12	replace
42	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  /  10];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	102	12	replace
43	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  10];  [FE]  IOException  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  /  10];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	102	12	replace
44	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  /  4];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	102	12	replace
45	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  4];  [FE]  IOException  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  /  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  /  4];	  archive.packSizes    =    new    long[(int)nid    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	102	12	replace
46	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  +  1];  [CE]  possible  loss  of  precision  [FE]          IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)numPackStreams  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archives.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
47	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)nid  +  1];  [CE]  possible  loss  of  precision  [FE]            IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(long)nid  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)nid  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archives.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
48	[BUG]  [BUGGY]  archives.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  cannot  find  symbol  archives  [FE]              IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archives.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archives.packSizes  =  new  long[(int)numPackStreams  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archives.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  cannot  find  symbol  archives	90	None	replace
49	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    archive.packSizes  =  new  long[(int)numPackStreams  /  6];	  	compilable	  [FE]  NoClassDefFoundError  	114	12	add
50	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    archive.packSizes  =  new  long[(int)numPackStreams  /  6];	  	compilable	  [FE]  NoClassDefFoundError  	114	12	add
51	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  Archives.packSizes  =  new  long[(int)numPackStreams  /  6];  [CE]  cannot  find  symbol  Archives  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  Archives.packSizes  =  new  long[(int)numPackStreams  /  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    Archives.packSizes  =  new  long[(int)numPackStreams  /  6];	  	non-compiled	[CE]  cannot  find  symbol  Archives	114	None	add
52	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  archives.packSizes  =  new  long[(int)numPackStreams  /  6];  [CE]  cannot  find  symbol  archives  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  archives.packSizes  =  new  long[(int)numPackStreams  /  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    archives.packSizes  =  new  long[(int)numPackStreams  /  6];	  	non-compiled	[CE]  cannot  find  symbol  archives	114	None	add
53	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  6];	  	non-compiled	[CE]  ';'  expected	114	None	add
54	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  Archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  Archive.packSizes  =  new  long[(int)numPackStreams  /  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    Archive.packSizes  =  new  long[(int)numPackStreams  /  6];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	114	None	add
55	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  /  6];  [CE]  ')'  expected  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  /  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  /  6];	  	non-compiled	[CE]  ')'  expected	114	None	add
56	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  ArrayList  <  String>  deferredBlockStreams  =  readAllOrBits(header,  (int)numPackStreams  /  6];  [CE]  ')'  expected  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  ArrayList  <  String>  deferredBlockStreams  =  readAllOrBits(header,  (int)numPackStreams  /  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    ArrayList  <  String>  deferredBlockStreams  =  readAllOrBits(header,  (int)numPackStreams  /  6];	  	non-compiled	[CE]  ')'  expected	114	None	add
57	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  archive.packSizes  =  new  long[(int)numPackStreams  /  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    archive.packSizes  =  new  long[(int)numPackStreams  /  7];	  	compilable	  [FE]  NoClassDefFoundError  	114	12	add
58	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  archive.packSizes  =  new  long[(int)numPackStreams  /  7];  [FE]  NoClassDefFoundError  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  6];  archive.packSizes  =  new  long[(int)numPackStreams  /  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    6];    archive.packSizes  =  new  long[(int)numPackStreams  /  7];	  	compilable	  [FE]  NoClassDefFoundError  	114	12	add
59	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  	compilable	  [FE]  NoClassDefFoundError  	99	12	add
60	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [FE]  NoClassDefFoundError  [FE]    EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  	compilable	  [FE]  NoClassDefFoundError  	99	12	add
61	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [CE]  ';'  expected  [FE]      EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  ';'  expected	99	None	add
62	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  Archives.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [CE]  cannot  find  symbol  Archives  [FE]        EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  Archives.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    Archives.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  cannot  find  symbol  Archives	99	None	add
63	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  archives.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [CE]  cannot  find  symbol  archives  [FE]          EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  archives.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    archives.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  cannot  find  symbol  archives	99	None	add
64	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  Archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]            EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  Archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    Archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	99	None	add
65	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  Archives  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [CE]  ';'  expected  [FE]              EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  Archives  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    Archives  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  ';'  expected	99	None	add
66	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  int  numPackStreams  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [CE]  variable  numPackStreams  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  int  numPackStreams  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    int  numPackStreams  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];	  	non-compiled	[CE]  variable  numPackStreams  is  already  defined  in  method  readPackInfo(DataInput,Archive)	99	None	add
67	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEAder_SIZE];  [CE]  cannot  find  symbol  SIGNATURE_HEAder_SIZE  [FE]                  EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE];  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEAder_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEAder_SIZE];	  	non-compiled	[CE]  cannot  find  symbol  SIGNATURE_HEAder_SIZE	99	None	add
68	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];	  	compilable	  [FE]  NoClassDefFoundError  	60	12	add
69	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];	  	compilable	  [FE]  NoClassDefFoundError  	60	12	add
70	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];	  	non-compiled	[CE]  ';'  expected	60	None	add
71	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [CE]  cannot  find  symbol  Archives  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];	  	non-compiled	[CE]  cannot  find  symbol  Archives	60	None	add
72	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [CE]  cannot  find  symbol  archives  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];	  	non-compiled	[CE]  cannot  find  symbol  archives	60	None	add
73	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	60	None	add
74	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kCRC);  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kCRC);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kCRC);	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	60	None	add
75	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  int  numPackStreams  =  new  long[(int)numPackStreams  *  NID.kCRC];  [CE]  variable  numPackStreams  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  int  numPackStreams  =  new  long[(int)numPackStreams  *  NID.kCRC];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    int  numPackStreams  =  new  long[(int)numPackStreams  *  NID.kCRC];	  	non-compiled	[CE]  variable  numPackStreams  is  already  defined  in  method  readPackInfo(DataInput,Archive)	60	None	add
76	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kCRC];  [CE]  ')'  expected  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kCRC];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kCRC];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kCRC];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kCRC];	  	non-compiled	[CE]  ')'  expected	60	None	add
77	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  	compilable	  [FE]  NoClassDefFoundError  	83	12	add
78	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  	compilable	  [FE]  NoClassDefFoundError  	83	12	add
79	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	83	None	add
80	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  	non-compiled	[CE]  ';'  expected	83	None	add
81	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  Archives.packSizes  =  new  long[(int)numPackStreams  +  4];  [CE]  cannot  find  symbol  Archives  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  Archives.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    Archives.packSizes  =  new  long[(int)numPackStreams  +  4];	  	non-compiled	[CE]  cannot  find  symbol  Archives	83	None	add
82	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  archives.packSizes  =  new  long[(int)numPackStreams  +  4];  [CE]  cannot  find  symbol  archives  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  archives.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    archives.packSizes  =  new  long[(int)numPackStreams  +  4];	  	non-compiled	[CE]  cannot  find  symbol  archives	83	None	add
83	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	83	None	add
84	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [CE]  incompatible  types  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  	non-compiled	[CE]  incompatible  types	83	None	add
85	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  Archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  4];  Archive.packSizes  =  new  long[(int)numPackStreams  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    4];    Archive.packSizes  =  new  long[(int)numPackStreams  +  4];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	83	None	add
86	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  +  2];  [CE]  incompatible  types  [FE]                    NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)numPackStreams  +  2];	  archive.packSizes    =    new    int[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	70	None	replace
87	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  +  3];  [CE]  incompatible  types  [FE]                      NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)numPackStreams  +  3];	  archive.packSizes    =    new    int[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	70	None	replace
88	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)nid  +  1];  [CE]  incompatible  types  [FE]                        NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  int[(int)nid  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)nid  +  1];	  archive.packSizes    =    new    int[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	70	None	replace
89	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  *  1];  [CE]  incompatible  types  [FE]                          NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  int[(int)numPackStreams  *  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)numPackStreams  *  1];	  archive.packSizes    =    new    int[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	70	None	replace
90	[BUG]  [BUGGY]  Archives.packSizes  =  new  long[(int)nid];  [CE]  cannot  find  symbol  Archives  [FE]              IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Archives.packSizes  =  new  long[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Archives.packSizes  =  new  long[(int)nid];	  archive.packSizes    =    new    long[(int)nid];    Archives.packSizes    =    new    long[(int)nid];    	non-compiled	[CE]  cannot  find  symbol  Archives	76	None	replace
91	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[nid];	  archive.packSizes    =    new    long[(int)nid];    Archives.packSizes    =    new    long[(int)nid];    	compilable	  [FE]  IOException  	76	12	replace
92	[BUG]  [BUGGY]  archive.packSizes  =  new  long[nid];  [FE]  IOException  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[nid];	  archive.packSizes    =    new    long[(int)nid];    Archives.packSizes    =    new    long[(int)nid];    	compilable	  [FE]  IOException  	76	12	replace
93	[BUG]  [BUGGY]  archives.packSizes  =  new  long[(int)nid];  [CE]  cannot  find  symbol  archives  [FE]                  IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archives.packSizes  =  new  long[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archives.packSizes  =  new  long[(int)nid];	  archive.packSizes    =    new    long[(int)nid];    Archives.packSizes    =    new    long[(int)nid];    	non-compiled	[CE]  cannot  find  symbol  archives	76	None	replace
94	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  possible  loss  of  precision  [FE]          IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    archives.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
95	[BUG]  [BUGGY]  archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  cannot  find  symbol  archives  [FE]            IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    archives.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	non-compiled	[CE]  cannot  find  symbol  archives	36	None	replace
96	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  	compilable	  [FE]  NoClassDefFoundError  	149	12	add
97	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  	compilable	  [FE]  NoClassDefFoundError  	149	12	add
98	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  	non-compiled	[CE]  ';'  expected	149	None	add
99	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	149	None	add
100	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	149	None	add
101	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  Archives.packSizes  =  new  long[(int)numPackStreams  +  12];  [CE]  cannot  find  symbol  Archives  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  Archives.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    Archives.packSizes  =  new  long[(int)numPackStreams  +  12];	  	non-compiled	[CE]  cannot  find  symbol  Archives	149	None	add
102	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  Archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  Archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    Archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	149	None	add
103	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  archives.packSizes  =  new  long[(int)numPackStreams  +  12];  [CE]  cannot  find  symbol  archives  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  archives.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    archives.packSizes  =  new  long[(int)numPackStreams  +  12];	  	non-compiled	[CE]  cannot  find  symbol  archives	149	None	add
104	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [CE]  incompatible  types  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    12];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  12];	  	non-compiled	[CE]  incompatible  types	149	None	add
105	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes        =        new        long[(int)nid];        archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];	  	compilable	  [FE]  NoClassDefFoundError  	72	12	add
106	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [FE]  NoClassDefFoundError  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)nid];        archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];	  	compilable	  [FE]  NoClassDefFoundError  	72	12	add
107	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  Archive  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [CE]  ';'  expected  [FE]      NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  Archive  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)nid];        archive.packSizes    =    new    long[(int)nid];    Archive  archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  ';'  expected	72	None	add
108	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archives.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [CE]  cannot  find  symbol  archives  [FE]        NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archives.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)nid];        archive.packSizes    =    new    long[(int)nid];    archives.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  cannot  find  symbol  archives	72	None	add
109	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  archives.packSizes  =  new  long[(int)nid];  [CE]  cannot  find  symbol  archives  [FE]          NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  archives.packSizes  =  new  long[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)nid];        archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archives.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  cannot  find  symbol  archives	72	None	add
110	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  Archive.packSizes  =  new  long[(int)nid];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]            NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  archive.packSizes  =  new  long[(int)nid];  Archive.packSizes  =  new  long[(int)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)nid];        archive.packSizes    =    new    long[(int)nid];    archive.packSizes  =  new  long[(int)nid];  Archive.packSizes  =  new  long[(int)nid];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	72	None	add
111	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	compilable	  [FE]  NoClassDefFoundError  	81	12	add
112	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	compilable	  [FE]  NoClassDefFoundError  	81	12	add
113	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	81	None	add
114	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	non-compiled	[CE]  ';'  expected	81	None	add
115	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  Archives.packSizes  =  new  long[(int)numPackStreams  +  3];  [CE]  cannot  find  symbol  Archives  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  Archives.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    Archives.packSizes  =  new  long[(int)numPackStreams  +  3];	  	non-compiled	[CE]  cannot  find  symbol  Archives	81	None	add
116	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  archives.packSizes  =  new  long[(int)numPackStreams  +  3];  [CE]  cannot  find  symbol  archives  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  archives.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    archives.packSizes  =  new  long[(int)numPackStreams  +  3];	  	non-compiled	[CE]  cannot  find  symbol  archives	81	None	add
117	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  Archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  Archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    Archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	81	None	add
118	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	81	None	add
119	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [CE]  incompatible  types  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    3];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	non-compiled	[CE]  incompatible  types	81	None	add
120	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(byte)numPackStreams  +  1];  [CE]  incompatible  types  [FE]                  NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  byte[(byte)numPackStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(byte)numPackStreams  +  1];	  archive.packSizes    =    new    byte[(byte)numPackStreams];    	non-compiled	[CE]  incompatible  types	33	None	replace
121	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[NID.kSize];  [CE]  incompatible  types  [FE]                    NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  byte[NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[NID.kSize];	  archive.packSizes    =    new    byte[(byte)numPackStreams];    	non-compiled	[CE]  incompatible  types	33	None	replace
122	[BUG]  [BUGGY]  Integer  nid  =  readUint64(header,  archive.packPos);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]        NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readUint64(header,  archive.packPos);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readUint64(header,  archive.packPos);	          Integer    nid    =    readUint64(header);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	142	None	replace
123	[BUG]  [BUGGY]  Integer  nid  =  readUint64(header,  NID.kSize);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]          NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readUint64(header,  NID.kSize);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readUint64(header,  NID.kSize);	          Integer    nid    =    readUint64(header);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	142	None	replace
124	[BUG]  [BUGGY]  Integer  nid  =  readUint64(header,  nid);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]            NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readUint64(header,  nid);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readUint64(header,  nid);	          Integer    nid    =    readUint64(header);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	142	None	replace
125	[BUG]  [BUGGY]  Integer  nid  =  readUint64(header,  archive.packSizes);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]              NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readUint64(header,  archive.packSizes);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readUint64(header,  archive.packSizes);	          Integer    nid    =    readUint64(header);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	142	None	replace
126	[BUG]  [BUGGY]  Integer  nid  =  readUint64(header,  archive);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readUint64(header,  archive);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readUint64(header,  archive);	          Integer    nid    =    readUint64(header);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	142	None	replace
127	[BUG]  [BUGGY]  Integer  nid  =  readUint64(header,  fileName);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                  NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readUint64(header,  fileName);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readUint64(header,  fileName);	          Integer    nid    =    readUint64(header);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	142	None	replace
128	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]    NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    -    6];    archive.packSizes  =  new  long[(int)numPackStreams  -  6];	  	compilable	  [FE]  NegativeArraySizeException  	28	12	add
129	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [FE]  NegativeArraySizeException  [FE]    NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    6];    archive.packSizes  =  new  long[(int)numPackStreams  -  6];	  	compilable	  [FE]  NegativeArraySizeException  	28	12	add
130	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  archives.packSizes  =  new  long[(int)numPackStreams  -  6];  [CE]  cannot  find  symbol  archives  [FE]      NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  archives.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    6];    archives.packSizes  =  new  long[(int)numPackStreams  -  6];	  	non-compiled	[CE]  cannot  find  symbol  archives	28	None	add
131	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  Archives.packSizes  =  new  long[(int)numPackStreams  -  6];  [CE]  cannot  find  symbol  Archives  [FE]        NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  Archives.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    6];    Archives.packSizes  =  new  long[(int)numPackStreams  -  6];	  	non-compiled	[CE]  cannot  find  symbol  Archives	28	None	add
132	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  Archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]          NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  Archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    6];    Archive.packSizes  =  new  long[(int)numPackStreams  -  6];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	28	None	add
133	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [CE]  ';'  expected  [FE]            NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    6];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  6];	  	non-compiled	[CE]  ';'  expected	28	None	add
134	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]              NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  archive.packSizes  =  new  long[(int)numPackStreams  -  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    -    6];    archive.packSizes  =  new  long[(int)numPackStreams  -  7];	  	compilable	  [FE]  NegativeArraySizeException  	28	12	add
135	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  archive.packSizes  =  new  long[(int)numPackStreams  -  7];  [FE]  NegativeArraySizeException  [FE]              NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  archive.packSizes  =  new  long[(int)numPackStreams  -  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    6];    archive.packSizes  =  new  long[(int)numPackStreams  -  7];	  	compilable	  [FE]  NegativeArraySizeException  	28	12	add
136	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	compilable	  [FE]  NoClassDefFoundError  	125	12	add
137	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [FE]  NoClassDefFoundError  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	compilable	  [FE]  NoClassDefFoundError  	125	12	add
138	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  ';'  expected  [FE]      NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  ';'  expected	125	None	add
139	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archives.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  cannot  find  symbol  archives  [FE]        NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archives.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archives.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  cannot  find  symbol  archives	125	None	add
140	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]          NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)nid  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)nid  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	compilable	  [FE]  NoClassDefFoundError  	125	12	add
141	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)nid  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [FE]  NoClassDefFoundError  [FE]          NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)nid  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)nid  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	compilable	  [FE]  NoClassDefFoundError  	125	12	add
142	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archives  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  ';'  expected  [FE]            NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archives  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    Archives  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  ';'  expected	125	None	add
143	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archives.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  cannot  find  symbol  archives  [FE]              NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archives.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archives.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  cannot  find  symbol  archives	125	None	add
144	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]                NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	compilable	  [FE]  NoClassDefFoundError  	125	12	add
145	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [FE]  NoClassDefFoundError  [FE]                NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        +        1];        archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)numPackStreams  +  1];  archive.packSizes  =  new  long[(int)numPackStreams  +  3];	  	compilable	  [FE]  NoClassDefFoundError  	125	12	add
146	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  +  2];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  IOException  	6	12	replace
147	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  2];  [FE]  IOException  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  +  2];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  IOException  	6	12	replace
148	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  +  3];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  IOException  	6	12	replace
149	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  3];  [FE]  IOException  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  +  3];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  IOException  	6	12	replace
150	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  +  4];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  IOException  	6	12	replace
151	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  4];  [FE]  IOException  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  +  4];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  IOException  	6	12	replace
152	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  +  6];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	12	replace
153	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  6];  [FE]  ArrayIndexOutOfBoundsException  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  +  6];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	12	replace
154	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[NID.kSize  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[NID.kSize  +  1];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  IOException  	6	12	replace
155	[BUG]  [BUGGY]  archive.packSizes  =  new  long[NID.kSize  +  1];  [FE]  IOException  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[NID.kSize  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[NID.kSize  +  1];	  archive.packSizes    =    new    long[(int)nid    +    1];    	compilable	  [FE]  IOException  	6	12	replace
156	[BUG]  [BUGGY]  archive.packPos  =  new  long[(int)numPackStreams  *  NID.kSize];  [CE]  incompatible  types  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packPos  =  new  long[(int)numPackStreams  *  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packPos  =  new  long[(int)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  incompatible  types	46	None	replace
157	[BUG]  [BUGGY]  archive.packPos  =  new  long[(long)numPackStreams  *  NID.kSize];  [CE]  possible  loss  of  precision  [FE]      NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packPos  =  new  long[(long)numPackStreams  *  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packPos  =  new  long[(long)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
158	[BUG]  [BUGGY]  archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [CE]  cannot  find  symbol  archives  [FE]        NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    	non-compiled	[CE]  cannot  find  symbol  archives	46	None	replace
159	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	compilable	  [FE]  NoClassDefFoundError  	128	12	add
160	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	compilable	  [FE]  NoClassDefFoundError  	128	12	add
161	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	128	None	add
162	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  Archives.packSizes  =  new  long[(int)numPackStreams  +  7];  [CE]  cannot  find  symbol  Archives  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  Archives.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    Archives.packSizes  =  new  long[(int)numPackStreams  +  7];	  	non-compiled	[CE]  cannot  find  symbol  Archives	128	None	add
163	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  archives.packSizes  =  new  long[(int)numPackStreams  +  7];  [CE]  cannot  find  symbol  archives  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  archives.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    archives.packSizes  =  new  long[(int)numPackStreams  +  7];	  	non-compiled	[CE]  cannot  find  symbol  archives	128	None	add
164	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  Archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  Archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    Archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	128	None	add
165	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	non-compiled	[CE]  ';'  expected	128	None	add
166	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	128	None	add
167	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [CE]  incompatible  types  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    7];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  7];	  	non-compiled	[CE]  incompatible  types	128	None	add
168	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  	compilable	  [FE]  NoClassDefFoundError  	112	12	add
169	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  	compilable	  [FE]  NoClassDefFoundError  	112	12	add
170	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  	non-compiled	[CE]  ';'  expected	112	None	add
171	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  Archives.packSizes  =  new  long[(int)numPackStreams  /  10];  [CE]  cannot  find  symbol  Archives  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  Archives.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    Archives.packSizes  =  new  long[(int)numPackStreams  /  10];	  	non-compiled	[CE]  cannot  find  symbol  Archives	112	None	add
172	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  archives.packSizes  =  new  long[(int)numPackStreams  /  10];  [CE]  cannot  find  symbol  archives  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  archives.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    archives.packSizes  =  new  long[(int)numPackStreams  /  10];	  	non-compiled	[CE]  cannot  find  symbol  archives	112	None	add
173	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [CE]  incompatible  types  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  	non-compiled	[CE]  incompatible  types	112	None	add
174	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  Archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  Archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    Archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	112	None	add
175	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  ArrayList  <  String>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [CE]  incompatible  types  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  ArrayList  <  String>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    ArrayList  <  String>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  	non-compiled	[CE]  incompatible  types	112	None	add
176	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    /    10];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  /  10];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	112	None	add
177	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  2  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  2  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    /    2];    	compilable	  [FE]  NoClassDefFoundError  	108	12	replace
178	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  2  +  1];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  2  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  2  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    /    2];    	compilable	  [FE]  NoClassDefFoundError  	108	12	replace
179	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  2];	  archive.packSizes    =    new    long[(int)numPackStreams    /    2];    	compilable	  [FE]  IOException  	108	12	replace
180	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  2];  [FE]  IOException  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  2];	  archive.packSizes    =    new    long[(int)numPackStreams    /    2];    	compilable	  [FE]  IOException  	108	12	replace
181	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  /  3];	  archive.packSizes    =    new    long[(int)numPackStreams    /    2];    	compilable	  [FE]  IOException  	108	12	replace
182	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  3];  [FE]  IOException  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  /  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  /  3];	  archive.packSizes    =    new    long[(int)numPackStreams    /    2];    	compilable	  [FE]  IOException  	108	12	replace
183	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  3];	  archive.packSizes    =    new    long[(int)numPackStreams    +    3];    	compilable	  [FE]  IOException  	82	12	replace
184	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  3];  [FE]  IOException  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  3];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  3];	  archive.packSizes    =    new    long[(int)numPackStreams    +    3];    	compilable	  [FE]  IOException  	82	12	replace
185	[BUG]  [BUGGY]  Archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  cannot  find  symbol  Archives  [FE]            IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Archives.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    Archives.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	non-compiled	[CE]  cannot  find  symbol  Archives	37	None	replace
186	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes        =        new        long[(int)numPackStreams        -        1];        archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	compilable	  [FE]  NoClassDefFoundError  	52	12	add
187	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [FE]  NoClassDefFoundError  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        -        1];        archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	compilable	  [FE]  NoClassDefFoundError  	52	12	add
188	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  ';'  expected  [FE]      NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        -        1];        archive.packSizes    =    new    long[(int)numPackStreams    -    1];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  ';'  expected	52	None	add
189	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]        NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)nid  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes        =        new        long[(int)numPackStreams        -        1];        archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)nid  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	compilable	  [FE]  NoClassDefFoundError  	52	12	add
190	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)nid  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [FE]  NoClassDefFoundError  [FE]        NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)nid  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        -        1];        archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)nid  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	compilable	  [FE]  NoClassDefFoundError  	52	12	add
191	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  cannot  find  symbol  archives  [FE]          NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        -        1];        archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archives.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  cannot  find  symbol  archives	52	None	add
192	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archive  archive.packSizes  =  new  long[(int)nid  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  ';'  expected  [FE]            NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  Archive  archive.packSizes  =  new  long[(int)nid  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        -        1];        archive.packSizes    =    new    long[(int)numPackStreams    -    1];    Archive  archive.packSizes  =  new  long[(int)nid  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  ';'  expected	52	None	add
193	[BUG]  [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  cannot  find  symbol  archives  [FE]              NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes        =        new        long[(int)numPackStreams        -        1];        archive.packSizes    =    new    long[(int)numPackStreams    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  -  1];	  	non-compiled	[CE]  cannot  find  symbol  archives	52	None	add
194	[BUG]  [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  NID.kSize);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]          NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  NID.kSize);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  NID.kSize);	  Integer    nid    =    readAllOrBits(header,    (int)numPackStreams);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	9	None	replace
195	[BUG]  [BUGGY]  Integer  nid  =  readAllOrBits(header,  (Integer)numPackStreams);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]            NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readAllOrBits(header,  (Integer)numPackStreams);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readAllOrBits(header,  (Integer)numPackStreams);	  Integer    nid    =    readAllOrBits(header,    (int)numPackStreams);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	9	None	replace
196	[BUG]  [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams  +  1);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]              NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readAllOrBits(header,  (int)numPackStreams  +  1);	  Integer    nid    =    readAllOrBits(header,    (int)numPackStreams);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	9	None	replace
197	[BUG]  [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  NID.kCRC);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  NID.kCRC);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  NID.kCRC);	  Integer    nid    =    readAllOrBits(header,    (int)numPackStreams);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	9	None	replace
198	[BUG]  [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  nid);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                  NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  nid);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  nid);	  Integer    nid    =    readAllOrBits(header,    (int)numPackStreams);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	9	None	replace
199	[BUG]  [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  archive.packPos);  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]                    NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  archive.packPos);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  readAllOrBits(header,  (int)numPackStreams,  archive.packPos);	  Integer    nid    =    readAllOrBits(header,    (int)numPackStreams);    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	9	None	replace
200	[BUG]  [BUGGY]  Archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Archive.packSizes  =  new  long[(int)numPackStreams  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    Archive.packSizes    =    new    long[(int)numPackStreams    /    SIGNATURE_HEADER_SIZE];    	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	39	None	replace
201	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],;  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],;  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],;	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize],;    	non-compiled	[CE]  ';'  expected	51	None	replace
202	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  *  NID.kSize],;  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  *  NID.kSize],;  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)numPackStreams  *  NID.kSize],;	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize],;    	non-compiled	[CE]  ';'  expected	51	None	replace
203	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  nid;  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  nid;  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  nid;	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize],;    	non-compiled	[CE]  ';'  expected	51	None	replace
204	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  fileName;  [CE]  ';'  expected  [FE]                        IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  fileName;  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  fileName;	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize],;    	non-compiled	[CE]  ';'  expected	51	None	replace
205	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  nid);  [CE]  ';'  expected  [FE]                          IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  nid);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  nid);	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize],;    	non-compiled	[CE]  ';'  expected	51	None	replace
206	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  null;  [CE]  ';'  expected  [FE]                            IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  null;  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize],  null;	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize];    archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize],;    	non-compiled	[CE]  ';'  expected	51	None	replace
207	[BUG]  [BUGGY]  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  1];	  archive.packSizes    =    new    long[(int)numPackStreams    -    1];    Archive    archive.packSizes    =    new    long[(int)numPackStreams    -    1];    	non-compiled	[CE]  ';'  expected	57	None	replace
208	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	compilable	  [FE]  NoClassDefFoundError  	79	12	add
209	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	compilable	  [FE]  NoClassDefFoundError  	79	12	add
210	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	79	None	add
211	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  ';'  expected	79	None	add
212	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archives.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  cannot  find  symbol  Archives  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archives.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    Archives.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  cannot  find  symbol  Archives	79	None	add
213	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archives.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  cannot  find  symbol  archives  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  archives.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    archives.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  cannot  find  symbol  archives	79	None	add
214	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	79	None	add
215	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  incompatible  types  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  incompatible  types	79	None	add
216	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  2];  Archive.packSizes  =  new  long[(int)numPackStreams  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    +    2];    Archive.packSizes  =  new  long[(int)numPackStreams  +  2];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	79	None	add
217	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  NID.length];  [CE]  cannot  find  symbol  length  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  NID.length];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  *  NID.length];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.length];    	non-compiled	[CE]  cannot  find  symbol  length	67	None	replace
218	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length  +  1];  [CE]  cannot  find  symbol  length  [FE]                  IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.length];    	non-compiled	[CE]  cannot  find  symbol  length	67	None	replace
219	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length  -  1];  [CE]  cannot  find  symbol  length  [FE]                    IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.length  -  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.length];    	non-compiled	[CE]  cannot  find  symbol  length	67	None	replace
220	[BUG]  [BUGGY]  int  nid  =  header.readUnsignedByte()  +  1;  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]        NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  int  nid  =  header.readUnsignedByte()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	int  nid  =  header.readUnsignedByte()  +  1;	          int    nid    =    header.readUnsignedByte();    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	17	None	replace
221	[BUG]  [BUGGY]  int  nid  =  archive.packPos.readUnsignedByte();  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]          NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  int  nid  =  archive.packPos.readUnsignedByte();  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	int  nid  =  archive.packPos.readUnsignedByte();	          int    nid    =    header.readUnsignedByte();    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	17	None	replace
222	[BUG]  [BUGGY]  int  nid  =  archive.readUnsignedByte();  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]            NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  int  nid  =  archive.readUnsignedByte();  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	int  nid  =  archive.readUnsignedByte();	          int    nid    =    header.readUnsignedByte();    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	17	None	replace
223	[BUG]  [BUGGY]  Integer  nid  =  header.readUnsignedByte();  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]              NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Integer  nid  =  header.readUnsignedByte();  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Integer  nid  =  header.readUnsignedByte();	          int    nid    =    header.readUnsignedByte();    	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	17	None	replace
224	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	compilable	  [FE]  NoClassDefFoundError  	65	12	add
225	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	compilable	  [FE]  NoClassDefFoundError  	65	12	add
226	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	non-compiled	[CE]  ';'  expected	65	None	add
227	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  Archives.packSizes  =  new  long[(int)numPackStreams  *  nid];  [CE]  cannot  find  symbol  Archives  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  Archives.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    Archives.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	non-compiled	[CE]  cannot  find  symbol  Archives	65	None	add
228	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	65	None	add
229	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    int  nid  =  readUint64(header);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	non-compiled	[CE]  variable  nid  is  already  defined  in  method  readPackInfo(DataInput,Archive)	65	None	add
230	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  archives.packSizes  =  new  long[(int)numPackStreams  *  nid];  [CE]  cannot  find  symbol  archives  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  archives.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    archives.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	non-compiled	[CE]  cannot  find  symbol  archives	65	None	add
231	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [CE]  incompatible  types  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	non-compiled	[CE]  incompatible  types	65	None	add
232	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  Archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  Archive.packSizes  =  new  long[(int)numPackStreams  *  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    nid];    Archive.packSizes  =  new  long[(int)numPackStreams  *  nid];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	65	None	add
233	[BUG]  [BUGGY]  archive.packSizes  =  new  short[(int)numPackStreams  +  1];  [CE]  incompatible  types  [FE]              NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  short[(int)numPackStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  short[(int)numPackStreams  +  1];	  archive.packSizes    =    new    short[(int)numPackStreams];    	non-compiled	[CE]  incompatible  types	31	None	replace
234	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  	compilable	  [FE]  NoClassDefFoundError  	137	12	add
235	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [FE]  NoClassDefFoundError  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  	compilable	  [FE]  NoClassDefFoundError  	137	12	add
236	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  	non-compiled	[CE]  ';'  expected	137	None	add
237	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [CE]  cannot  find  symbol  Archives  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    Archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  	non-compiled	[CE]  cannot  find  symbol  Archives	137	None	add
238	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [CE]  cannot  find  symbol  archives  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    archives.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  	non-compiled	[CE]  cannot  find  symbol  archives	137	None	add
239	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    Archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	137	None	add
240	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams);  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  	non-compiled	[CE]  method  readAllOrBits  in  class  SevenZFile  cannot  be  applied  to  given  types;	137	None	add
241	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kSize  -  1];  [CE]  ')'  expected  [FE]                IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  (long)numPackStreams  *  NID.kSize  -  1];	  	non-compiled	[CE]  ')'  expected	137	None	add
242	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  int  kSize  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [CE]  incompatible  types  [FE]                  IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  int  kSize  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    -    1];    int  kSize  =  new  long[(int)numPackStreams  *  NID.kSize  -  1];	  	non-compiled	[CE]  incompatible  types	137	None	add
243	[BUG]  [BUGGY]  [FE]  EOFException  [FE]    EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	100	12	replace
244	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  +  1];  [FE]  EOFException  [FE]    EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	100	12	replace
245	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]      EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	100	12	replace
246	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  SIGNATURE_HEADER_SIZE];  [FE]  NoClassDefFoundError  [FE]      EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    *    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	100	12	replace
247	[BUG]  [BUGGY]  [FE]  IOException  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  4];	  archive.packSizes    =    new    long[(int)numPackStreams    *    1];    	compilable	  [FE]  IOException  	122	12	replace
248	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  4];  [FE]  IOException  [FE]    NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  4];	  archive.packSizes    =    new    long[(int)numPackStreams    *    1];    	compilable	  [FE]  IOException  	122	12	replace
249	[BUG]  [BUGGY]  [FE]  IOException  [FE]      NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  *  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    1];    	compilable	  [FE]  IOException  	122	12	replace
250	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  1];  [FE]  IOException  [FE]      NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  *  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  *  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    1];    	compilable	  [FE]  IOException  	122	12	replace
251	[BUG]  [BUGGY]  [FE]  IOException  [FE]        NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  16];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  16];	  archive.packSizes    =    new    long[(int)numPackStreams    *    1];    	compilable	  [FE]  IOException  	122	12	replace
252	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  16];  [FE]  IOException  [FE]        NoClassDefFoundError    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  16];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  16];	  archive.packSizes    =    new    long[(int)numPackStreams    *    1];    	compilable	  [FE]  IOException  	122	12	replace
253	[BUG]  [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  incompatible  types  [FE]                  IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    ArrayList    <    Long>    deferredBlockStreams    =    readAllOrBits(header,    nid);    archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	94	None	replace
254	[BUG]  [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[(long)numPackStreams  +  1];  [CE]  incompatible  types  [FE]                    IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[(long)numPackStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[(long)numPackStreams  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    ArrayList    <    Long>    deferredBlockStreams    =    readAllOrBits(header,    nid);    archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	94	None	replace
255	[BUG]  [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [CE]  incompatible  types  [FE]                      IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(int)numPackStreams  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    ArrayList    <    Long>    deferredBlockStreams    =    readAllOrBits(header,    nid);    archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	94	None	replace
256	[BUG]  [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(long)numPackStreams  +  1];  [CE]  incompatible  types  [FE]                        IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(long)numPackStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid);  archive.packSizes  =  new  long[(long)numPackStreams  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    ArrayList    <    Long>    deferredBlockStreams    =    readAllOrBits(header,    nid);    archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	94	None	replace
257	[BUG]  [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[deferredBlockStreams  +  1];  [CE]  incompatible  types  [FE]                          IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[deferredBlockStreams  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  Long>  deferredBlockStreams  =  readAllOrBits(header,  nid  +  1);  archive.packSizes  =  new  long[deferredBlockStreams  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    +    1];    ArrayList    <    Long>    deferredBlockStreams    =    readAllOrBits(header,    nid);    archive.packSizes    =    new    long[(int)numPackStreams    +    1];    	non-compiled	[CE]  incompatible  types	94	None	replace
258	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(int)numPackStreams  -  1];  [CE]  incompatible  types  [FE]        IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  byte[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(int)numPackStreams  -  1];	  archive.packSizes    =    new    long[(long)numPackStreams    -    1];    	non-compiled	[CE]  incompatible  types	147	None	replace
259	[BUG]  [BUGGY]  archive.packSizes  =  new  short[(int)numPackStreams  -  1];  [CE]  incompatible  types  [FE]          IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  short[(int)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  short[(int)numPackStreams  -  1];	  archive.packSizes    =    new    long[(long)numPackStreams    -    1];    	non-compiled	[CE]  incompatible  types	147	None	replace
260	[BUG]  [BUGGY]  archive.packSizes  =  new  double[(double)numPackStreams  -  1];  [CE]  possible  loss  of  precision  [FE]            IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  double[(double)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  double[(double)numPackStreams  -  1];	  archive.packSizes    =    new    long[(long)numPackStreams    -    1];    	non-compiled	[CE]  possible  loss  of  precision	147	None	replace
261	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(long)numPackStreams  -  1];  [CE]  possible  loss  of  precision  [FE]              IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  byte[(long)numPackStreams  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(long)numPackStreams  -  1];	  archive.packSizes    =    new    long[(long)numPackStreams    -    1];    	non-compiled	[CE]  possible  loss  of  precision	147	None	replace
262	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  +  6];  [CE]  possible  loss  of  precision  [FE]              IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(long)numPackStreams  +  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(long)numPackStreams  +  6];	  archive.packSizes    =    new    long[(int)numPackStreams    +    6];    Archives.packSizes    =    new    long[(int)numPackStreams    +    6];    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
263	[BUG]  [BUGGY]  Archives.packSizes  =  new  long[(int)numPackStreams  +  6];  [CE]  cannot  find  symbol  Archives  [FE]                IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  Archives.packSizes  =  new  long[(int)numPackStreams  +  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	Archives.packSizes  =  new  long[(int)numPackStreams  +  6];	  archive.packSizes    =    new    long[(int)numPackStreams    +    6];    Archives.packSizes    =    new    long[(int)numPackStreams    +    6];    	non-compiled	[CE]  cannot  find  symbol  Archives	22	None	replace
264	[BUG]  [BUGGY]  [FE]  IOException  [FE]    EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  nid];	  archive.packSizes    =    new    long[(int)numPackStreams    +    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	104	12	replace
265	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  nid];  [FE]  IOException  [FE]    EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  nid];	  archive.packSizes    =    new    long[(int)numPackStreams    +    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	104	12	replace
266	[BUG]  [BUGGY]  [FE]  EOFException  [FE]      EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)nid  +  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    +    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	104	12	replace
267	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  SIGNATURE_HEADER_SIZE];  [FE]  EOFException  [FE]      EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)nid  +  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)nid  +  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    +    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  EOFException  	104	12	replace
268	[BUG]  [BUGGY]  [FE]  IOException  [FE]        EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    +    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	104	12	replace
269	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  NID.kSize];  [FE]  IOException  [FE]        EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    +    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	104	12	replace
270	[BUG]  [BUGGY]  [FE]  IOException  [FE]          EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  +  10];	  archive.packSizes    =    new    long[(int)numPackStreams    +    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	104	12	replace
271	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  10];  [FE]  IOException  [FE]          EOFException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  +  10];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  +  10];	  archive.packSizes    =    new    long[(int)numPackStreams    +    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	104	12	replace
272	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams,  nid);  [CE]  no  suitable  constructor  found  for  ArrayList(long,int)  [FE]            NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams,  nid);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams,  nid);	  ArrayList    <    String>    deferredBlockStreams    =    new    ArrayList    <    String>(numPackStreams);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(long,int)	10	None	replace
273	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(length);  [CE]  cannot  find  symbol  length  [FE]              NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(length);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(length);	  ArrayList    <    String>    deferredBlockStreams    =    new    ArrayList    <    String>(numPackStreams);    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
274	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(archive.packPos);  [CE]  no  suitable  constructor  found  for  ArrayList(long)  [FE]                NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(archive.packPos);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(archive.packPos);	  ArrayList    <    String>    deferredBlockStreams    =    new    ArrayList    <    String>(numPackStreams);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(long)	10	None	replace
275	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(nid,  numPackStreams);  [CE]  no  suitable  constructor  found  for  ArrayList(int,long)  [FE]                  NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(nid,  numPackStreams);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(nid,  numPackStreams);	  ArrayList    <    String>    deferredBlockStreams    =    new    ArrayList    <    String>(numPackStreams);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(int,long)	10	None	replace
276	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams.length);  [CE]  long  cannot  be  dereferenced  [FE]                    NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams.length);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(numPackStreams.length);	  ArrayList    <    String>    deferredBlockStreams    =    new    ArrayList    <    String>(numPackStreams);    	non-compiled	[CE]  long  cannot  be  dereferenced	10	None	replace
277	[BUG]  [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(archive.packPos,  nid);  [CE]  no  suitable  constructor  found  for  ArrayList(long,int)  [FE]                      NullPointerException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(archive.packPos,  nid);  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	ArrayList  <  String>  deferredBlockStreams  =  new  ArrayList  <  String>(archive.packPos,  nid);	  ArrayList    <    String>    deferredBlockStreams    =    new    ArrayList    <    String>(numPackStreams);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(long,int)	10	None	replace
278	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]    NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    -    16];    archive.packSizes  =  new  long[(int)numPackStreams  -  16];	  	compilable	  [FE]  NegativeArraySizeException  	116	12	add
279	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [FE]  NegativeArraySizeException  [FE]    NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    16];    archive.packSizes  =  new  long[(int)numPackStreams  -  16];	  	compilable	  [FE]  NegativeArraySizeException  	116	12	add
280	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  archives.packSizes  =  new  long[(int)numPackStreams  -  16];  [CE]  cannot  find  symbol  archives  [FE]      NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  archives.packSizes  =  new  long[(int)numPackStreams  -  16];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    16];    archives.packSizes  =  new  long[(int)numPackStreams  -  16];	  	non-compiled	[CE]  cannot  find  symbol  archives	116	None	add
281	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  Archives.packSizes  =  new  long[(int)numPackStreams  -  16];  [CE]  cannot  find  symbol  Archives  [FE]        NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  Archives.packSizes  =  new  long[(int)numPackStreams  -  16];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    16];    Archives.packSizes  =  new  long[(int)numPackStreams  -  16];	  	non-compiled	[CE]  cannot  find  symbol  Archives	116	None	add
282	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  Archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context  [FE]          NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  Archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    16];    Archive.packSizes  =  new  long[(int)numPackStreams  -  16];	  	non-compiled	[CE]  non-static  variable  packSizes  cannot  be  referenced  from  a  static  context	116	None	add
283	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [CE]  ';'  expected  [FE]            NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    16];    Archive  archive.packSizes  =  new  long[(int)numPackStreams  -  16];	  	non-compiled	[CE]  ';'  expected	116	None	add
284	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]              NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes    =    new    long[(int)numPackStreams    -    16];    archive.packSizes  =  new  long[(int)numPackStreams  -  6];	  	compilable	  [FE]  NegativeArraySizeException  	116	12	add
285	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [FE]  NegativeArraySizeException  [FE]              NegativeArraySizeException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  -  16];  archive.packSizes  =  new  long[(int)numPackStreams  -  6];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes    =    new    long[(int)numPackStreams    -    16];    archive.packSizes  =  new  long[(int)numPackStreams  -  6];	  	compilable	  [FE]  NegativeArraySizeException  	116	12	add
286	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  2];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
287	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  2];  [FE]  IOException  [FE]    IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  2];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  2];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
288	[BUG]  [BUGGY]  [FE]  NoClassDefFoundError  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	146	12	replace
289	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE  +  1];  [FE]  NoClassDefFoundError  [FE]      IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  SIGNATURE_HEADER_SIZE  +  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  NoClassDefFoundError  	146	12	replace
290	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  4];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
291	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  4];  [FE]  IOException  [FE]        IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  4];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  4];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
292	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid  /  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  nid  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
293	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid  /  SIGNATURE_HEADER_SIZE];  [FE]  IOException  [FE]          IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  nid  /  SIGNATURE_HEADER_SIZE];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  nid  /  SIGNATURE_HEADER_SIZE];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
294	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
295	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  1];  [FE]  IOException  [FE]            IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  NID.kSize  /  1];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
296	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
297	[BUG]  [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  NID.kSize];  [FE]  IOException  [FE]              IOException    [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  NID.kSize];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  long[(int)numPackStreams  *  SIGNATURE_HEADER_SIZE  /  NID.kSize];	  archive.packSizes    =    new    long[(int)numPackStreams    *    NID.kSize    /    SIGNATURE_HEADER_SIZE];    	compilable	  [FE]  IOException  	146	12	replace
298	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[nid];  [CE]  incompatible  types  [FE]                NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  byte[nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[nid];	  archive.packSizes    =    new    byte[(long)nid];    	non-compiled	[CE]  incompatible  types	140	None	replace
299	[BUG]  [BUGGY]  archive.packSizes  =  new  byte[(char)nid];  [CE]  incompatible  types  [FE]                  NoClassDefFoundError      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  byte[(char)nid];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  byte[(char)nid];	  archive.packSizes    =    new    byte[(long)nid];    	non-compiled	[CE]  incompatible  types	140	None	replace
300	[BUG]  [BUGGY]  archive.packSizes  =  new  int[(int)nid  -  1];  [CE]  error  reading  /home/hye/repair/IteRepair/IteRepair/projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java;  /home/hye/repair/IteRepair/IteRepair/projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java  (No  such  file  or  directory)  [FE]        IOException      [CONTEXT]      private  void  readPackInfo(final  DataInput  header,  final  Archive  archive)  throws  IOException  {  archive.packPos  =  readUint64(header);  final  long  numPackStreams  =  readUint64(header);  int  nid  =  header.readUnsignedByte();  if  (nid  ==  NID.kSize)  {      [BUGGY]  archive.packSizes  =  new  int[(int)nid  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  archive.packSizes.length;  i++)  {  archive.packSizes[i]  =  readUint64(header);  }  nid  =  header.readUnsignedByte();  }  if  (nid  ==  NID.kCRC)  {  archive.packCrcsDefined  =  readAllOrBits(header,  (int)numPackStreams);  archive.packCrcs  =  new  long[(int)numPackStreams];  for  (int  i  =  0;  i  <  (int)numPackStreams;  i++)  {  [CLASS]  SevenZFile  [METHOD]  readPackInfo  [RETURN_TYPE]  void  DataInput  header  Archive  archive  [VARIABLES]  byte[]  nextHeader  password  property  sevenZSignature  signature  DataInput  header  Archive  archive  boolean  RandomAccessFile  file  InputStream  currentFolderInputStream  inputStreamStack  ArrayList  deferredBlockStreams  String  fileName  int  SIGNATURE_HEADER_SIZE  currentEntryIndex  currentFolderIndex  firstPackStreamIndex  i  nextHeaderSizeInt  nid  long  numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	archive.packSizes  =  new  int[(int)nid  -  1];	  archive.packSizes    =    new    long[(long)nid    -    1];    	non-compiled	[CE]  error  reading  /home/hye/repair/IteRepair/IteRepair/projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java;  /home/hye/repair/IteRepair/IteRepair/projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java  (No  such  file  or  directory)	143	None	replace
