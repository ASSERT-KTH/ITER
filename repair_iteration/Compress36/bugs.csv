bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private final ArrayList<InputStream> deferredBlockStreams = new ArrayList<InputStream>(); [CLASS] SevenZFile  [VARIABLES] 	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9258200997725514	82	82	12	replace	
2	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private final ArrayList<InputStream> deferredBlockStreams = new ArrayList<InputStream>(); [CLASS] SevenZFile  [VARIABLES] 	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9258200997725514	82	82	12	add	
3	[BUG] [BUGGY] int nid = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { [BUGGY] int nid = header.readUnsignedByte(); [BUGGY]  if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else { [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	320	320	12	replace	
4	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { [BUGGY] [BUGGY] int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else { [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	320	320	12	add	
5	[BUG] [BUGGY] if (nid == NID.kPackInfo) { [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); [BUGGY] if (nid == NID.kPackInfo) { [BUGGY] readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	322	322	12	replace	
6	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); [BUGGY] [BUGGY] if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	322	322	12	add	
7	[BUG] [BUGGY] readPackInfo(header, archive); [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { [BUGGY] readPackInfo(header, archive); [BUGGY] nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	323	323	12	replace	
8	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { [BUGGY] [BUGGY] readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	323	323	12	add	
9	[BUG] [BUGGY] nid = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); [BUGGY] nid = header.readUnsignedByte(); [BUGGY] } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; }  [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	324	324	12	replace	
10	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); [BUGGY] [BUGGY] nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; }  [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	324	324	12	add	
11	[BUG] [BUGGY] if (nid == NID.kUnpackInfo) { [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } [BUGGY] if (nid == NID.kUnpackInfo) { [BUGGY] readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	327	327	12	replace	
12	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } [BUGGY] [BUGGY] if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	327	327	12	add	
13	[BUG] [BUGGY] readUnpackInfo(header, archive); [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { [BUGGY] readUnpackInfo(header, archive); [BUGGY] nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	328	328	12	replace	
14	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { [BUGGY] [BUGGY] readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	328	328	12	add	
15	[BUG] [BUGGY] nid = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); [BUGGY] nid = header.readUnsignedByte(); [BUGGY] } else {  archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); }  [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	329	329	12	replace	
16	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); [BUGGY] [BUGGY] nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); }  [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	329	329	12	add	
17	[BUG] [BUGGY] if (nid == NID.kSubStreamsInfo) { [FE] NoClassDefFoundError [CONTEXT] } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } [BUGGY] if (nid == NID.kSubStreamsInfo) { [BUGGY] readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException("Badly terminated StreamsInfo"); } } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	335	335	12	replace	
18	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {  archive.folders = new Folder[0]; } [BUGGY] [BUGGY] if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException("Badly terminated StreamsInfo"); } } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	335	335	12	add	
19	[BUG] [BUGGY] if (nid != NID.kEnd) { [FE] NoClassDefFoundError [CONTEXT] } else {  archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } [BUGGY] if (nid != NID.kEnd) { [BUGGY] throw new IOException("Badly terminated StreamsInfo"); } } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	340	340	12	replace	
20	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] } else {  archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } [BUGGY] [BUGGY] if (nid != NID.kEnd) { throw new IOException("Badly terminated StreamsInfo"); } } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	340	340	12	add	
21	[BUG] [BUGGY] } [FE] NoClassDefFoundError [CONTEXT] } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException("Badly terminated StreamsInfo"); } [BUGGY] } [BUGGY]  [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	343	343	12	replace	
22	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException("Badly terminated StreamsInfo"); } [BUGGY] [BUGGY] } [CLASS] SevenZFile [METHOD] readStreamsInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex nextHeaderSizeInt nid  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	343	343	12	add	
23	[BUG] [BUGGY] archive.packPos = readUint64(header); [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { [BUGGY] archive.packPos = readUint64(header); [BUGGY] final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); }  [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	346	346	12	replace	
24	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { [BUGGY] [BUGGY] archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); }  [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	346	346	12	add	
25	[BUG] [BUGGY] final long numPackStreams = readUint64(header); [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); [BUGGY] final long numPackStreams = readUint64(header); [BUGGY] int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	347	347	12	replace	
26	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); [BUGGY] [BUGGY] final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	347	347	12	add	
27	[BUG] [BUGGY] int nid = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); [BUGGY] int nid = header.readUnsignedByte(); [BUGGY] if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	348	348	12	replace	
28	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); [BUGGY] [BUGGY] int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	348	348	12	add	
29	[BUG] [BUGGY] if (nid == NID.kSize) { [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); [BUGGY] if (nid == NID.kSize) { [BUGGY] archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	349	349	12	replace	
30	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); [BUGGY] [BUGGY] if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	349	349	12	add	
31	[BUG] [BUGGY] archive.packSizes = new long[(int)numPackStreams]; [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { [BUGGY] archive.packSizes = new long[(int)numPackStreams]; [BUGGY] for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	replace	
32	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { [BUGGY] [BUGGY] archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	350	350	12	add	
33	[BUG] [BUGGY] for (int i = 0; i < archive.packSizes.length; i++) { [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; [BUGGY] for (int i = 0; i < archive.packSizes.length; i++) { [BUGGY] archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	351	351	12	replace	
34	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; [BUGGY] [BUGGY] for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	351	351	12	add	
35	[BUG] [BUGGY] archive.packSizes[i] = readUint64(header); [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { [BUGGY] archive.packSizes[i] = readUint64(header); [BUGGY] } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	352	352	12	replace	
36	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { [BUGGY] [BUGGY] archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	352	352	12	add	
37	[BUG] [BUGGY] nid = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } [BUGGY] nid = header.readUnsignedByte(); [BUGGY] } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	354	354	12	replace	
38	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } [BUGGY] [BUGGY] nid = header.readUnsignedByte(); } if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	354	354	12	add	
39	[BUG] [BUGGY] if (nid == NID.kCRC) { [FE] NoClassDefFoundError [CONTEXT] final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } [BUGGY] if (nid == NID.kCRC) { [BUGGY] archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } nid = header.readUnsignedByte(); } [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	357	357	12	replace	
40	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte(); } [BUGGY] [BUGGY] if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } nid = header.readUnsignedByte(); } [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	357	357	12	add	
41	[BUG] [BUGGY] if (nid != NID.kEnd) { [FE] NoClassDefFoundError [CONTEXT] archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } nid = header.readUnsignedByte(); } [BUGGY] if (nid != NID.kEnd) { [BUGGY] throw new IOException("Badly terminated PackInfo (" + nid + ")"); } } [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	369	369	12	replace	
42	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } nid = header.readUnsignedByte(); } [BUGGY] [BUGGY] if (nid != NID.kEnd) { throw new IOException("Badly terminated PackInfo (" + nid + ")"); } } [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	369	369	12	add	
43	[BUG] [BUGGY] } [FE] NoClassDefFoundError [CONTEXT] archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException("Badly terminated PackInfo (" + nid + ")"); } [BUGGY] } [BUGGY]  [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	372	372	12	replace	
44	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException("Badly terminated PackInfo (" + nid + ")"); } [BUGGY] [BUGGY] } [CLASS] SevenZFile [METHOD] readPackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] byte[] nextHeader password property sevenZSignature signature DataInput header Archive archive boolean RandomAccessFile file InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex firstPackStreamIndex i nextHeaderSizeInt nid long numPackStreams  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	372	372	12	add	
45	[BUG] [BUGGY] int nid = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { [BUGGY] int nid = header.readUnsignedByte(); [BUGGY] if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	375	375	12	replace	
46	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { [BUGGY] [BUGGY] int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	375	375	12	add	
47	[BUG] [BUGGY] if (nid != NID.kFolder) { [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); [BUGGY] if (nid != NID.kFolder) { [BUGGY] throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	376	376	12	replace	
48	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); [BUGGY] [BUGGY] if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	376	376	12	add	
49	[BUG] [BUGGY] final long numFolders = readUint64(header); [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } [BUGGY] final long numFolders = readUint64(header); [BUGGY] final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); }  [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	379	379	12	replace	
50	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } [BUGGY] [BUGGY] final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); }  [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	379	379	12	add	
51	[BUG] [BUGGY] final Folder[] folders = new Folder[(int)numFolders]; [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); [BUGGY] final Folder[] folders = new Folder[(int)numFolders]; [BUGGY] archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	380	380	12	replace	
52	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); [BUGGY] [BUGGY] final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	380	380	12	add	
53	[BUG] [BUGGY] archive.folders = folders; [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; [BUGGY] archive.folders = folders; [BUGGY] final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	381	381	12	replace	
54	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; [BUGGY] [BUGGY] archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	381	381	12	add	
55	[BUG] [BUGGY] final int external = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; [BUGGY] final int external = header.readUnsignedByte(); [BUGGY] if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	382	382	12	replace	
56	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; [BUGGY] [BUGGY] final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	382	382	12	add	
57	[BUG] [BUGGY] if (external != 0) { [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); [BUGGY] if (external != 0) { [BUGGY] throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	383	383	12	replace	
58	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); [BUGGY] [BUGGY] if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	383	383	12	add	
59	[BUG] [BUGGY] for (int i = 0; i < (int)numFolders; i++) { [FE] NoClassDefFoundError [CONTEXT] if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } [BUGGY] for (int i = 0; i < (int)numFolders; i++) { [BUGGY] folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	386	386	12	replace	
60	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] if (nid != NID.kFolder) { throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } [BUGGY] [BUGGY] for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	386	386	12	add	
61	[BUG] [BUGGY] folders[i] = readFolder(header); [FE] NoClassDefFoundError [CONTEXT] throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { [BUGGY] folders[i] = readFolder(header); [BUGGY] } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	387	387	12	replace	
62	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] throw new IOException("Expected kFolder, got " + nid); } final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { [BUGGY] [BUGGY] folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	387	387	12	add	
63	[BUG] [BUGGY] nid = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } [BUGGY] nid = header.readUnsignedByte(); [BUGGY] if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } }  [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	390	390	12	replace	
64	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } [BUGGY] [BUGGY] nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } }  [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	390	390	12	add	
65	[BUG] [BUGGY] if (nid != NID.kCodersUnpackSize) { [FE] NoClassDefFoundError [CONTEXT] archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); [BUGGY] if (nid != NID.kCodersUnpackSize) { [BUGGY] throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	391	391	12	replace	
66	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); [BUGGY] [BUGGY] if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	391	391	12	add	
67	[BUG] [BUGGY] for (final Folder folder : folders) { [FE] NoClassDefFoundError [CONTEXT] throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } [BUGGY] for (final Folder folder : folders) { [BUGGY] folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	394	394	12	replace	
68	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] throw new IOException("External unsupported"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } [BUGGY] [BUGGY] for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	394	394	12	add	
69	[BUG] [BUGGY] folder.unpackSizes = new long[(int)folder.totalOutputStreams]; [FE] NoClassDefFoundError [CONTEXT] } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { [BUGGY] folder.unpackSizes = new long[(int)folder.totalOutputStreams]; [BUGGY] for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	395	395	12	replace	
70	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { [BUGGY] [BUGGY] folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	395	395	12	add	
71	[BUG] [BUGGY] for (int i = 0; i < folder.totalOutputStreams; i++) { [FE] NoClassDefFoundError [CONTEXT] for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; [BUGGY] for (int i = 0; i < folder.totalOutputStreams; i++) { [BUGGY] folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	396	396	12	replace	
72	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; [BUGGY] [BUGGY] for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	396	396	12	add	
73	[BUG] [BUGGY] folder.unpackSizes[i] = readUint64(header); [FE] NoClassDefFoundError [CONTEXT] folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { [BUGGY] folder.unpackSizes[i] = readUint64(header); [BUGGY] } } nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	397	397	12	replace	
74	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] folders[i] = readFolder(header); } nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { [BUGGY] [BUGGY] folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	397	397	12	add	
75	[BUG] [BUGGY] nid = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } [BUGGY] nid = header.readUnsignedByte(); [BUGGY] if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } else { folders[i].hasCrc = false; } } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	401	401	12	replace	
76	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] if (nid != NID.kCodersUnpackSize) { throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } [BUGGY] [BUGGY] nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } else { folders[i].hasCrc = false; } } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	401	401	12	add	
77	[BUG] [BUGGY] if (nid == NID.kCRC) { [FE] NoClassDefFoundError [CONTEXT] throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); [BUGGY] if (nid == NID.kCRC) { [BUGGY] final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } else { folders[i].hasCrc = false; } }  [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	402	402	12	replace	
78	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] throw new IOException("Expected kCodersUnpackSize, got " + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } } nid = header.readUnsignedByte(); [BUGGY] [BUGGY] if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } else { folders[i].hasCrc = false; } }  [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	402	402	12	add	
79	[BUG] [BUGGY] if (nid != NID.kEnd) { [FE] NoClassDefFoundError [CONTEXT] folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } else { folders[i].hasCrc = false; } } nid = header.readUnsignedByte(); } [BUGGY] if (nid != NID.kEnd) { [BUGGY] throw new IOException("Badly terminated UnpackInfo"); } } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	416	416	12	replace	
80	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } else { folders[i].hasCrc = false; } } nid = header.readUnsignedByte(); } [BUGGY] [BUGGY] if (nid != NID.kEnd) { throw new IOException("Badly terminated UnpackInfo"); } } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	416	416	12	add	
81	[BUG] [BUGGY] } [FE] NoClassDefFoundError [CONTEXT] folders[i].hasCrc = false; } } nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException("Badly terminated UnpackInfo"); } [BUGGY] } [BUGGY]  [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	419	419	12	replace	
82	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] folders[i].hasCrc = false; } } nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException("Badly terminated UnpackInfo"); } [BUGGY] [BUGGY] } [CLASS] SevenZFile [METHOD] readUnpackInfo [RETURN_TYPE] void  DataInput header Archive archive [VARIABLES] Archive archive InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams BitSet crcsDefined String fileName Folder folder int SIGNATURE_HEADER_SIZE currentEntryIndex currentFolderIndex external firstPackStreamIndex i nextHeaderSizeInt nid long numFolders byte[] nextHeader password property sevenZSignature signature DataInput header Folder[] folders boolean RandomAccessFile file  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	419	419	12	add	
83	[BUG] [BUGGY] final Folder folder = new Folder(); [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { [BUGGY] final Folder folder = new Folder(); [BUGGY]  final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	505	505	12	replace	
84	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { [BUGGY] [BUGGY] final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	505	505	12	add	
85	[BUG] [BUGGY] final long numCoders = readUint64(header); [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); [BUGGY] final long numCoders = readUint64(header); [BUGGY] final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	507	507	12	replace	
86	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); [BUGGY] [BUGGY] final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	507	507	12	add	
87	[BUG] [BUGGY] final Coder[] coders = new Coder[(int)numCoders]; [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); [BUGGY] final Coder[] coders = new Coder[(int)numCoders]; [BUGGY] long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0;  [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	508	508	12	replace	
88	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); [BUGGY] [BUGGY] final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0;  [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	508	508	12	add	
89	[BUG] [BUGGY] long totalInStreams = 0; [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; [BUGGY] long totalInStreams = 0; [BUGGY] long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	509	509	12	replace	
90	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; [BUGGY] [BUGGY] long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	509	509	12	add	
91	[BUG] [BUGGY] long totalOutStreams = 0; [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; [BUGGY] long totalOutStreams = 0; [BUGGY] for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	510	510	12	replace	
92	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; [BUGGY] [BUGGY] long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	510	510	12	add	
93	[BUG] [BUGGY] for (int i = 0; i < coders.length; i++) { [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; [BUGGY] for (int i = 0; i < coders.length; i++) { [BUGGY] coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	511	511	12	replace	
94	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; [BUGGY] [BUGGY] for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	511	511	12	add	
95	[BUG] [BUGGY] coders[i] = new Coder(); [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { [BUGGY] coders[i] = new Coder(); [BUGGY] final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { coders[i].numInStreams = 1; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	512	512	12	replace	
96	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { [BUGGY] [BUGGY] coders[i] = new Coder(); final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { coders[i].numInStreams = 1; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	512	512	12	add	
97	[BUG] [BUGGY] final int bits = header.readUnsignedByte(); [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); [BUGGY] final int bits = header.readUnsignedByte(); [BUGGY] final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { coders[i].numInStreams = 1; coders[i].numOutStreams = 1; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	513	513	12	replace	
98	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); [BUGGY] [BUGGY] final int bits = header.readUnsignedByte(); final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { coders[i].numInStreams = 1; coders[i].numOutStreams = 1; [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	513	513	12	add	
99	[BUG] [BUGGY] final int idSize = bits & 0xf; [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); [BUGGY] final int idSize = bits & 0xf; [BUGGY] final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { coders[i].numInStreams = 1; coders[i].numOutStreams = 1; } else { [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	514	514	12	replace	
100	[BUG] [BUGGY] [FE] NoClassDefFoundError [CONTEXT] private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte(); [BUGGY] [BUGGY] final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { coders[i].numInStreams = 1; coders[i].numOutStreams = 1; } else { [CLASS] SevenZFile [METHOD] readFolder [RETURN_TYPE] Folder  DataInput header [VARIABLES] Archive archive BindPair[] bindPairs long[] packedStreams InputStream currentFolderInputStream inputStreamStack ArrayList deferredBlockStreams String fileName Folder folder int SIGNATURE_HEADER_SIZE bits currentEntryIndex currentFolderIndex external firstPackStreamIndex i idSize nextCrc nextHeaderSizeInt nextMissingCrc nextUnpackStream nid numDigests totalUnpackStreams long numBindPairs numCoders numPackedStreams propertiesSize totalInStreams totalOutStreams byte[] nextHeader password property sevenZSignature signature DataInput header boolean hasAttributes isSimple moreAlternativeMethods RandomAccessFile file Coder[] coders  	projects/Compress36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java	0.9128709291752769	514	514	12	add	
