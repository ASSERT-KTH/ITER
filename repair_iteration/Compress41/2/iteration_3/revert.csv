projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<sKipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<max;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(x,0,skipped,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<value;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<max;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<sink;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped==0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,size);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<SHORT_BUF;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x+2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<x;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<x;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>x){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipped>max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(SKIP_BUF.length>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skip--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0,len=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>x){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(value,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<length;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x+1,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x+1,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x+1,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x*2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(x,0,skipped,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(x,0,skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557readFully(x,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(x,0,rem,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557readFully(x,0,skipped,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(rem,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(x,0,skipped,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<=0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,skipped,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,skipd,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,skipped,1,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<sh.length+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<x;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=-1){if(skipped>=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=-1){if(skipped>>0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=-1){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=-1){if(skipped!=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=-1){if(skipped==0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(XML_BUF.length>rem?rem:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(XY_BUF.length>rem?rem:XY_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(X_BUF.length>rem?rem:X_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(x>0)?rem:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(XML_BUF.length>rem?x:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(x>0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(x>0)?rem:XML_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,skipped,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,skipped,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,rem,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,skipped,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SMALL_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(SKIP_BUF.length>rem?rem:SHORT_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:sKipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(XY_BUF.length>rem?x:XY_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(value>0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<value){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<value;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<value;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(skipCount>0)?skipCount:0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(skipCount>0)?skipped:0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(skipped,0,(int)(skipCount>0)?skipCount:0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(skipCount>0)?skipCount:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(x,0,(int)(skipCount>0)?skipCount:0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(skipped,0,(int)(skipCount>0)?skipCount:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(skipCount>0)?skipCount:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=-1){if(skipped>=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(XY_BUF.length>rem?x:XY_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(XML_BUF.length>rem?x:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(x>0)?skipped:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?rem:SHORT_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(x>0)?skipped:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(value>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(skipped>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(rem>SKIP_BUF.length?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(x>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(x>SKIP_BUF.length?rem:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(XML_BUF,0,(int)(XML_BUF.length>rem?x:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipped=read(x,0,(int)(x>0)?skipped:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(x>0)?skipped:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipCount;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(x>0)?skip:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<sink;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(x,0,(int)(skipCount>0)?skipCount:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(x,0,(int)(skipCount>0)?skipCount:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(skipCount>0)?skipped:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(XY_BUF.length>rem?rem:XY_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(x>0)?skipped:XML_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skippeCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(intcsize=0;csize<x;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<skip;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<size;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<skipped;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<max;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(intcsize=0;csize<x;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<skip;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<size;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<max;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<SHORT_BUF;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<skipped;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<value;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(intcsize=0;csize<sum;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+1;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x.length;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<rem;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skip+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<size;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0,len=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0,len=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0,len=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0);for(inti=0,len=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0,len=length();i<len;++i){skipd+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0,len=length();i<len;++i){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0,skipped=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipped;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skip;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<SHORT_BUF;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<size;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<sink;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=max;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557For(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<length;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=1;i<max;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skippeCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skipCount;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skipCount.length;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skipCount;++i){skipped+=this.skipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skipCount;++i){skipped+=1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(x,0,(int)(skipCount-x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(LONG_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(LONG_BUF.length>rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(LENGTH_BUF.length>rem?rem:LBH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(LENGTH_BUF.length>rem?rem:LFH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(LONG_BUF.length>rem?rem:WRONG_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(LONG_BUF.length>rem?rem:CKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(LONG_BUF.length>rem?rem:LBH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<len;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<SHORT_BUF;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<x){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=x){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=x){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>skipped){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>sink){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>skip){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=SHORT_BUF;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x.length;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=skipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=max){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=max){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=max){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+1;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<rem;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skip+=SHORT_BUF;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skip+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(rem,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,rem,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,rem+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x.length;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<rem;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;--i){skipped+=SHORT_BUF;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;--i){skipped+=skipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;--i>=x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;--i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(max,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<size;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(value,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){System.arraycopy(value,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(value,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(value,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(value,0,skipped,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(value,0,skipped,0,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(rem,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(data,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipd,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped==0){System.arraycopy(x,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){System.arraycopy(x,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<size){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;--i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;--i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=size;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skip;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipped;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipCount;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(x>0)?skip:0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,value-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(rem,0,skipped,0,x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,rem-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x*1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(rem,0,skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,skipped,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,skipped,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,skipd,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,skipped,1,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,csize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){System.arraycopy(x,0,skipped,0,size);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,size+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,size-1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(XML_BUF.length>rem?rem:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(x,0,(int)(LONG_BUF.length>rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(x,0,(int)(LONG_BUF.length>rem?rem:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(x,0,(int)(LONG_BUF.length>rem?rem:LFH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(x,0,(int)(LONG_BUF.length>rem?rem:XY_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(x,0,(int)(LONG_BUF.length-rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(x,0,(int)(LONG_BUF.length-rem?rem:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(x,0,(int)(LONG_BUF.length>rem?rem:LINE_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<sink;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<sink;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<sink.length;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<sink;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557After(x){for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557After(x){for(inti=0;i<skip;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557After(x){for(inti=0;i<skip;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557After(x){for(inti=0;i<skipCount;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=max){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=max){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,size-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,size+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skip;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skip;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x<0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x<0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x<0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x<0){for(inti=0;i<skipped;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x<0){for(inti=0;i<skipped.length;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x<0){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x<0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<len;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skip;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<size+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skip+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<x){for(inti=0;i<max;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<value){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<max){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<value;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip.length;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipLen;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(value,0,(int)(XML_BUF.length>rem?x:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(XML_BUF,0,(int)(XML_BUF.length>x)?x:XML_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(XML_BUF,0,(int)(XML_BUF.length>rem?XML_BUF.length:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(value,0,(int)(XML_BUF.length>x)?x:XML_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(XML_BUF,0,(int)(XML_BUF.length>value)?x:XML_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(value,0,(int)(x>0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<max){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<max){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<max){for(inti=0;i<skip;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<max){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<max){for(inti=0;i<sum;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,skipd,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,0,skipped+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(skipped>SHORT_BUF.length?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(rem>SHORT_BUF.length?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(value>SHORT_BUF.length?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(skipped>rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>skipped?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<sink;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skip;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(x>max)){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(value>max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(x>max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipped>0)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(rem>max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipped>x)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipped<max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<rem;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+1;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=-1){if(skipped>=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skip;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(x>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(SKIP_BUF.length>x?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(SKIP_BUF.length>value?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(SKIP_BUF.length>max?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(skipped>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(SKIP_BUF.length>x?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(SKIP_BUF.length>0?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skip;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<sink;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<=0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){System.arraycopy(x,0,skipped,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){System.arraycopy(x,0,skipped,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(x,0,skipped,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipd+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<len;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<x){for(inti=0;i<max;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<value){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<max){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(value>0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=max;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<rem;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557For(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=1;i<max;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x>0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x>0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x>0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x>0){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x>0){for(inti=0;i<skipped;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skip;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<SHORT_BUF;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skip;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=y+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<rem;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<sbuf.length+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<sh.length+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<s.length+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(rem>SKIP_BUF.length?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(value>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(rem>SKIP_BUF.length?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(skipped>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(SKIP_BUF.length>rem?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(CKIP_BUF,0,(int)(rem>SKIP_BUF.length?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=max){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=max){for(inti=0;i<skip;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=max){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<SHORT_BUF;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<SHORT_BUF;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(XH_BUF.length>rem?x:XH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(XH_BUF.length>rem?SHORT_BUF.length:XH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=SHORT_BUF;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=skipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x.length;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(value<0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(LONG_BUF.length>rem?rem:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(LONG_BUF.length>rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(LONG_BUF.length>rem?rem:LFH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(LONG_BUF.length>rem?rem:XY_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(LONG_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(LONG_BUF.length>rem?rem:LL_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(LONG_BUF.length>rem?rem:LBH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(max,0,(int)(SKIP_BUF.length>rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(max,0,(int)(SKIP_BUF.length>rem?rem:CKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<size){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skip;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(x>0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped==0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(value>0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped<=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(x<0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(value>rem?SKIP_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(SKIP_BUF.length>SKIP_BUF.length?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(rem<SKIP_BUF.length?SKIP_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(SKIP_BUF.length>SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,x,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,x,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skip;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(value>0){for(inti=0;i<x;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(rem>SKIP_BUF.length?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(value>rem?SKIP_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(rem>SKIP_BUF.length?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(rem,0,(int)(SKIP_BUF.length>SKIP_BUF.length?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(skipped>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(rem,0,(int)(SKIP_BUF.length>SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<length;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>max){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<size){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<size){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SMALL_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skip--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skip--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skip--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skip--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;++i){skip--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<size){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<size){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){System.arraycopy(x,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||skipd>0){System.arraycopy(x,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(value>0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipCount=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(SKIP_BUF.length-rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipCount=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintskipCount=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:CKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<x+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped+1;++i){skipped+=s;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<szipped+1;++i){skipped+=szipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<y+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(rem,0,(int)(LONG_BUF.length>rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(rem,0,(int)(LONG_BUF.length>rem?rem:LFH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(rem,0,(int)(LONG_BUF.length>rem?rem:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.codeBug();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(rem,0,(int)(LONG_BUF.length>rem?rem:XY_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(rem,0,(int)(LONG_BUF.length>rem?rem:LL_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintlen=read(rem,0,(int)(LONG_BUF.length>rem?rem:LBH_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||(skipped>=0&&x<skip)){System.arraycopy(x,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||(skipped>=0&&x<skip)){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skip;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x+2;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x+1;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x+1;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){System.arraycopy(x,0,skipped,0,skipped);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<size){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;++i){skipd+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<size){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>max){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>max){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<length;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0,size=size;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=size;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<x){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=x){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=x){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==x){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>skipped){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>sink){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){System.arraycopy(x,0,skipped,0,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=-1){if(skipped>=0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>=0){for(inti=0;i<chunks.length;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<skipped;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<=0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<size;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<=0){for(inti=0;i<size;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<size;++i){skipped+=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<=0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<size){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<size){for(inti=0;i<size;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=size;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(intcsize=0;csize<x;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(intcsize=0;csize<x;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<max;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<size;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(csize>0){for(intcsize=0;csize<x;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(csize>0){for(intcsize=0;csize<size;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(rem<=0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(rem<=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){System.arraycopy(value,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){System.arraycopy(value,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(value,0,skipped,0,size);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=size-1;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;--i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;--i+1){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<len;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<x+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+2;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>=0){for(inti=0;i<size;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<SHORT_BUF;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<KID_BUF;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557readFully(x,0,skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(x,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skippe+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skippe+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<SHORT_BUF;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipped<>max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(max>skipped)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipped<=max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<length;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<len;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<len;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;--i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipCount>max)){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skippeCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipCount>max)){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(len>0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,entryEncoding,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,skipped,0,x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<length;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(y>0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,x,0,skipped-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){System.arraycopy(x,0,skipped,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,x+1,skipped);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557FileUtils.copyFileInfo(x,0,skipped,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skippeCount;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){System.arraycopy(x,0,skipped,0,size);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<SHORT_BUF;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<y;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+2;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skippeCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skippeCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipCount=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipCount;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+2;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<SHORT_BUF;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skippeCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<length;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipped<=max)){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<max){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,x,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>skipped){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped==x){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(i>x){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<length;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inty=0;i<len;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<skippeCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<skipCount;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+2;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x+1,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(value>=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<y;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<y;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=x){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(value>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(value,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(value>SKIP_BUF?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<sink;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<length;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skip--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(intcsize=0;csize<x;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(intcsize=0;csize<x;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<max;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<size;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(csize>0){for(intcsize=0;csize<x;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(csize>0){for(intcsize=0;csize<size;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=size-1;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,x,0,skipped+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<size;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(value>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(value,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(value>rem?SKIP_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(value>SKIP_BUF?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<SHORT_BUF;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<len;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<value;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=size-1;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<len;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipSize;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipped;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<len;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;--i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<in.length;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipped,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(fileName,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=size-1;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<SHORT_BUF;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<SHORT_BUF;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<length;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=m;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(y<0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skip+=SHORT_BUF;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<length;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skip;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<SHORT_BUF;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,skipped,0,x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(i>0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(value>SKIP_BUF?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(value,0,(int)(SKIP_BUF.length>rem?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(value,0,(int)(rem>SKIP_BUF.length?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(SKIP_BUF.length>SKIP_BUF.length?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(value,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(value>SKIP_BUF?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(value,0,(int)(SKIP_BUF.length>rem?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(rem,0,(int)(SKIP_BUF.length>SKIP_BUF.length?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(value>SKIP_BUF.length?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(rem,0,(int)(SKIP_BUF.length>rem?SKIP_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skip;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0,len=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0,skipped=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0,len=length();i<len;++i){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0,length=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=size-1;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;i++){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Racks.arraycopy(x,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<max){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<max){for(inti=0;i<value;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<max){for(inti=0;i<len;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=size-1;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;--i){skipped+=SHORT_BUF;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<SHORT_BUF;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipped+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<rem;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(x>max)){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x;++i){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<value;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<value;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(value,0,(int)(SHORT_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<length;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<length;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SHORT_BUF,0,(int)(value>SHORT_BUF.length?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(value>SHORT_BUF.length?SHORT_BUF.length:SHORT_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(value,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(skipped,0,(int)(SKIP_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<SHORT_BUF;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipped.length;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<len;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(data,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<len;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<length;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped<0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<value;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(value>0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,2,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=size-1;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(SKIP_BUF.length>value?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(value>x?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(x>value?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(y>0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped!=0){for(inti=0;i<x;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<size;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<len;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){System.arraycopy(x,0,skipped,0,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<y;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<value;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<len;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped==0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skippeCount;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+2;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<value+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<y+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=size-1;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<len;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<len;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<Len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<sKipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<sKipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(rem,0,skipped,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(SKIP_BUF.length>rem?x:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>max){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>max){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipCount=read(skipCount,0,(int)(SKIP_BUF.length>rem?skipCount:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipCount=read(skipCount,0,(int)(SKIP_BUF.length>x?skipCount:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipCount>0)){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>value?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SKIP_BUF.length<rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<length){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<size){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(SKIP_BUF,0,(int)(x>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(SKIP_BUF.length>x?x:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(rem,0,(int)(SKIP_BUF.length>rem?SKIP_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(value>SKIP_BUF.length?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(intcsize=0;csize<x;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(intcsize=0;csize<x;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=x){for(inti=0;i<max;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skip;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skip;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=size-1;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skip;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,0,x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipd;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipd;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;--i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;--i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,skipped,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(ceil,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(z,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>rem){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<csize;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<chunkSize;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>rem){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<value;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,skipped,1,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipd;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipd;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1,skipped-1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,1,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x>0){System.arraycopy(x,0,skipped,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skip>0){System.arraycopy(x,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x<=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1,skipped++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1,skipd++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<max){for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x-2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skippeCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipCount=read(skip,0,(int)(SKIP_BUF.length>rem?skipCount:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipCount=read(skip,0,(int)(SKIP_BUF.length>x?skipCount:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<length;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>skip){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(SKIP_BUF.length>rem?x:x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<y;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<size;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipd;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipd;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<len;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipCount;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipCount;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipCount>0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipCount>0){for(inti=0;i<skipCount;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(skipped,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557While(skipped<=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1,--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+3;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=x){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=x){for(inti=0;i<max;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x+2;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<sink;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557||x<0){for(inti=0;i<sink;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<sink;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557While(skipped<0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<skippeCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(value,0,skipped,0,x+1,skipped);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skip;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skip;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skip;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557While(skipped<=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<length;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<value;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x+2;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x*;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<length){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<max){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped!=0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skippeCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skippeCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipCount=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<SHORT_BUF;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<SHORT_BUF;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<SHORT_BUF;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<SHORT_BUF;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(rem,0,(int)(SKIP_BUF.length>rem?0:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(rem,0,(int)(SKIP_BUF.length>rem?SKIP_BUF.length:0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=x){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>max){for(inti=0;i<x;++i){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<skipped;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<skipped;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(x>max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>x?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>max){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>max){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0,len=size();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;i++){skipped+=x;}
