bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
2	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
3	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
4	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
5	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
6	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  +  1,  value);	  System.arraycopy(x,    0,    skipped,    0,    x    +    2);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  +  1,  skipped);	  System.arraycopy(x,    0,    skipped,    0,    x    +    2);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  size);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  size);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  +  1,  size);	  System.arraycopy(x,    0,    skipped,    0,    x    +    2);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  *  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  *  2);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  *  2);	  System.arraycopy(x,    0,    skipped,    0,    x    +    2);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
11	[BUG]  [BUGGY]  read(x,  0,  skipped,  0,  rem);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  read(x,  0,  skipped,  0,  rem);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(x,  0,  skipped,  0,  rem);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
12	[BUG]  [BUGGY]  read(x,  0,  skipped,  0,  value);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  read(x,  0,  skipped,  0,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(x,  0,  skipped,  0,  value);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
13	[BUG]  [BUGGY]  readFully(x,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  readFully(x,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	readFully(x,  0,  skipped,  0,  x);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
14	[BUG]  [BUGGY]  read(x,  0,  rem,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  read(x,  0,  rem,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(x,  0,  rem,  0,  skipped);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
15	[BUG]  [BUGGY]  readFully(x,  0,  skipped,  0,  rem);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  readFully(x,  0,  skipped,  0,  rem);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	readFully(x,  0,  skipped,  0,  rem);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
16	[BUG]  [BUGGY]  read(rem,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  read(rem,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(rem,  0,  skipped,  0,  x);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
17	[BUG]  [BUGGY]  read(x,  0,  skipped,  0,  size);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  read(x,  0,  skipped,  0,  size);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(x,  0,  skipped,  0,  size);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
18	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  while(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
19	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  while(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
20	[BUG]  [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  while(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
21	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  while(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
22	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
23	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
24	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
25	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  x  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  skipped,  0,  x  +  1);	  System.arraycopy(zipEncoding,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  skipd,  0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipEncoding,  0,  skipd,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  skipd,  0,  x);	  System.arraycopy(zipEncoding,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipEncoding,  0,  x,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  x,  0,  skipped);	  System.arraycopy(zipEncoding,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  1,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  1,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  skipped,  1,  x);	  System.arraycopy(zipEncoding,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  value);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  skipped,  0,  value);	  System.arraycopy(zipEncoding,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
31	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
32	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
33	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
34	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
35	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  sh.length  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  sh.length  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  sh.length  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
36	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
37	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
38	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
39	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
40	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
41	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
42	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
43	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
44	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
45	[BUG]  [BUGGY]  if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
46	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
47	[BUG]  [BUGGY]  if(x  >=  -1)  {  if(skipped  >>  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  -1)  {  if(skipped  >>  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  -1)  {  if(skipped  >>  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
48	[BUG]  [BUGGY]  if(x  >=  -1)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  -1)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  -1)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
49	[BUG]  [BUGGY]  if(x  >=  -1)  {  if(skipped!=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  -1)  {  if(skipped!=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  -1)  {  if(skipped!=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
50	[BUG]  [BUGGY]  if(x  >=  -1)  {  if(skipped  ==  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  -1)  {  if(skipped  ==  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  -1)  {  if(skipped  ==  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
51	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(XML_BUF.length  >  rem?  rem  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(XML_BUF.length  >  rem?  rem  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(XML_BUF.length  >  rem?  rem  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
52	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(XY_BUF.length  >  rem?  rem  :  XY_BUF.length));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(XY_BUF.length  >  rem?  rem  :  XY_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(XY_BUF.length  >  rem?  rem  :  XY_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
53	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(X_BUF.length  >  rem?  rem  :  X_BUF.length));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(X_BUF.length  >  rem?  rem  :  X_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(X_BUF.length  >  rem?  rem  :  X_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
54	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
55	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
56	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  x;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  x;  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  x;	  if(x    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
57	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  XML_BUF.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  XML_BUF.length);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(x  >  0)?  rem  :  XML_BUF.length);	  if(x    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
58	[BUG]  [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  x  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(x,  0,  skipped,  0,  x  +  1);	  racks.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
59	[BUG]  [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  rem);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  rem);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(x,  0,  skipped,  0,  rem);	  racks.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
60	[BUG]  [BUGGY]  racks.arraycopy(x,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  racks.arraycopy(x,  0,  x,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(x,  0,  x,  0,  skipped);	  racks.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
61	[BUG]  [BUGGY]  racks.arraycopy(x,  0,  rem,  0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  racks.arraycopy(x,  0,  rem,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(x,  0,  rem,  0,  x);	  racks.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
62	[BUG]  [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  value);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(x,  0,  skipped,  0,  value);	  racks.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
63	[BUG]  [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  size);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  size);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(x,  0,  skipped,  0,  size);	  racks.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
64	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
65	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
66	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SMALL_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SMALL_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SMALL_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
67	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SHORT_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SHORT_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SHORT_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
68	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length);	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
69	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  sKipped);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  sKipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  sKipped);	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
70	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(XY_BUF.length  >  rem?  x  :  XY_BUF.length));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(XY_BUF.length  >  rem?  x  :  XY_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(XY_BUF.length  >  rem?  x  :  XY_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
71	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
72	[BUG]  [BUGGY]  while(value  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(value  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(value  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
73	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
74	[BUG]  [BUGGY]  while(skipped  <  value)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  value)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  value)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
77	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
78	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  0);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  0);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
79	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipped  :  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipped  :  0);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipped  :  0);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
80	[BUG]  [BUGGY]  final  int  skipCount  =  read(skipped,  0,  (int)(skipCount  >  0)?  skipCount  :  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(skipped,  0,  (int)(skipCount  >  0)?  skipCount  :  0);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(skipped,  0,  (int)(skipCount  >  0)?  skipCount  :  0);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
81	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  x;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  x;  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  x;	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
82	[BUG]  [BUGGY]  final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  0);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  0);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
83	[BUG]  [BUGGY]  final  int  skipCount  =  read(skipped,  0,  (int)(skipCount  >  0)?  skipCount  :  x);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(skipped,  0,  (int)(skipCount  >  0)?  skipCount  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(skipped,  0,  (int)(skipCount  >  0)?  skipCount  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
84	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  x);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipCount  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
85	[BUG]  [BUGGY]  if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
86	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
87	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
88	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
89	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
90	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
91	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XY_BUF.length  >  rem?  x  :  XY_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XY_BUF.length  >  rem?  x  :  XY_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(XY_BUF.length  >  rem?  x  :  XY_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
92	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
93	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  skipped  :  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  skipped  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(x  >  0)?  skipped  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
94	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SHORT_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SHORT_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SHORT_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
95	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  skipped  :  x;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  0)?  skipped  :  x;  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(x  >  0)?  skipped  :  x;	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
96	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(value  >  rem?  x  :  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(value  >  rem?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(value  >  rem?  x  :  x);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
97	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
98	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(skipped  >  rem?  x  :  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(skipped  >  rem?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(skipped  >  rem?  x  :  x);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
99	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(rem  >  SKIP_BUF.length?  x  :  x);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(rem  >  SKIP_BUF.length?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(rem  >  SKIP_BUF.length?  x  :  x);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
100	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(x  >  rem?  x  :  x);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(x  >  rem?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(x  >  rem?  x  :  x);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
101	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(x  >  SKIP_BUF.length?  rem  :  x);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(x  >  SKIP_BUF.length?  rem  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(x  >  SKIP_BUF.length?  rem  :  x);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
102	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
103	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
104	[BUG]  [BUGGY]  final  int  skipped  =  read(x,  0,  (int)(x  >  0)?  skipped  :  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipped  =  read(x,  0,  (int)(x  >  0)?  skipped  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipped  =  read(x,  0,  (int)(x  >  0)?  skipped  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
105	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skipped  :  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skipped  :  x;  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skipped  :  x;	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
106	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
107	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
108	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
109	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
110	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
111	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipCount;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
116	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skip  :  x;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skip  :  x;  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skip  :  x;	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
117	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
118	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
119	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
120	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
121	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  i++)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
122	[BUG]  [BUGGY]  final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
123	[BUG]  [BUGGY]  final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  x;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  x;  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(x,  0,  (int)(skipCount  >  0)?  skipCount  :  x;	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
124	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipped  :  x;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipped  :  x;  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(skipCount  >  0)?  skipped  :  x;	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
125	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XY_BUF.length  >  rem?  rem  :  XY_BUF.length));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XY_BUF.length  >  rem?  rem  :  XY_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(XY_BUF.length  >  rem?  rem  :  XY_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
126	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skipped  :  XML_BUF.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skipped  :  XML_BUF.length);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skipped  :  XML_BUF.length);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
129	[BUG]  [BUGGY]  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
130	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  skip;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  skip;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  skip;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
131	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
132	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  skipped;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  skipped;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  skipped;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
133	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
134	[BUG]  [BUGGY]  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
135	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  skip;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  skip;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  skip;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
136	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
137	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
138	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  SHORT_BUF;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  SHORT_BUF;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  SHORT_BUF;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
139	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  skipped;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  skipped;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  skipped;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
140	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  value;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  value;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  value;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
141	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  sum;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  csize  =  0;  csize  <  sum;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  csize  =  0;  csize  <  sum;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skip  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x.length;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x.length;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x.length;  ++i)  {  skip  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rem;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  rem;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  rem;  ++i)  {  skip  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  rem;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  size;  ++i)  {  skip  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
147	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
148	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
149	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
150	[BUG]  [BUGGY]  Context.checkState(skipped  >  0);  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0);  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0);  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
151	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipd  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipd  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipd  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
152	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
153	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  skipped  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  skipped  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0,  skipped  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
155	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
156	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length);	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
157	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
158	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skippe  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
159	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
160	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skippe  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
161	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
162	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skippe  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  max;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  max;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  max;  }	  for(int    i    =    0;    i    <    max;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
166	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  For(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	For(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  1;  i  <  max;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  1;  i  <  max;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
169	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
170	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
171	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
172	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount.length;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount.length;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount.length;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
173	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  this.skipped;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  this.skipped;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  this.skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
174	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  1;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  1;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
175	[BUG]  [BUGGY]  final  int  skipCount  =  read(x,  0,  (int)(skipCount  -  x));  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(x,  0,  (int)(skipCount  -  x));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(x,  0,  (int)(skipCount  -  x));	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
176	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
177	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
178	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LENGTH_BUF.length  >  rem?  rem  :  LBH_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LENGTH_BUF.length  >  rem?  rem  :  LBH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(LENGTH_BUF.length  >  rem?  rem  :  LBH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
179	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LENGTH_BUF.length  >  rem?  rem  :  LFH_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LENGTH_BUF.length  >  rem?  rem  :  LFH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(LENGTH_BUF.length  >  rem?  rem  :  LFH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
180	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  WRONG_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  WRONG_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  WRONG_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
181	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  CKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  CKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  CKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
182	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
183	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
184	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
185	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
186	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
187	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
188	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
189	[BUG]  [BUGGY]  while(skipped  <  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
190	[BUG]  [BUGGY]  while(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
191	[BUG]  [BUGGY]  while(skipped  <  =  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
192	[BUG]  [BUGGY]  while(x  >  skipped)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  skipped)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  skipped)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
193	[BUG]  [BUGGY]  while(x  >  sink)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  sink)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  sink)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
194	[BUG]  [BUGGY]  while(x  >  skip)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  skip)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  skip)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  SHORT_BUF;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  SHORT_BUF;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  SHORT_BUF;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x.length;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x.length;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x.length;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  skipped;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  skipped;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  skipped;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
201	[BUG]  [BUGGY]  while(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
202	[BUG]  [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
203	[BUG]  [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
204	[BUG]  [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  max)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  1;  i++)  {  skip  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rem;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  rem;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  rem;  i++)  {  skip  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  SHORT_BUF;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  SHORT_BUF;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  SHORT_BUF;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  rem;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(rem,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(rem,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(rem,  0,  skipped,  0,  x);	  System.arraycopy(x,    0,    skipped,    0,    rem);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
212	[BUG]  [BUGGY]  System.arraycopy(x,  0,  rem,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  rem,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  rem,  0,  skipped);	  System.arraycopy(x,    0,    skipped,    0,    rem);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
213	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  rem  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  rem  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  rem  +  1);	  System.arraycopy(x,    0,    skipped,    0,    rem);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
214	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  rem);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  rem);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  x,  0,  rem);	  System.arraycopy(x,    0,    skipped,    0,    rem);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x.length;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x.length;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x.length;  --i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rem;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  rem;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  rem;  --i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  SHORT_BUF;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  SHORT_BUF;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  SHORT_BUF;  }	  for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  skipped;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  skipped;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  skipped;  }	  for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  --i  >=  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  --i  >=  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  --i  >=  x;  --i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  rem;  }	  for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
222	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
223	[BUG]  [BUGGY]  final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
224	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
226	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
227	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
228	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
229	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
230	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
231	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
232	[BUG]  [BUGGY]  System.arraycopy(value,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(value,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(value,  0,  skipped,  0,  x);	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
233	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
234	[BUG]  [BUGGY]  racks.arraycopy(value,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  racks.arraycopy(value,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(value,  0,  skipped,  0,  x);	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
235	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipd,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipd,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(value,  0,  skipd,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
236	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x  +  1);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x  +  1);  }	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
237	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  value);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  value);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  value);  }	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
238	[BUG]  [BUGGY]  System.arraycopy(rem,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(rem,  0,  x,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(rem,  0,  x,  0,  skipped);	  System.arraycopy(x,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
239	[BUG]  [BUGGY]  System.arraycopy(csize,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(csize,  0,  x,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(csize,  0,  x,  0,  skipped);	  System.arraycopy(x,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(data,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(data,  0,  x,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(data,  0,  x,  0,  skipped);	  System.arraycopy(x,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
241	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipd,  0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipd,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipd,  0,  x);	  System.arraycopy(x,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
242	[BUG]  [BUGGY]  if(skipped  ==  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  ==  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  ==  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }	  if(skipped    ==    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
243	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }	  if(skipped    ==    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
244	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
245	[BUG]  [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
246	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
247	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipd  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
248	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
249	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
253	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skip  :  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skip  :  0);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  0)?  skip  :  0);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  value  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  value  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  value  -  1);	  System.arraycopy(x,    0,    skipped,    0,    x    -    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
255	[BUG]  [BUGGY]  System.arraycopy(rem,  0,  skipped,  0,  x  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(rem,  0,  skipped,  0,  x  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(rem,  0,  skipped,  0,  x  -  1);	  System.arraycopy(x,    0,    skipped,    0,    x    -    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
256	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  rem  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  rem  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  rem  -  1);	  System.arraycopy(x,    0,    skipped,    0,    x    -    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
257	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  *  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  *  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  *  1);	  System.arraycopy(x,    0,    skipped,    0,    x    -    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
258	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
259	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
260	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
261	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  x,  0,  value);	  System.arraycopy(x,    0,    skipped,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(rem,  0,  skipped,  0,  value);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(rem,  0,  skipped,  0,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(rem,  0,  skipped,  0,  value);	  System.arraycopy(x,    0,    skipped,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  x  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(csize,  0,  skipped,  0,  x  +  1);	  System.arraycopy(csize,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
265	[BUG]  [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  size);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  size);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(csize,  0,  skipped,  0,  size);	  System.arraycopy(csize,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(csize,  0,  skipd,  0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(csize,  0,  skipd,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(csize,  0,  skipd,  0,  x);	  System.arraycopy(csize,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(csize,  0,  skipped,  1,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(csize,  0,  skipped,  1,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(csize,  0,  skipped,  1,  x);	  System.arraycopy(csize,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
268	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  csize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  csize);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  csize);	  System.arraycopy(csize,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
269	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
270	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
271	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
272	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
273	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
274	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
275	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    size);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
276	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size  +  1);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size  +  1);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    size);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
277	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size  -  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size  -  1);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size  -  1);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    size);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
278	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XML_BUF.length  >  rem?  rem  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XML_BUF.length  >  rem?  rem  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(XML_BUF.length  >  rem?  rem  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
279	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(rem?  rem  :  SKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
280	[BUG]  [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
281	[BUG]  [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
282	[BUG]  [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
283	[BUG]  [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
284	[BUG]  [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  -  rem?  rem  :  ZERO_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  -  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  -  rem?  rem  :  ZERO_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
285	[BUG]  [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  -  rem?  rem  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  -  rem?  rem  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  -  rem?  rem  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
286	[BUG]  [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LINE_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LINE_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LINE_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
287	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
288	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
289	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
290	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
291	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  sink.length;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  sink.length;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  sink.length;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
292	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipd  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
293	[BUG]  [BUGGY]  After(x)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  After(x)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	After(x)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
294	[BUG]  [BUGGY]  After(x)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  After(x)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	After(x)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
295	[BUG]  [BUGGY]  After(x)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  After(x)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	After(x)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
296	[BUG]  [BUGGY]  After(x)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  After(x)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	After(x)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
297	[BUG]  [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
298	[BUG]  [BUGGY]  if(x  <  =  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
299	[BUG]  [BUGGY]  if(x  <  =  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
300	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  size  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  size  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  size  -  1);	  System.arraycopy(x,    0,    skipped,    0,    size);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
301	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  size);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  size);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  x,  0,  size);	  System.arraycopy(x,    0,    skipped,    0,    size);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
302	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  size  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  size  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  size  +  1);	  System.arraycopy(x,    0,    skipped,    0,    size);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
303	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
304	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
305	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
306	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
307	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
308	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
309	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
310	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
311	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  length;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
312	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
313	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
314	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
315	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  length;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
316	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
317	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
318	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
319	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipd  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
320	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipped.length;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipped.length;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  skipped.length;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
321	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
322	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
323	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
324	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
325	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
326	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
327	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
328	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
329	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
330	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
331	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  y;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
332	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
333	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
334	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
335	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
336	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
337	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
338	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
339	[BUG]  [BUGGY]  while(skipped  <  x)  {  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  x)  {  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  x)  {  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
340	[BUG]  [BUGGY]  while(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
341	[BUG]  [BUGGY]  while(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
342	[BUG]  [BUGGY]  while(skipped  <  value)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  value)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  value)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
343	[BUG]  [BUGGY]  while(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
344	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  value;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  value;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  value;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
345	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip.length;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip.length;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skip.length;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
346	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipLen;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipLen;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipLen;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
347	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(value,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(value,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
348	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
349	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  XML_BUF.length  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  XML_BUF.length  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  XML_BUF.length  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
350	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(value,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(value,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
351	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  value)?  x  :  XML_BUF.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  value)?  x  :  XML_BUF.length);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  value)?  x  :  XML_BUF.length);	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
352	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  (int)(x  >  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(value,  0,  (int)(x  >  0));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(value,  0,  (int)(x  >  0));	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
353	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
354	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
355	[BUG]  [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
356	[BUG]  [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
357	[BUG]  [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  max)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
358	[BUG]  [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
359	[BUG]  [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  sum;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  max)  {  for(int  i  =  0;  i  <  sum;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  max)  {  for(int  i  =  0;  i  <  sum;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
360	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  skipped,  0,  x);	  System.arraycopy(skipped,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
361	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  skipped);	  System.arraycopy(skipped,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
362	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  skipd,  0,  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  skipd,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  skipd,  0,  x);	  System.arraycopy(skipped,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
363	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  skipped  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  x,  0,  skipped  +  1);	  System.arraycopy(skipped,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
364	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
365	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
366	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
367	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
368	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
369	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  skipped?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  skipped?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  skipped?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
370	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
371	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
372	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
373	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
374	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
375	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
376	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
377	[BUG]  [BUGGY]  (int)(x  >  max))  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(x  >  max))  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(x  >  max))  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
378	[BUG]  [BUGGY]  (int)(value  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(value  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(value  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
379	[BUG]  [BUGGY]  (int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
380	[BUG]  [BUGGY]  (int)(skipped  >  0))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipped  >  0))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipped  >  0))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
381	[BUG]  [BUGGY]  (int)(rem  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(rem  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(rem  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
382	[BUG]  [BUGGY]  (int)(skipped  >  x))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipped  >  x))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipped  >  x))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
383	[BUG]  [BUGGY]  (int)(skipped  <  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipped  <  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipped  <  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
384	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  i;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
385	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  i;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
386	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
387	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
388	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
389	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
390	[BUG]  [BUGGY]  if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
391	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
392	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
393	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
394	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(x  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(x  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(x  >  rem?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
395	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
396	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  value?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  value?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  value?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
397	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  max?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  max?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  max?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
398	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
399	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  0  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
400	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  0?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  0?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  0?  0  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
401	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
402	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
403	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
404	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
405	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  i;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
406	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
407	[BUG]  [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
408	[BUG]  [BUGGY]  if(x  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
409	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
410	[BUG]  [BUGGY]  read(x,  0,  skipped,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  read(x,  0,  skipped,  0,  x  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(x,  0,  skipped,  0,  x  +  1);	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
411	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
412	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
413	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
414	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  value;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
415	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
416	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
417	[BUG]  [BUGGY]  while(skipped  <  x)  {  for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  x)  {  for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  x)  {  for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
418	[BUG]  [BUGGY]  while(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
419	[BUG]  [BUGGY]  while(skipped  <  value)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  value)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  value)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
420	[BUG]  [BUGGY]  while(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
421	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
422	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
423	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
424	[BUG]  [BUGGY]  while(value  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(value  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(value  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
425	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  max;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  max;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  max;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
426	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
427	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
428	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rem;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  rem;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  rem;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
429	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  For(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	For(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
430	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  max;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  1;  i  <  max;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  1;  i  <  max;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
431	[BUG]  [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
432	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
433	[BUG]  [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
434	[BUG]  [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
435	[BUG]  [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
436	[BUG]  [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
437	[BUG]  [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipd  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
438	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
439	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
440	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
441	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
442	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
443	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
444	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
445	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
446	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
447	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
448	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
449	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
450	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
451	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
452	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
453	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
454	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
455	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y  +  1;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y  +  1;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
456	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  y;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
457	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
458	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
459	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
460	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
461	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
462	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
463	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  sbuf.length  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  sbuf.length  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  sbuf.length  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
464	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  sh.length  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  sh.length  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  sh.length  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
465	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  s.length  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  s.length  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  s.length  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
466	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
467	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
468	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
469	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
470	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
471	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
472	[BUG]  [BUGGY]  final  int  x  =  read(CKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(CKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(CKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
473	[BUG]  [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
474	[BUG]  [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  max)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
475	[BUG]  [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
476	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
477	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
478	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XH_BUF.length  >  rem?  x  :  XH_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(XH_BUF.length  >  rem?  x  :  XH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(XH_BUF.length  >  rem?  x  :  XH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
479	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(XH_BUF.length  >  rem?  SHORT_BUF.length  :  XH_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(XH_BUF.length  >  rem?  SHORT_BUF.length  :  XH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(XH_BUF.length  >  rem?  SHORT_BUF.length  :  XH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
480	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
481	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
482	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  SHORT_BUF;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  SHORT_BUF;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  SHORT_BUF;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
483	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  skipped;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  skipped;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  skipped;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
484	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x.length;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x.length;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x.length;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
485	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
486	[BUG]  [BUGGY]  while(value  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(value  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(value  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
487	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
488	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
489	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
490	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
491	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
492	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LL_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LL_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LL_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
493	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
494	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
495	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
496	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
497	[BUG]  [BUGGY]  final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
498	[BUG]  [BUGGY]  final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  CKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  CKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(max,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  CKIP_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
499	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
500	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
501	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
502	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
503	[BUG]  [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
504	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
505	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
506	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
507	[BUG]  [BUGGY]  Context.checkState(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  Context.checkState(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
508	[BUG]  [BUGGY]  Context.checkState(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  Context.checkState(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
509	[BUG]  [BUGGY]  Context.checkState(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  Context.checkState(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
510	[BUG]  [BUGGY]  Context.checkState(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  Context.checkState(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
511	[BUG]  [BUGGY]  Context.checkState(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  Context.checkState(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
512	[BUG]  [BUGGY]  Context.checkState(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  Context.checkState(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
513	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
514	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
515	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  <  SKIP_BUF.length?  SKIP_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  <  SKIP_BUF.length?  SKIP_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  <  SKIP_BUF.length?  SKIP_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
516	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
517	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  1,  x  +  1);	  System.arraycopy(x,    0,    skipped,    1,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
518	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x,  rem);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x,  rem);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  1,  x,  rem);	  System.arraycopy(x,    0,    skipped,    1,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
519	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  value);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  1,  value);	  System.arraycopy(x,    0,    skipped,    1,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
520	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x,  value);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  1,  x,  value);	  System.arraycopy(x,    0,    skipped,    1,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
521	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  rem);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  rem);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  1,  rem);	  System.arraycopy(x,    0,    skipped,    1,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
522	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
523	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
524	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  value;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  value;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
525	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
526	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
527	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
528	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  value;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  value;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
529	[BUG]  [BUGGY]  while(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
530	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
531	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
532	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(rem  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
533	[BUG]  [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
534	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(skipped  >  rem?  rem  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
535	[BUG]  [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
536	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
537	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
538	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
539	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
540	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
541	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
542	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
543	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
544	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
545	[BUG]  [BUGGY]  while(skipped  ==  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
546	[BUG]  [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  while(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
547	[BUG]  [BUGGY]  while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
548	[BUG]  [BUGGY]  while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
549	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SMALL_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SMALL_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SMALL_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
550	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
551	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
552	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
553	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip--;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
554	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
555	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip--;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
556	[BUG]  [BUGGY]  while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
557	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
558	[BUG]  [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
559	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
560	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
561	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
562	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipd,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
563	[BUG]  [BUGGY]  ||  skipd  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  skipd  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  skipd  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipd,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
564	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
565	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
566	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
567	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
568	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
569	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
570	[BUG]  [BUGGY]  while(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(value  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
571	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
572	[BUG]  [BUGGY]  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
573	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
574	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  -  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  -  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  -  rem?  rem  :  SKIP_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
575	[BUG]  [BUGGY]  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
576	[BUG]  [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  CKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  CKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  CKIP_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
577	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
578	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
579	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
580	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
581	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  s;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  s;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped  +  1;  ++i)  {  skipped  +=  s;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
582	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  szipped  +  1;  ++i)  {  skipped  +=  szipped;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  szipped  +  1;  ++i)  {  skipped  +=  szipped;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  szipped  +  1;  ++i)  {  skipped  +=  szipped;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
583	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  y  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  y  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  y  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
584	[BUG]  [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  ZERO_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
585	[BUG]  [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LFH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
586	[BUG]  [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XML_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
587	[BUG]  [BUGGY]  Context.codeBug();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.codeBug();  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.codeBug();	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
588	[BUG]  [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  XY_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
589	[BUG]  [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LL_BUF.length));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LL_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LL_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
590	[BUG]  [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  len  =  read(rem,  0,  (int)(LONG_BUF.length  >  rem?  rem  :  LBH_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
591	[BUG]  [BUGGY]  ||(skipped  >=  0  &&  x  <  skip))  {  System.arraycopy(x,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||(skipped  >=  0  &&  x  <  skip))  {  System.arraycopy(x,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||(skipped  >=  0  &&  x  <  skip))  {  System.arraycopy(x,  0,  skipped,  0,  x);	  if(skipped    >=    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
592	[BUG]  [BUGGY]  ||(skipped  >=  0  &&  x  <  skip))  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||(skipped  >=  0  &&  x  <  skip))  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||(skipped  >=  0  &&  x  <  skip))  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  if(skipped    >=    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
593	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
594	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
595	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
596	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
597	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
598	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipd  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
599	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
600	[BUG]  [BUGGY]  if(x  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  if(skipped    <    =    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
601	[BUG]  [BUGGY]  if(x  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  skipped);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  skipped);  }	  if(skipped    <    =    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
602	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
603	[BUG]  [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
604	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
605	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  i;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
606	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
607	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
608	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
609	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
610	[BUG]  [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
611	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
612	[BUG]  [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
613	[BUG]  [BUGGY]  while(skipped  ==  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
614	[BUG]  [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  max)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
615	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
616	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
617	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
618	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
619	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
620	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
621	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
622	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipd  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
623	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  size  =  size;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  size  =  size;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0,  size  =  size;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
624	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
625	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
626	[BUG]  [BUGGY]  while(skipped  <  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
627	[BUG]  [BUGGY]  while(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
628	[BUG]  [BUGGY]  while(skipped  <  =  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
629	[BUG]  [BUGGY]  while(skipped  ==  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
630	[BUG]  [BUGGY]  while(x  >  skipped)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  skipped)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  skipped)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
631	[BUG]  [BUGGY]  while(x  >  sink)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  sink)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  sink)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
632	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
633	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    value);    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
634	[BUG]  [BUGGY]  if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  -1)  {  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
635	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
636	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
637	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
638	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
639	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  chunks.length;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  chunks.length;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  chunks.length;  --i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
640	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipd    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
641	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipd    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
642	[BUG]  [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipd    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
643	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipd    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
644	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipd    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
645	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipd  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipd    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
646	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
647	[BUG]  [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
648	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
649	[BUG]  [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
650	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
651	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
652	[BUG]  [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
653	[BUG]  [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
654	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
655	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
656	[BUG]  [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  size)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
657	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  size;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
658	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
659	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
660	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
661	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
662	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
663	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(csize  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(csize  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
664	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(csize  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(csize  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
665	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
666	[BUG]  [BUGGY]  if(rem  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(rem  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(rem  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
667	[BUG]  [BUGGY]  if(rem  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(rem  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(rem  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
668	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
669	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(value,  0,  skipd,  0,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(value,  0,  skipd,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  System.arraycopy(value,  0,  skipd,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
670	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  size);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  size);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  size);  }	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
671	[BUG]  [BUGGY]  if(skipped  <  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  if(skipped    <    =    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
672	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
673	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
674	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
675	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
676	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
677	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
678	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
679	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  --i  +  1)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  --i  +  1)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  --i  +  1)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
680	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
681	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
682	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
683	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
684	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
685	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
686	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
687	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
688	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
689	[BUG]  [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skippe  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
690	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
691	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
692	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  KID_BUF;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  KID_BUF;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  KID_BUF;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
693	[BUG]  [BUGGY]  readFully(x,  0,  skipped,  0,  value);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  readFully(x,  0,  skipped,  0,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	readFully(x,  0,  skipped,  0,  value);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
694	[BUG]  [BUGGY]  read(x,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  read(x,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(x,  0,  skipped,  0,  x);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
695	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
696	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
697	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
698	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
699	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  value;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
700	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
701	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
702	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
703	[BUG]  [BUGGY]  (int)(skipped  <  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipped  <  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipped  <  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
704	[BUG]  [BUGGY]  (int)(max  >  skipped))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(max  >  skipped))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(max  >  skipped))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
705	[BUG]  [BUGGY]  (int)(skipped  <  =  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipped  <  =  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipped  <  =  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  (int)(skipped    >    max))    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
706	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
707	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
708	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
709	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
710	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
711	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
712	[BUG]  [BUGGY]  (int)(skipCount  >  max))  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipCount  >  max))  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipCount  >  max))  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
713	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skippeCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skippeCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  skippeCount;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
714	[BUG]  [BUGGY]  (int)(skipCount  >  max))  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipCount  >  max))  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipCount  >  max))  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
715	[BUG]  [BUGGY]  while(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
716	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  entryEncoding,  0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipEncoding,  0,  entryEncoding,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  entryEncoding,  0,  x);	  System.arraycopy(zipEncoding,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
717	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  x  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  x  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  skipped,  0,  x  -  1);	  System.arraycopy(zipEncoding,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
718	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
719	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
720	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
721	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  size;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
722	[BUG]  [BUGGY]  while(y  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(y  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(y  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
723	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  1,  x  -  1);	  System.arraycopy(x,    0,    skipped,    0,    x    -    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
724	[BUG]  [BUGGY]  System.arraycopy(x,  0,  x,  0,  skipped  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  x,  0,  skipped  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  x,  0,  skipped  -  1);	  System.arraycopy(x,    0,    skipped,    0,    x    -    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
725	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
726	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  skipped);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  skipped);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  skipped);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
727	[BUG]  [BUGGY]  FileUtils.copyFileInfo(x,  0,  skipped,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  FileUtils.copyFileInfo(x,  0,  skipped,  0,  x  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	FileUtils.copyFileInfo(x,  0,  skipped,  0,  x  +  1);	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
728	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
729	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
730	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
731	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }	  if(skipped    >=    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
732	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
733	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
734	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
735	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
736	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
737	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
738	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
739	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
740	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
741	[BUG]  [BUGGY]  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipCount  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
742	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
743	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
744	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
745	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
746	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
747	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
748	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
749	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
750	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
751	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
752	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
753	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
754	[BUG]  [BUGGY]  (int)(skipped  <  =  max))  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipped  <  =  max))  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipped  <  =  max))  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
755	[BUG]  [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
756	[BUG]  [BUGGY]  System.arraycopy(x,  0,  x,  0,  rem);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  x,  0,  rem);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  x,  0,  rem);	  System.arraycopy(x,    0,    skipped,    0,    rem);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
757	[BUG]  [BUGGY]  while(x  >  skipped)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  skipped)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  skipped)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
758	[BUG]  [BUGGY]  while(skipped  ==  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  ==  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  ==  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
759	[BUG]  [BUGGY]  while(i  >  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(i  >  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(i  >  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
760	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
761	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  y  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  y  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  y  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
762	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  size);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  size);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  1,  size);	  System.arraycopy(x,    0,    skipped,    0,    size);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
763	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
764	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
765	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
766	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
767	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
768	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
769	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
770	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  +  1,  x);	  System.arraycopy(x,    0,    skipped,    0,    x    +    2);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
771	[BUG]  [BUGGY]  if(value  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(value  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(value  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
772	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
773	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
774	[BUG]  [BUGGY]  while(skipped!=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
775	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
776	[BUG]  [BUGGY]  int  skipped  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
777	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
778	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
779	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
780	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
781	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
782	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip--;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip--;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip--;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip--;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
783	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
784	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
785	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  max;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
786	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
787	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(csize  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(csize  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
788	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(csize  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(csize  >  0)  {  for(int  csize  =  0;  csize  <  size;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
789	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
790	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  value;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
791	[BUG]  [BUGGY]  System.arraycopy(x,  0,  x,  0,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  x,  0,  skipped  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  x,  0,  skipped  +  1);	  System.arraycopy(x,    0,    skipped,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
792	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
793	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
794	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
795	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
796	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(value  >  rem?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
797	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
798	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(value  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
799	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
800	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
801	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
802	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
803	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
804	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
805	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
806	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
807	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
808	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
809	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipSize;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipSize;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipSize;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
810	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipd  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
811	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
812	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  length;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
813	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
814	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  in.length;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  in.length;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  in.length;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
815	[BUG]  [BUGGY]  System.arraycopy(zipped,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipped,  0,  x,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipped,  0,  x,  0,  skipped);	  System.arraycopy(x,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
816	[BUG]  [BUGGY]  System.arraycopy(fileName,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(fileName,  0,  x,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(fileName,  0,  x,  0,  skipped);	  System.arraycopy(x,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
817	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
818	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
819	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
820	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  length;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
821	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  m;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  m;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  m;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
822	[BUG]  [BUGGY]  while(y  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(y  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(y  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
823	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  SHORT_BUF;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  SHORT_BUF;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  SHORT_BUF;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
824	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  length;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
825	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
826	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
827	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
828	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
829	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
830	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
831	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
832	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
833	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
834	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
835	[BUG]  [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  x  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  x  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(csize,  0,  skipped,  0,  x  -  1);	  System.arraycopy(csize,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
836	[BUG]  [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(i  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
837	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
838	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
839	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(value,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(value,  0,  (int)(rem  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
840	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
841	[BUG]  [BUGGY]  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
842	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF?  rem  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
843	[BUG]  [BUGGY]  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(value,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
844	[BUG]  [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  SKIP_BUF.length?  0  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
845	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
846	[BUG]  [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
847	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
848	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
849	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
850	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skippe  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
851	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
852	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0,  skipped  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0,  skipped  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0,  skipped  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
853	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
854	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  length  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0,  length  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0,  length  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
855	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
856	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
857	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
858	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
859	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
860	[BUG]  [BUGGY]  Racks.arraycopy(x,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Racks.arraycopy(x,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Racks.arraycopy(x,  0,  skipped,  0,  x);	  racks.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
861	[BUG]  [BUGGY]  if(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
862	[BUG]  [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
863	[BUG]  [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  max)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
864	[BUG]  [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
865	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
866	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  SHORT_BUF;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  SHORT_BUF;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  SHORT_BUF;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
867	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  SHORT_BUF;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
868	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipped  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipped  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  skipped  +  1;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
869	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
870	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
871	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
872	[BUG]  [BUGGY]  (int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
873	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
874	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
875	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
876	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
877	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
878	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
879	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
880	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipd  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
881	[BUG]  [BUGGY]  int  x  =  read(value,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(value,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(value,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
882	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
883	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
884	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
885	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
886	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
887	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
888	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
889	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SHORT_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SHORT_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SHORT_BUF.length?  SHORT_BUF.length  :  SHORT_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
890	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(value,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(value,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
891	[BUG]  [BUGGY]  final  int  x  =  read(skipped,  0,  (int)(SKIP_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(skipped,  0,  (int)(SKIP_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(skipped,  0,  (int)(SKIP_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
892	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
893	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipped.length;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipped.length;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  skipped.length;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
894	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
895	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
896	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
897	[BUG]  [BUGGY]  System.arraycopy(data,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(data,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(data,  0,  skipped,  0,  x);	  System.arraycopy(x,    0,    skipped,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
898	[BUG]  [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  value);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  value);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(csize,  0,  skipped,  0,  value);	  System.arraycopy(x,    0,    skipped,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
899	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
900	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
901	[BUG]  [BUGGY]  Context.checkState(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  Context.checkState(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  Context.checkState(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
902	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
903	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
904	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
905	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
906	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
907	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
908	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
909	[BUG]  [BUGGY]  if(value  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(value  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(value  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
910	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
911	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  2,  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  2,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  2,  x);	  System.arraycopy(x,    0,    skipped,    1,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
912	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
913	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
914	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  value?  x  :  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  value?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  value?  x  :  x);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
915	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(value  >  x?  x  :  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(value  >  x?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(value  >  x?  x  :  x);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
916	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(x  >  value?  x  :  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(x  >  value?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(x  >  value?  x  :  x);	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
917	[BUG]  [BUGGY]  while(y  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(y  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(y  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
918	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
919	[BUG]  [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped!=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
920	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skippe  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
921	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skippe  +=  x;  }	  if(skipped    >=    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
922	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
923	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    value);    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
924	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
925	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
926	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
927	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
928	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
929	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
930	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
931	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
932	[BUG]  [BUGGY]  if(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  ==  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
933	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
934	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
935	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
936	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  value  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
937	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  y  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  y  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  y  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
938	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
939	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
940	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
941	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
942	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
943	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
944	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
945	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
946	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
947	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
948	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
949	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipd  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
950	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipd  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
951	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
952	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
953	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  Len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  Len;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  Len;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
954	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
955	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    sKipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
956	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  x  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  x,  0,  x  +  1);	  System.arraycopy(x,    0,    skipped,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
957	[BUG]  [BUGGY]  System.arraycopy(rem,  0,  skipped,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(rem,  0,  skipped,  0,  x  +  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(rem,  0,  skipped,  0,  x  +  1);	  System.arraycopy(x,    0,    skipped,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
958	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  SKIP_BUF.length));	  final    int    x    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
959	[BUG]  [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
960	[BUG]  [BUGGY]  int  skipped  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
961	[BUG]  [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
962	[BUG]  [BUGGY]  int  skipCount  =  read(skipCount,  0,  (int)(SKIP_BUF.length  >  rem?  skipCount  :  x);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipCount  =  read(skipCount,  0,  (int)(SKIP_BUF.length  >  rem?  skipCount  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipCount  =  read(skipCount,  0,  (int)(SKIP_BUF.length  >  rem?  skipCount  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
963	[BUG]  [BUGGY]  int  skipCount  =  read(skipCount,  0,  (int)(SKIP_BUF.length  >  x?  skipCount  :  x);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipCount  =  read(skipCount,  0,  (int)(SKIP_BUF.length  >  x?  skipCount  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipCount  =  read(skipCount,  0,  (int)(SKIP_BUF.length  >  x?  skipCount  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
964	[BUG]  [BUGGY]  (int)(skipCount  >  0))  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  (int)(skipCount  >  0))  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipCount  >  0))  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipCount;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
965	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
966	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
967	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
968	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  value?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  value?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  value?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
969	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  <  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  <  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  <  rem?  SHORT_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SHORT_BUF.length    >    rem?    SHORT_BUF.length    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
970	[BUG]  [BUGGY]  while(skipped  <  length)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  length)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  length)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
971	[BUG]  [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
972	[BUG]  [BUGGY]  int  skipped  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  rem  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
973	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  x  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  x  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  x?  x  :  SKIP_BUF.length));	  int    skipped    =    read(rem,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
974	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
975	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(value  >  SKIP_BUF.length?  rem  :  SKIP_BUF.length));	  final    int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
976	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
977	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
978	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skip    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
979	[BUG]  [BUGGY]  if(skipped  <  =  x)  {  for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  x)  {  for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  x)  {  for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
980	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
981	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
982	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
983	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  size  -  1;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    size;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
984	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
985	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
986	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  x  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  x  -  1);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  x,  0,  x  -  1);	  System.arraycopy(x,    0,    skipped,    0,    x    -    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
987	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
988	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
989	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
990	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  --i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  --i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  --i  <  size;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
991	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipd  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    size;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
992	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  size);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  size);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  skipped,  0,  size);	  System.arraycopy(x,    0,    skipped,    0,    size);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
993	[BUG]  [BUGGY]  System.arraycopy(ceil,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(ceil,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(ceil,  0,  skipped,  0,  x);	  System.arraycopy(x,    0,    skipped,    0,    size);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
994	[BUG]  [BUGGY]  System.arraycopy(z,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(z,  0,  skipped,  0,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(z,  0,  skipped,  0,  x);	  System.arraycopy(x,    0,    skipped,    0,    size);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
995	[BUG]  [BUGGY]  while(skipped  >  rem)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  rem)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  rem)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
996	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  csize;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  csize;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  csize;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
997	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  chunkSize;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  chunkSize;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  chunkSize;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    max;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
998	[BUG]  [BUGGY]  while(skipped  >  rem)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  rem)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  rem)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
999	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
1000	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
1001	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
1002	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipd  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
1003	[BUG]  [BUGGY]  racks.arraycopy(x,  0,  skipped,  1,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  racks.arraycopy(x,  0,  skipped,  1,  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(x,  0,  skipped,  1,  x);	  racks.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1004	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1005	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1006	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1007	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
1008	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipped  -  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipped  -  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipped  -  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
1009	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  x,  1,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(skipped,  0,  x,  1,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  x,  1,  skipped);	  System.arraycopy(skipped,    0,    x,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
1010	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
1011	[BUG]  [BUGGY]  ||  x  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
1012	[BUG]  [BUGGY]  if(skip  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skip  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skip  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipd,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
1013	[BUG]  [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  while(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
1014	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    value;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1015	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipped++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipped++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipped++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1016	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipd++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipd++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  skipd++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1017	[BUG]  [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  max)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }	  if(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1018	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  -  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  -  2);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  -  2);	  System.arraycopy(x,    0,    skipped,    0,    x    +    2);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
1019	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1020	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skip;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1021	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    size;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
1022	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1023	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1024	[BUG]  [BUGGY]  int  skipCount  =  read(skip,  0,  (int)(SKIP_BUF.length  >  rem?  skipCount  :  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipCount  =  read(skip,  0,  (int)(SKIP_BUF.length  >  rem?  skipCount  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipCount  =  read(skip,  0,  (int)(SKIP_BUF.length  >  rem?  skipCount  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1025	[BUG]  [BUGGY]  int  skipCount  =  read(skip,  0,  (int)(SKIP_BUF.length  >  x?  skipCount  :  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipCount  =  read(skip,  0,  (int)(SKIP_BUF.length  >  x?  skipCount  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipCount  =  read(skip,  0,  (int)(SKIP_BUF.length  >  x?  skipCount  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1026	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1027	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1028	[BUG]  [BUGGY]  while(x  >  skip)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  skip)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  skip)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    >    x)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
1029	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));	  int    skipped    =    read(x,    0,    (int)(SKIP_BUF.length    >    rem?    x    :    x);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
1030	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1031	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1032	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1033	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  y;  ++i)  {  skipped  +=  y;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1034	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
1035	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipd  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    size;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
1036	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
1037	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipd;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
1038	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
1039	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
1040	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
1041	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
1042	[BUG]  [BUGGY]  if(skipCount  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipCount  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipCount  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
1043	[BUG]  [BUGGY]  if(skipCount  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipCount  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipCount  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
1044	[BUG]  [BUGGY]  read(skipped,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  read(skipped,  0,  x,  0,  skipped);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(skipped,  0,  x,  0,  skipped);	  read(x,    0,    skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1045	[BUG]  [BUGGY]  While(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  While(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	While(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1046	[BUG]  [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1047	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1,  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
1048	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  3;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  3;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  3;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
1049	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    value;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1050	[BUG]  [BUGGY]  if(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
1051	[BUG]  [BUGGY]  if(skipped  >=  x)  {  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  x)  {  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  x)  {  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
1052	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1053	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  2;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1054	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1055	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1056	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    sink;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1057	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skippe    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
1058	[BUG]  [BUGGY]  While(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  While(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	While(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1059	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x  +  1;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x  +  1;  }	  for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1060	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1061	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skippeCount;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipCount;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1062	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x  +  1,  skipped);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x  +  1,  skipped);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x  +  1,  skipped);  }	  if(skipped    >    0)    {    System.arraycopy(value,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1063	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1064	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1065	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skip  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1066	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1067	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skip;  i++)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
1068	[BUG]  [BUGGY]  While(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  While(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	While(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  while(skipped    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
1069	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  length;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  length;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  length;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
1070	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  value;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  value;  csize++)  {  skipped  +=  csize;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  value;  csize++)  {  skipped  +=  csize;  }	  if(skipped    >    0)    {    for(int    csize    =    0;    csize    <    x;    csize++)    {    skipped    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
1071	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  +  2;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
1072	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x  *;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  for(int  i  =  0;  i  <  x  *;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x  *;  i++)  {  skipped  +=  x;  }	  for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
1073	[BUG]  [BUGGY]  while(skipped  <  length)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  length)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  length)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1074	[BUG]  [BUGGY]  while(skipped  <  max)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  max)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  max)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  while(skipped    <    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1075	[BUG]  [BUGGY]  if(skipped!=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped!=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped!=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  if(skipped    ==    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1076	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1077	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1078	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skippeCount;  --i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1079	[BUG]  [BUGGY]  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipCount  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipCount;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1080	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
1081	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
1082	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  x;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
1083	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    SHORT_BUF;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
1084	[BUG]  [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  0  :  SKIP_BUF.length));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
1085	[BUG]  [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  0));  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  SKIP_BUF.length  :  0));	  int    x    =    read(SKIP_BUF,    0,    (int)(SKIP_BUF.length    >    rem?    rem    :    SKIP_BUF.length));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
1086	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x    +    1;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1087	[BUG]  [BUGGY]  if(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
1088	[BUG]  [BUGGY]  if(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  x;  }	  if(skipped    >=    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
1089	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1090	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1091	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1092	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    skipped;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1093	[BUG]  [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
1094	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
1095	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  x?  x  :  x);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  x?  x  :  x);  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  x?  x  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
1096	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    rem;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
1097	[BUG]  [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1098	[BUG]  [BUGGY]  if(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    skipped;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
1099	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0,  len  =  size();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0,  len  =  size();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0,  len  =  size();  i  <  len;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0,    len    =    length();    i    <    len;    ++i)    {    skipped    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
1100	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [BUGGY]      return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }	  while(skipped    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
