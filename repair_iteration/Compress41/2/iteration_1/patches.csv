bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	Context.checkState(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  +  1);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  rem);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  rem);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  rem);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  value);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  value);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  value);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  size);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  size);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  size);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(skipped,  0,  x,  0,  skipped);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(skipped,  0,  x,  0,  skipped);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(x,  0,  skipped,  1,  x);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  1,  x);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
27	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
30	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
31	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  sKipped;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
32	[BUG]  [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  while(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  max;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  read(x,  0,  skipped,  0,  skipped);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  read(x,  0,  skipped,  0,  skipped);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	read(x,  0,  skipped,  0,  skipped);	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  racks.arraycopy(x,  0,  skipped,  0,  x);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	racks.arraycopy(x,  0,  skipped,  0,  x);	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(x,  0,  skipd,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  value);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipCount;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
54	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
55	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skip;  ++i)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  while(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
66	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
67	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
68	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  skipCount;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  sink;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
79	[BUG]  [BUGGY]  if(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
80	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
82	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
83	[BUG]  [BUGGY]  if(skipped  ==  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  ==  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  ==  0)  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
84	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  x  +  1);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
85	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(x,  0,  skipped,  0,  size);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
87	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
88	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
89	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
90	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
91	[BUG]  [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
96	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
97	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  SHORT_BUF;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(x,  0,  x,  0,  skipped);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(x,  0,  x,  0,  skipped);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  x,  0,  skipped);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  -  1);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  -  1);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  2);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(x,  0,  skipped,  0,  x  +  2);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(x,  0,  skipped,  0,  x  +  2);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
101	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
104	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
105	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
106	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skipped  +=  csize;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
107	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  csize  =  0;  csize  <  x;  csize++)  {  skip  +=  csize;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
108	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
109	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
111	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
112	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skippe  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
113	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
114	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
115	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
116	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
117	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  value;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
118	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  value;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
119	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
120	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
122	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
123	[BUG]  [BUGGY]  while(skipped  >  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  x)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
124	[BUG]  [BUGGY]  (int)(skipped  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  (int)(skipped  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	(int)(skipped  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
125	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
126	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  i;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    i;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
127	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
129	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  y;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    y;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
130	[BUG]  [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	int  skipped  =  read(rem,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    rem;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
131	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
132	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
133	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip--;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
134	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  rem;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
135	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0,  len  =  length();  i  <  len;  ++i)  {  skipped  +=  length;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
136	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
137	[BUG]  [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(zipEncoding,  0,  skipped,  0,  x);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(zipEncoding,  0,  skipped,  0,  x);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
138	[BUG]  [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  System.arraycopy(csize,  0,  skipped,  0,  x);  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	System.arraycopy(csize,  0,  skipped,  0,  x);	  System.arraycopy(x,    0,    skipped,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
139	[BUG]  [BUGGY]  while(skipped  >  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  while(skipped  >  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	while(skipped  >  x)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x;  }	  if(skipped    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
141	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  --i)  {  skipped  +=  x;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
142	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  --i)  {  skipped  +=  length;  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    --i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
143	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  >  0)  {  System.arraycopy(value,  0,  skipped,  0,  x);  }	  if(skipped    >    0)    {    System.arraycopy(x,    0,    skipped,    0,    x);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
144	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  skipped  +=  x;    [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }  [BUGGY]    return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  x;  }	  if(skipped    <    =    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
