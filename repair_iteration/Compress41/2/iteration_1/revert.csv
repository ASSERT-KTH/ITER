projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557Context.checkState(skipped>0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(x,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(skipped,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,1,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<size;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<len;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skip+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skip+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;i++){skip+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<sKipped;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<max;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557read(x,0,skipped,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557racks.arraycopy(x,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipd,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipCount;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<value;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skip;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<max;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557finalintx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped<=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipped;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<skipCount;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x<=0){for(inti=0;i<sink;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=max){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped==0){System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(x,0,skipped,0,size);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<SHORT_BUF;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,x,0,skipped);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(x,0,skipped,0,x+2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<x;csize++){skipped+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(intcsize=0;csize<x;csize++){skip+=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<skipped;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;i++){skip+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;i++){skippe+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<rem;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<value;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>=0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<size;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(x>0){for(inti=0;i<len;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>x){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557(int)(skipped>max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(x,0,(int)(SKIP_BUF.length>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=i;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;++i){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557intskipped=read(rem,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skip--;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;++i){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0,len=length();i<len;++i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(zipEncoding,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557System.arraycopy(csize,0,skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557while(skipped>x){for(inti=0;i<x;++i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557for(inti=0;i<x;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x+1;--i){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){for(inti=0;i<x;--i){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped>0){System.arraycopy(value,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java557if(skipped<=0){for(inti=0;i<x+1;++i){skipped+=x;}
