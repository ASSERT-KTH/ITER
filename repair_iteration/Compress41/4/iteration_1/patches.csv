bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  current  =  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current  =  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current.hasDataDescriptor)  {  current  =  null;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  current  =  null;  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValue();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getValue();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getLastStoredEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastStoredEntry();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getDataDescriptor();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <?>  current  =  current.getDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  current.getDataDescriptor();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasOutstandingBytes();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasOutstandingBytes();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasOutstandingBytes();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getValue();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
15	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  current.hasDataDescriptor(lastStoredEntry.length))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current.hasDataDescriptor(lastStoredEntry.length))  {  readDataDescriptor();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(lastStoredEntry.length))  {  readDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    diff,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  lastStoredEntry  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    lastStoredEntry    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    lastStoredEntry    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    lastStoredEntry    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    lastStoredEntry    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    lastStoredEntry    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  inf.close();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  inf.close();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	inf.close();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  lastStoredEntry  =  current.readValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.readValue();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readValue();	  lastStoredEntry    =    current.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  lastStoredEntry  =  current.readCurrentEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.readCurrentEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readCurrentEntry();	  lastStoredEntry    =    current.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  lastStoredEntry  =  current.readShortDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.readShortDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readShortDataDescriptor();	  lastStoredEntry    =    current.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  lastStoredEntry  =  current.readValueDescriptor();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.readValueDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readValueDescriptor();	  lastStoredEntry    =    current.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  scanCurrentEntry(lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry);	  scanCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
32	[BUG]  [BUGGY]  scanCurrentEntry(current);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  scanCurrentEntry(current);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current);	  scanCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
33	[BUG]  [BUGGY]  flushCurrentEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  flushCurrentEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	flushCurrentEntry();	  scanCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  scanCurrentEntryData();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  scanCurrentEntryData();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryData();	  scanCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  scanCurrentEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  scanCurrentEntry(current.getDataDescriptor());  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getDataDescriptor());	  scanCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  scanCurrentEntry(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  scanCurrentEntry(current.dataDescriptor);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.dataDescriptor);	  scanCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
41	[BUG]  [BUGGY]  ReadDataDescriptor();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  ReadDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadDataDescriptor();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getDataDescriptor();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasDataDescriptor();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasDataDescriptor();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();	  lastStoredEntry    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getShortDataDescriptor();	  lastStoredEntry    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getLastChild();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastChild();	  lastStoredEntry    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getLastEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastEntry();	  lastStoredEntry    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDataDescriptor();  }	  readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  readFileDataDescriptor(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDataDescriptor(current.dataDescriptor);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.dataDescriptor);	  readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  readFileDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDataDescriptor(lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(lastStoredEntry);	  readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  readFileDataDescriptor(current);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDataDescriptor(current);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current);	  readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  else  {  inf.close();  }	  readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
53	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDescriptor();  }	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
54	[BUG]  [BUGGY]  readFileDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDescriptor(lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(lastStoredEntry);	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
55	[BUG]  [BUGGY]  readFileDescriptor(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDescriptor(current.dataDescriptor);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.dataDescriptor);	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
56	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor();  }  else  {  inf.close();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDescriptor();  }  else  {  inf.close();  }	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  readFileDescriptor(current);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDescriptor(current);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current);	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
58	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntry();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  getLastEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntry();	  lastStoredEntry    =    getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
59	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  null;	  lastStoredEntry    =    getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  lastStoredEntry  =  getValueDescriptor();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  getValueDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getValueDescriptor();	  lastStoredEntry    =    getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getCurrentEntry();	  lastStoredEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.hasDataDescriptor);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.hasDataDescriptor);	  lastStoredEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor());  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor());	  lastStoredEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  return;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor());  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor());	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  lastStoredEntry  =  getLastCurrentEntry();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  getLastCurrentEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastCurrentEntry();	  lastStoredEntry    =    getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
67	[BUG]  [BUGGY]  lastStoredEntry  =  getLastChildEntry();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  getLastChildEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastChildEntry();	  lastStoredEntry    =    getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntryDataDescriptor();	  lastStoredEntry    =    getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
69	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  readFileDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDataDescriptor();	  readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  readFileDataDescriptor(current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDataDescriptor(current.lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.lastStoredEntry);	  readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
71	[BUG]  [BUGGY]  readFileDataDescriptor(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDataDescriptor(lastStoredEntry.getValue());  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(lastStoredEntry.getValue());	  readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    lastStoredEntry    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
73	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasCentralDirectory();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasCentralDirectory();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasCentralDirectory();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(null);	  lastStoredEntry    =    current.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
75	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFully();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.readFully();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFully();	  lastStoredEntry    =    current.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getLastStoredEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getLastStoredEntry();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
77	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(lastStoredEntry);	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
78	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(lastStoredEntry);	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
79	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getValue();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getValue();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(lastStoredEntry);	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]  lastStoredEntry  =  getFirstEntry();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  getFirstEntry();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getFirstEntry();	  lastStoredEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
82	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry,  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  scanCurrentEntry(lastStoredEntry,  current.hasDataDescriptor);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry,  current.hasDataDescriptor);	  scanCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
83	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  scanCurrentEntry(lastStoredEntry.getValue());  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry.getValue());	  scanCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
84	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
85	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.getDataDescriptor();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
86	[BUG]  [BUGGY]  readFileDescriptor(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDescriptor(current.getDataDescriptor());  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getDataDescriptor());	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  readFileDescriptor(current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDescriptor(current.lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.lastStoredEntry);	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  readFileDescriptor(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  readFileDescriptor(lastStoredEntry.getValue());  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(lastStoredEntry.getValue());	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDescriptor();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.readFileDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDescriptor();	  readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  current  =  lastStoredEntry.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current  =  lastStoredEntry.getValue();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  lastStoredEntry.getValue();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    diff,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
91	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getValue()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getValue()  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    diff,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    diff,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
93	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.clone()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.clone()  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    diff,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
94	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.readDataDescriptor();	  lastStoredEntry    =    current.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry);	  lastStoredEntry    =    current.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
96	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    lastStoredEntry    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
97	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  null;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    lastStoredEntry    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
98	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream,    lastStoredEntry.length);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  null;	  lastStoredEntry    =    getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
100	[BUG]  [BUGGY]  current  =  lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current  =  lastStoredEntry.getDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  lastStoredEntry.getDataDescriptor();	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
101	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  diff);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  diff);  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  diff);	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
104	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
105	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
106	[BUG]  [BUGGY]  current  =  lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current  =  lastStoredEntry;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  lastStoredEntry;	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
107	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  while(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
108	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  while(current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  readDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  null;	  lastStoredEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
110	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  null;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  null;	  lastStoredEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
111	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.lastStoredEntry;  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry;	  lastStoredEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
112	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  break;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  break;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  current  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  current  =  current.getDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.getDataDescriptor();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
115	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {    [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor();  [BUGGY]    }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastDataDescriptor();	  lastStoredEntry    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
