bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readDataDescriptor();  }	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  lastStoredEntry  =  null;  }  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  lastStoredEntry  =  null;  }  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  lastStoredEntry  =  null;  }	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream,  diff,  lastStoredEntry.length);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream,  diff,  lastStoredEntry.length);  current  =  null;  }  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream,  diff,  lastStoredEntry.length);  current  =  null;  }	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  current  =  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  current  =  null;  }  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  current  =  null;  }	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream,  lastStoredEntry.length);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream,  lastStoredEntry.length);  current  =  null;  }  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream,  lastStoredEntry.length);  current  =  null;  }	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]    [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	  	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry();  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  lastStoredEntry  =  getCurrentEntry();  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry();	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  readFileDescriptor();  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  readFileDescriptor();  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor();	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor();  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor();  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor();	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  scanCurrentEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  scanCurrentEntry();  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry();	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  readFileDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  readFileDataDescriptor();  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor();	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  lastStoredEntry  =  getDataDescriptor();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {  [BUGGY]  lastStoredEntry  =  getDataDescriptor();  [BUGGY]  }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getDataDescriptor();	readDataDescriptor();  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
