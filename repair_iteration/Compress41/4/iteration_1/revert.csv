projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{lastStoredEntry=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream,diff,lastStoredEntry.length);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream,lastStoredEntry.length);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasOutstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(lastStoredEntry.length)){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644inf.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.bytesReadFromStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readShortDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644flushCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryData();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){if(current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.hasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getShortDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastChild();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasCentralDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFully();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntry.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntryHasZip64(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getFirstEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor?lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getValue(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastDataDescriptor();
