projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{lastStoredEntry=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream,diff,lastStoredEntry.length);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream,lastStoredEntry.length);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasOutstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(lastStoredEntry.length)){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644inf.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.bytesReadFromStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readShortDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644flushCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryData();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){if(current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){if(current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.hasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getShortDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastChild();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasCentralDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFully();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntry.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntryHasZip64(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getFirstEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor?lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getValue(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasCurrentEntry(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.read();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readInt();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadFileDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?readFileDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?readFileDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor(lastStoredEntry.getValue());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current,lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor(lastStoredEntry.getValue());}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDataDescriptor(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor(lastStoredEntry.getValue());}else{current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644inf.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644inf.flush();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(diff==0){if(lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<Object,Object>current=currentEntryHasOutstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=currentEntryHasOutstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasInstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry==null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getShortDataDescriptor();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getCurrentEntry();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getFirstStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntrylastStoredEntry=current.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntry=current.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastStoredEntry()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastChildEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor()?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getSize():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry?current.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.hasDataDescriptor?lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.clone()?lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryData(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644flushCurrentEntryData();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryData(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryData(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryData(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.dataDescriptor,lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry,current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.dataDescriptor,lastStoredEntryHasOutstandingBytes());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.dataDescriptor,current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current,current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntry().getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntry(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntry().getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntry(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.storedEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntry.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=current.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=current.getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=current.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=current.lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntryHasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntrylastStoredEntry=current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry&&hasUTF8Flag;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry?null:current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor&&lastStoredEntry!=null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor&&hasUTF8Flag){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor&&lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor&&current.lastStoredEntry!=null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor&&current.lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor&&hasUTF8Flag){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasValueDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor&&lastStoredEntry!=null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor()){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor&&lastStoredEntry!=null){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(!current.hasDataDescriptor){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDescriptor){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor&&lastStoredEntry==null){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor&&current.lastStoredEntry!=null){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.lastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.currentEntry.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntry.getFirstStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntry.getLastChildEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.getFirstStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readUTF8DataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFullyQuotedDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readIntDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readUnicodeDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readCurrentEntryData();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){if(lastStoredEntry!=null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){lastStoredEntry=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getValueDescriptor(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getValueDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getValueDescriptor(),current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<Object>current=currentEntryHasOutstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.dataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(current.dataDescriptor)){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(lastStoredEntry.getValue())){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(current.length)){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(current.lastStoredEntry.length)){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(current.getValue())){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(lastStoredEntry.getKey())){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644reader.readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644Readerreader=current.readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newCurrentEntry(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newCurrentEntry(lastStoredEntry.getValue(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor()?getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getFullDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getValueDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getDataDescriptor():this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getDataDescriptor():DELETE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.lastStoredEntry,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current,current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.lastStoredEntry,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.lastStoredEntry,hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor()?null:current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntry=current.hasDataDescriptor()?null:current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.getShortValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.getLastChild();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry==null){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry!=null){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry==null){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getShortDataDescriptor();if(lastStoredEntry!=null){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getDataDescriptor(),lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getDataDescriptor(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getLastStoredEntry());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getValueDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getShortDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644Preconditions.checkState(current.hasDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CheckState(current.hasDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadDataDescriptor(current.getEntryHasOutstandingBytes());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CheckState(current.hasDataDescriptor(),hasUTF8Flag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadDataDescriptor(lastStoredEntry,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.hasValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor(lastStoredEntry);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current,lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDataDescriptor(lastStoredEntry);}else{current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastEntryDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryDataDescriptor(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryDataDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryDataDescriptor(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getFirstEntryDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current.storedEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag&&lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag||lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag&lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag?lastStoredEntry.getDataDescriptor():DELETED;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=currentEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=this.lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=lastStoredEntry.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFrom
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.currentEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValue()-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getDataDescriptor():this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getDataDescriptor():DELETED;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValueDescriptor()&&hasUTF8Flag;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getFirstChild();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntrylastStoredEntry=current.getLastChild();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastChild()-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastChild()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.dataDescriptor,lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(lastStoredEntry,current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(lastStoredEntry.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.dataDescriptor,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.dataDescriptor,current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor?lastStoredEntry.getKey():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry?current.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry==null){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getKey();if(lastStoredEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null||current.hasDataDescriptor){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntrylastStoredEntry=current.getValue();if(lastStoredEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry==null){break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry!=null){break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getShortDataDescriptor();if(lastStoredEntry!=null){break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.getValue()?current.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields()?lastStoredEntry.getKey():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields()?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.getValue()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getValue()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.lastStoredEntry,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.lastStoredEntry,hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.lastStoredEntry,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current,current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current,lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644browseCurrentEntry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryData(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanZip64Entry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644validateEntry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644flushCurrentEntry(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644flushCurrentEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.currentEntryHasUnicodeExtraFields();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.nextEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getFirstEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.currentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getFirstCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastCurrentEntry(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastCurrentEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastCurrentEntry().getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current,lastStoredEntry.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getValue(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getDataDescriptor(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current,lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=currentEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getCurrentEntry()?getCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor()?getCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntry():this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntryName():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntry():DELETE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.nextDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getValue(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=null;current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.dataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue()-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.currentEntryHasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(current.getValue(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntrycurrent=newZipArchiveEntry(current.getValue(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(diff.getValue(),lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(this.lastStoredEntry.getValue(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getValue(),current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getKey(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream-diff;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream||current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream-2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream+diff;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getDataDescriptor(),hasUTF8Flag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getDataDescriptor(),current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getDataDescriptor(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getDataDescriptor(),this);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getDataDescriptor(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getDataDescriptor(),inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getCurrentEntry():this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(null,null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(null,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.bytesReadFromStream(diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor()?null:current.bytesReadFromStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntry=current.hasDataDescriptor()?null:current.bytesReadFromStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.bytesReadFromStream(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.bytesReadFromStream(0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getEntryDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry,current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=lastStoredEntry;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=this;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=nextEntry;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=newCurrentEntry();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDescriptor){current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getFirstDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastDataDescriptor()-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastDataDescriptor()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntry=current.getLastDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.dataDescriptor,lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(lastStoredEntry,current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(lastStoredEntry.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.dataDescriptor,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.dataDescriptor,current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry==null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getShortDataDescriptor();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getKey():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.storedEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.dataDescriptor.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry==null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getKey();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null||current.hasDataDescriptor){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntry=current.getValue();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor()?lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue()?lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.currentDataDescriptor()?lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?this.lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry()?lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644reader.readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readDataDescriptor(current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor(lastStoredEntry.getValue());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor(lastStoredEntry.getValue());}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor(lastStoredEntry.getValue());}else{current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current,lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor(lastStoredEntry.getValue());}else{inf.reset();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor&&hasUTF8Flag;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor||hasUTF8Flag;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasValueDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getValue():current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644Inflaterinf=lastStoredEntry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasCurrentDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasFullDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntrylastStoredEntry=current.getLastEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastEntry()-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastEntry()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntry=current.getLastEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getKey():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getValue():this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getName():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry==null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry==null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getShortDataDescriptor();if(lastStoredEntry!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getDataDescriptor(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getDataDescriptor(),lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(lastStoredEntry.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getDataDescriptor(),inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getDataDescriptor(),this);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getDataDescriptor(),current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor(lastStoredEntry);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current,lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){readFileDescriptor(lastStoredEntry);}else{current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=hasDataDescriptor?readFileDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDataDescriptor(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDataDescriptor(current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=ze.readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDataDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getRawDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntryHasDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntryHasZip64(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntryHasZip64(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntryHasZip64(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.currentEntryHasZip64(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.entryHasZip64(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getKeyDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor(null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor(0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntry().getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntry(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntry(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getFirstChildEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntry().cloneTree();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.currentEntryHasOutstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.currentEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getShortValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getSize():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getDataDescriptor():this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry==null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null||current.hasDataDescriptor){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();if(lastStoredEntry!=null){buf.setLength(1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getKey();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValue();buf.setLength(0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.currentEntryHasUnicodeExtraFields();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(),lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getShortDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastChronology();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor(),current.size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor(),current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor(),current.type);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.readValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.readShortDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.readFileDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.dataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readFileDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?readFileDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream.readFully();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.readFully();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFully()&&hasUTF8Flag;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(lastStoredEntry,current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDataDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getCurrentEntry();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.valueEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadFileDataDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.getValue(),lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(current.getDataDescriptor())){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(lastStoredEntry.getLength())){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getLastChild());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=this.lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=firstEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=nextEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getCurrentDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryData(lastStoredEntry,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getLastCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getDataDescriptor():newByteArrayInputStream(current.bytesReadFromStream):null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(lastStoredEntry,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64(entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current.entryHasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.hasDataDescriptor()?lastStoredEntry.getValue():currentEntryHasOutstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.hasDataDescriptor()?lastStoredEntry.getDataDescriptor():currentEntryHasOutstandingBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDescriptor(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(lastStoredEntry,hasUTF8Flag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(current,hasUTF8Flag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getDataDescriptor(),lastStoredEntryHasOutstandingBytes());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry,current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readCurrentEntryDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor&&lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor(false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor(null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor(entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastShortDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.allowStoredEntriesWithDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.allowStoredEntriesWithDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getCurrentEntry();if(lastStoredEntry!=null){break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(lastStoredEntry,current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current,fileNameLen);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntrylastStoredEntry=current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getCurrentEntry();if(lastStoredEntry!=null){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){buf.setLength(1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.lastStoredEntry?lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry?lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.allowStoredEntriesWithDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor||lastStoredEntry!=null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor||lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.closeEntry()){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getLastChild():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getValue():newByteArrayInputStream(current.bytesReadFromStream):null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastDataDescriptor(null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastDataDescriptor(lastStored);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getLastCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getLastChild():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newByteArrayInputStream(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newByteArrayInputStream(current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newByteArrayInputStream(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.dataDescriptor,lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntrylastStoredEntry=current.getValue();if(lastStoredEntry!=null){buf.setLength(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFrom
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}elseSystem.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.firstEntry.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()&&hasUTF8Flag;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.lastStoredEntry?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor){readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor){readCurrentEntry();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry.getValue(),current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getLastEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntryHasZip64():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntryHasFollowCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntryHasShortBytes():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644flushCurrentEntry(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644removeCurrentEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644removeLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getValueDescriptor(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getValueDescriptor()&&current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=ze.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor(),hasUTF8Flag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanSurrogateEntry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanZipEntry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCentralEntry(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.allowStoredEntriesWithDataDescriptor){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(lastStoredEntry.hasDataDescriptor){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(lastStoredEntry.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644inthasDataDescriptor=current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getShortValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getDataDescriptor():newByteArrayInputStream(current.bytesReadFromStream):null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=entryEncoding.getFirstEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=ze.getFirstEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry.hasDataDescriptor=hasUTF8Flag?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag?lastStoredEntry.getDataDescriptor():this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag?lastStoredEntry.getDataDescriptor():DELETE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=lastStoredEntry.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=hasUTF8Flag?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getLastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.getCurrentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644inf.write('n');
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644inf.closeEntry(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntrylastStoredEntry=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getCurrentEntry();if(lastStoredEntry!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.lastStoredEntry.hasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.currentEntryHasUnicodeExtraFields();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntryHasZip64(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=currentEntryHasZip64(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.getValue()?lastStoredEntry.getKey():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getShortCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getLastEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getCurrentEntryHasShortBytes():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.nextEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream()?null:current.hasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValueDescriptor(null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValueDescriptor(false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadFileDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getValue(),lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=hasUTF8Flag?readFileDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=hasUTF8Flag?readFileDataDescriptor():current;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getLastStoredEntry());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getCurrentDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=lastStoredEntry.currentEntryHasCentralDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasLocalFile();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasShortCurrentDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntryWithDataDescriptor(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDataDescriptor(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.lastStoredEntry,ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDataDescriptor(current.lastStoredEntry,hasUTF8Flag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry.getCurrentDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDescriptor(current.lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.lastStoredEntry,ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getDataDescriptor();if(lastStoredEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(null,hasUTF8Flag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(null,ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}elseSystem.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFrom
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntry().getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields()&&lastStoredEntry.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields()&&lastStoredEntry.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readFileDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryCurrentEntryDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryDataDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readUnicodeExtraFields();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFullyDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFullyDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readUTF();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.hasDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.entry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.parentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.valueEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntrylastStoredEntry=newZipArchiveEntry(current.getValue(),diff);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getValue(),dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getValue(),this.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(lastStoredEntry,current.hasDataDescriptor,hasUTF8Flag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=newBigInteger(current.bytesReadFromStream);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=newBigInteger(lastStoredEntry.getValue());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntrylastStoredEntry=current.getValue();if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?current.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?this:current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getDataDescriptor(),lastStoredEntry.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.hasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getCurrentEntryHasSize():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.currentEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.currentEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.dataDescriptor,firstStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.lastStoredEntry.readValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readValueDescriptor(lastStored);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,2,current.bytesReadFromStream);current=null;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.hasDataDescriptor?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.hasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=current.hasDataDescriptor?lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=this.lastStoredEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntrycurrent=current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?this:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?current.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getLastChild():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastSecondStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getLastSerialEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newBigDecimalEntry(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getDataDescriptor(),current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getSimpleDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry!=null){buf.setLength(1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor||!current.allowStoredEntriesWithDataDescriptor;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor(lastStored);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDataDescriptor(current.dataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readFileDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readFileDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=null;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,1,current.bytesReadFromStream);current=null;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=entryEncoding.getValueDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getValue(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=newZipArchiveEntry(lastStoredEntry.getValue(),this.entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getLastChild():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?getShortCurrentEntry():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(current,hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(lastStoredEntry,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(lastStoredEntry,ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.next();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getCurrentEntry():newZipArchiveEntry(current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<?>current=current.getDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?firstEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?lastStoredEntry:newByteArrayInputStream(current.bytesReadFromStream));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.next()?lastStoredEntry:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current.getValue(),lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields(current.fileDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry.hasDataDescriptor=hasUTF8Flag?lastStoredEntry.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor=hasUTF8Flag?lastStoredEntry.getDataDescriptor():DEFAULT_SYNTHETIC;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?null:current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor()?null:current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readBigInteger();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){current=newZipArchiveEntry(lastStoredEntry);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.hasDataDescriptor?getFullDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readFileDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644writeFileDescriptor(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor(lastStoredEntry.getName())){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor){if(lastStoredEntry==null){readDataDescriptor();}else{System.arraycopy(current.bytesReadFromStream,0,current.bytesReadFromStream);current=
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=inf.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){current=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){current.hasDataDescriptor){readDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current,current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getKey(),current.hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.currentEntryHasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.hasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.entryHasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastChildEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=entryEncoding.getLastChildEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.getDataDescriptor(),fileNameLen);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasZip64Fields();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.entry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastEntryDataDescriptor(current.getSize());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.current.hasDataDescriptor()?null:current.bytesReadFromStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644readFileDescriptor(current.fileNameLen);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.currentEntryHasDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.hasDataDescriptor()?current.getDataDescriptor():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.lastStoredEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=readFileDataDescriptor(lastStoredEntry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getCurrentEntry(current.getDataDescriptor(),this);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.valueEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644||current.hasDataDescriptor){readFileDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor||hasUTF8Flag){readFileDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>lastStoredEntry=current.hasDataDescriptor?lastStoredEntry.getValue():current.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasUnicodeExtraFields()?lastStoredEntry.getName():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.getValue()?lastStoredEntry.getValue():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.entryHasDataDescriptor?lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.currentEntryHasDataDescriptor?lastStoredEntry.clone():null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=getLastCurrentEntry(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readFileDescriptor(current.getDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.bytesReadFromStream;if(lastStoredEntry!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor||lastStoredEntry==null){readDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.currentEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=current.entry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current=readFileDataDescriptor(lastStoredEntry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=hasDataDescriptor?readFileDataDescriptor():current;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=readCurrentEntryDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readCurrentEntry();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntryHasDataDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.getValueDescriptor();if(lastStoredEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644||current.hasDataDescriptor){readFileDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644if(current.hasDataDescriptor||lastStoredEntry==null){readFileDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=current.readDataDescriptor(null,csize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=newZipArchiveEntry(current.getSize());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644ReadDataDescriptor(lastStoredEntry,current.hasDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CheckState(current.hasDataDescriptor()||current.hasDataDescriptor());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644scanCurrentEntry(current,entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readCurrentEntryData();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){readCurrentEntry();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor()){readCurrentEntryDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644current.hasDataDescriptor){handleUnicodeExtraFields();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readFileDataDescriptor();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644while(current.hasDataDescriptor){readFileDataDescriptor();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntry<K,V>current=currentEntry.getSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644LastStoredEntry=current.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=entryEncoding.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644lastStoredEntry=entry.lastStoredEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java644CurrentEntrycurrent=current.getDataDescriptor();
