bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor(lastStoredEntry);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
2	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
3	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.dataDescriptor);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
4	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.getDataDescriptor());	  CurrentEntry    <    K,    V>    current    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
5	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentEntry(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentEntry(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentEntry(lastStoredEntry);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
6	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.hasDataDescriptor);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
7	[BUG]  [BUGGY]  lastStoredEntry  =  current.read();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.read();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.read();	  lastStoredEntry    =    current.readFully();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
8	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream();	  lastStoredEntry    =    current.readFully();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
9	[BUG]  [BUGGY]  lastStoredEntry  =  current.readInt();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readInt();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readInt();	  lastStoredEntry    =    current.readFully();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
10	[BUG]  [BUGGY]  ReadFileDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadFileDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadFileDescriptor();	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
11	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  readFileDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  readFileDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  readFileDescriptor()  :  null;	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
12	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  readFileDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  readFileDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  readFileDescriptor()  :  null;	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
13	[BUG]  [BUGGY]  readFileDataDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.getValue());	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
14	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
15	[BUG]  [BUGGY]  readFileDataDescriptor(current,  lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current,  lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current,  lastStoredEntry.getValue());	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
16	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }  else  {  inf.close();  }	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
17	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDataDescriptor(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDataDescriptor(lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDataDescriptor(lastStoredEntry.getValue());	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
18	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }  else  {  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }  else  {  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry.getValue());  }  else  {  current  =  null;  }	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
19	[BUG]  [BUGGY]  inf.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  inf.closeEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	inf.closeEntry();	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
20	[BUG]  [BUGGY]  inf.flush();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  inf.flush();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	inf.flush();	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
21	[BUG]  [BUGGY]  lastStoredEntry.close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry.close();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry.close();	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
22	[BUG]  [BUGGY]  if(diff  ==  0)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(diff  ==  0)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(diff  ==  0)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
23	[BUG]  [BUGGY]  CurrentEntry  <  Object,  Object>  current  =  currentEntryHasOutstandingBytes();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  Object,  Object>  current  =  currentEntryHasOutstandingBytes();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  Object,  Object>  current  =  currentEntryHasOutstandingBytes();	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
24	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  currentEntryHasOutstandingBytes();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  currentEntryHasOutstandingBytes();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  currentEntryHasOutstandingBytes();	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
25	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasInstandingBytes();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasInstandingBytes();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasInstandingBytes();	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
26	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
27	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  buf.setLength(0);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  buf.setLength(0);  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
28	[BUG]  [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
29	[BUG]  [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
30	[BUG]  [BUGGY]  lastStoredEntry  =  current.getFirstStoredEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getFirstStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getFirstStoredEntry();	  lastStoredEntry    =    current.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  lastStoredEntry  =  current.getLastStoredEntry();	  lastStoredEntry    =    current.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  LastStoredEntry  =  current.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  =  current.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  =  current.getLastStoredEntry();	  lastStoredEntry    =    current.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastStoredEntry()  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastStoredEntry()  +  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastStoredEntry()  +  1;	  lastStoredEntry    =    current.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastChildEntry();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastChildEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastChildEntry();	  lastStoredEntry    =    current.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
36	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getSize()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getSize()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getSize()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
37	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
38	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  current.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  current.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  current.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
39	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor?  lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor?  lastStoredEntry.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor?  lastStoredEntry.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
40	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.clone()?  lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.clone()?  lastStoredEntry.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.clone()?  lastStoredEntry.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
41	[BUG]  [BUGGY]  scanCurrentEntryData(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryData(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryData(lastStoredEntry);	  scanCurrentEntryData();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
42	[BUG]  [BUGGY]  flushCurrentEntryData();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  flushCurrentEntryData();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	flushCurrentEntryData();	  scanCurrentEntryData();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
43	[BUG]  [BUGGY]  scanCurrentEntryData(current);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryData(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryData(current);	  scanCurrentEntryData();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
44	[BUG]  [BUGGY]  scanCurrentEntryData(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryData(current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryData(current.dataDescriptor);	  scanCurrentEntryData();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
45	[BUG]  [BUGGY]  scanCurrentEntryDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryDataDescriptor();	  scanCurrentEntryData();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
46	[BUG]  [BUGGY]  scanCurrentEntryData(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryData(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryData(current.hasDataDescriptor);	  scanCurrentEntryData();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
47	[BUG]  [BUGGY]  scanCurrentEntry(current.dataDescriptor,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.dataDescriptor,  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.dataDescriptor,  lastStoredEntry);	  scanCurrentEntry(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
48	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(lastStoredEntry.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry.dataDescriptor);	  scanCurrentEntry(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
49	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry,  current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(lastStoredEntry,  current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry,  current.dataDescriptor);	  scanCurrentEntry(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
50	[BUG]  [BUGGY]  scanCurrentEntry(current.dataDescriptor,  lastStoredEntryHasOutstandingBytes());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.dataDescriptor,  lastStoredEntryHasOutstandingBytes());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.dataDescriptor,  lastStoredEntryHasOutstandingBytes());	  scanCurrentEntry(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
51	[BUG]  [BUGGY]  scanCurrentEntry(current.dataDescriptor,  current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.dataDescriptor,  current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.dataDescriptor,  current.lastStoredEntry);	  scanCurrentEntry(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
52	[BUG]  [BUGGY]  scanCurrentEntry(current,  current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current,  current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current,  current.dataDescriptor);	  scanCurrentEntry(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
53	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntry().getValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntry().getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntry().getValue();	  lastStoredEntry    =    getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
54	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntry(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntry(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntry(current.hasDataDescriptor);	  lastStoredEntry    =    getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
55	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntry().getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntry().getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntry().getDataDescriptor();	  lastStoredEntry    =    getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
56	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntry(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntry(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntry(),  current.hasDataDescriptor);	  lastStoredEntry    =    getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
57	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry.getValue();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
58	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getValue();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
59	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntry.getValue();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
60	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.storedEntry.getValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.storedEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.storedEntry.getValue();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
61	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry;	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
62	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getKey();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getKey();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getKey();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
63	[BUG]  [BUGGY]  readFileDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor();  }  else  {  inf.close();  }	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
64	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  lastStoredEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  lastStoredEntry.getDataDescriptor();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  current.getValue();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  current.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  current.getValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  current.getValueDescriptor();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
67	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  current.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  current.getCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  current.getCurrentEntry();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
68	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  current.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  current.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  current.getLastStoredEntry();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
69	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  current.lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  current.lastStoredEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  current.lastStoredEntry.getDataDescriptor();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntryHasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntryHasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntryHasDataDescriptor;	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
71	[BUG]  [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  lastStoredEntry  =  current.lastStoredEntry;	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
72	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry  &&  hasUTF8Flag;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry  &&  hasUTF8Flag;	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
73	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry?  null  :  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry?  null  :  current.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry?  null  :  current.lastStoredEntry;	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
74	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry  +  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry  +  1;	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
75	[BUG]  [BUGGY]  while(current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
76	[BUG]  [BUGGY]  while(current.hasDataDescriptor  &&  hasUTF8Flag)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  &&  hasUTF8Flag)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  &&  hasUTF8Flag)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
77	[BUG]  [BUGGY]  while(current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
78	[BUG]  [BUGGY]  while(current.hasDataDescriptor  &&  current.lastStoredEntry!=  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  &&  current.lastStoredEntry!=  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  &&  current.lastStoredEntry!=  null)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
79	[BUG]  [BUGGY]  while(current.hasDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDescriptor)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
80	[BUG]  [BUGGY]  while(current.hasDataDescriptor  &&  current.lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  &&  current.lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  &&  current.lastStoredEntry  ==  null)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
81	[BUG]  [BUGGY]  current.hasDataDescriptor  &&  hasUTF8Flag)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  &&  hasUTF8Flag)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  &&  hasUTF8Flag)  {  readDataDescriptor();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
82	[BUG]  [BUGGY]  current.hasValueDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasValueDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasValueDescriptor)  {  readDataDescriptor();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
83	[BUG]  [BUGGY]  current.hasDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDescriptor)  {  readDataDescriptor();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
84	[BUG]  [BUGGY]  current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
85	[BUG]  [BUGGY]  current.hasDataDescriptor())  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor())  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor())  {  readDataDescriptor();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
86	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getValueDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
87	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getCurrentEntry();	  CurrentEntry    <    K,    V>    current    =    currentEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
88	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getDataDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
89	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getLastStoredEntry();	  CurrentEntry    <    K,    V>    current    =    currentEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
90	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getKey();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getKey();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getKey();	  CurrentEntry    <    K,    V>    current    =    currentEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
91	[BUG]  [BUGGY]  while(current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  &&  lastStoredEntry!=  null)  {  readDataDescriptor();  }  else  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
92	[BUG]  [BUGGY]  while(!current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(!current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(!current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
93	[BUG]  [BUGGY]  while(current.hasDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
94	[BUG]  [BUGGY]  while(current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
95	[BUG]  [BUGGY]  while(current.hasDataDescriptor  &&  current.lastStoredEntry!=  null)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  &&  current.lastStoredEntry!=  null)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  &&  current.lastStoredEntry!=  null)  {  readDataDescriptor();  }  else  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
96	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getLastStoredEntry();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
97	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.lastStoredEntry();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
98	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntry.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntry.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntry.getLastStoredEntry();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
99	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getFirstStoredEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getFirstStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getFirstStoredEntry();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
100	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getLastChildEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getLastChildEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntry.getLastChildEntry();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
101	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getFirstStoredEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getFirstStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.getFirstStoredEntry();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
102	[BUG]  [BUGGY]  lastStoredEntry  =  current.readUTF8DataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readUTF8DataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readUTF8DataDescriptor();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
103	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFullyQuotedDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFullyQuotedDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFullyQuotedDataDescriptor();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
104	[BUG]  [BUGGY]  lastStoredEntry  =  current.readIntDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readIntDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readIntDataDescriptor();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
105	[BUG]  [BUGGY]  lastStoredEntry  =  current.readUnicodeDataDescriptor();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readUnicodeDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readUnicodeDataDescriptor();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
106	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
107	[BUG]  [BUGGY]  readCurrentEntryData();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readCurrentEntryData();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readCurrentEntryData();	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
108	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  if(lastStoredEntry!=  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  if(lastStoredEntry!=  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  if(lastStoredEntry!=  null)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
109	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  lastStoredEntry  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  lastStoredEntry  =  current.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  lastStoredEntry  =  current.getDataDescriptor();	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
110	[BUG]  [BUGGY]  lastStoredEntry  =  getValueDescriptor(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getValueDescriptor(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getValueDescriptor(),  current.hasDataDescriptor);	  lastStoredEntry    =    getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
111	[BUG]  [BUGGY]  lastStoredEntry  =  getValueDescriptor(current);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getValueDescriptor(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getValueDescriptor(current);	  lastStoredEntry    =    getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
112	[BUG]  [BUGGY]  lastStoredEntry  =  getValueDescriptor(),  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getValueDescriptor(),  current.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getValueDescriptor(),  current.hasDataDescriptor;	  lastStoredEntry    =    getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
113	[BUG]  [BUGGY]  CurrentEntry  <  Object>  current  =  currentEntryHasOutstandingBytes();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  Object>  current  =  currentEntryHasOutstandingBytes();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  Object>  current  =  currentEntryHasOutstandingBytes();	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
114	[BUG]  [BUGGY]  lastStoredEntry  =  current;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current;	  lastStoredEntry    =    null;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
115	[BUG]  [BUGGY]  lastStoredEntry  =  current.dataDescriptor;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.dataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.dataDescriptor;	  lastStoredEntry    =    null;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
116	[BUG]  [BUGGY]  current.hasDataDescriptor(current.dataDescriptor))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(current.dataDescriptor))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(current.dataDescriptor))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
117	[BUG]  [BUGGY]  current.hasDataDescriptor(lastStoredEntry.getValue()))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(lastStoredEntry.getValue()))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(lastStoredEntry.getValue()))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
118	[BUG]  [BUGGY]  current.hasDataDescriptor(current.length))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(current.length))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(current.length))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
119	[BUG]  [BUGGY]  current.hasDataDescriptor(current.lastStoredEntry.length))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(current.lastStoredEntry.length))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(current.lastStoredEntry.length))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
120	[BUG]  [BUGGY]  current.hasDataDescriptor(current.getValue()))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(current.getValue()))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(current.getValue()))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
121	[BUG]  [BUGGY]  current.hasDataDescriptor(lastStoredEntry.getKey()))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(lastStoredEntry.getKey()))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(lastStoredEntry.getKey()))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
122	[BUG]  [BUGGY]  ReadFileDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadFileDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadFileDataDescriptor();	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
123	[BUG]  [BUGGY]  reader.readFileDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  reader.readFileDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	reader.readFileDataDescriptor();	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
124	[BUG]  [BUGGY]  Reader  reader  =  current.readFileDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  Reader  reader  =  current.readFileDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	Reader  reader  =  current.readFileDataDescriptor();	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
125	[BUG]  [BUGGY]  current  =  current;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current;	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
126	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getValue());	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
127	[BUG]  [BUGGY]  current  =  new  CurrentEntry(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  CurrentEntry(lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  CurrentEntry(lastStoredEntry.getValue());	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
128	[BUG]  [BUGGY]  current  =  new  CurrentEntry(lastStoredEntry.getValue(),  diff);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  CurrentEntry(lastStoredEntry.getValue(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  CurrentEntry(lastStoredEntry.getValue(),  diff);	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
129	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getDataDescriptor());	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
130	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor()?  getDataDescriptor()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
131	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getFullDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getFullDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getFullDataDescriptor()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
132	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getValueDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getValueDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getValueDescriptor()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
133	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  this;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  this;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  this;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
134	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  DELETE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  DELETE;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  DELETE;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
135	[BUG]  [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.lastStoredEntry,  current.hasDataDescriptor);	  readFileDataDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
136	[BUG]  [BUGGY]  readFileDataDescriptor(current,  current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current,  current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current,  current.lastStoredEntry);	  readFileDataDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
137	[BUG]  [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  encoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.lastStoredEntry,  encoding);	  readFileDataDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
138	[BUG]  [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.lastStoredEntry,  hasDataDescriptor);	  readFileDataDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
139	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  null  :  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  null  :  current.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor()?  null  :  current.getDataDescriptor();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
140	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getValueDescriptor();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
141	[BUG]  [BUGGY]  LastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getDataDescriptor();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
142	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getShortValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getShortValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getShortValue();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
143	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getLastChild();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getLastChild();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
144	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  continue;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  continue;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
145	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
146	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  continue;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  continue;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
147	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry  ==  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry  ==  null)  {  continue;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry  ==  null)  {  continue;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
148	[BUG]  [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  continue;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
149	[BUG]  [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntry);	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
150	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(lastStoredEntry.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry.getDataDescriptor());	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
151	[BUG]  [BUGGY]  scanCurrentEntry(current.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getValue());	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
152	[BUG]  [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  diff);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getDataDescriptor(),  diff);	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
153	[BUG]  [BUGGY]  scanCurrentEntry(current.getLastStoredEntry());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getLastStoredEntry());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getLastStoredEntry());	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
154	[BUG]  [BUGGY]  scanCurrentEntry(current.getValueDescriptor());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getValueDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getValueDescriptor());	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
155	[BUG]  [BUGGY]  scanCurrentEntry(current.getShortDataDescriptor());  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getShortDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getShortDataDescriptor());	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(current.hasDataDescriptor());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  Preconditions.checkState(current.hasDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	Preconditions.checkState(current.hasDataDescriptor());	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
157	[BUG]  [BUGGY]  CheckState(current.hasDataDescriptor());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CheckState(current.hasDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CheckState(current.hasDataDescriptor());	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
158	[BUG]  [BUGGY]  ReadDataDescriptor(current.getEntryHasOutstandingBytes());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadDataDescriptor(current.getEntryHasOutstandingBytes());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadDataDescriptor(current.getEntryHasOutstandingBytes());	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
159	[BUG]  [BUGGY]  CheckState(current.hasDataDescriptor(),  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CheckState(current.hasDataDescriptor(),  hasUTF8Flag);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CheckState(current.hasDataDescriptor(),  hasUTF8Flag);	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
160	[BUG]  [BUGGY]  readCurrentEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readCurrentEntry();	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
161	[BUG]  [BUGGY]  ReadDataDescriptor(lastStoredEntry,  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadDataDescriptor(lastStoredEntry,  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadDataDescriptor(lastStoredEntry,  current.hasDataDescriptor);	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
162	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.getDataDescriptor();	  lastStoredEntry    =    current.hasDataDescriptor?    null    :    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
163	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasValueDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasValueDescriptor();	  lastStoredEntry    =    current.hasDataDescriptor?    null    :    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
164	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.getValue();	  lastStoredEntry    =    current.hasDataDescriptor?    null    :    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
165	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry);  }	  readFileDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
166	[BUG]  [BUGGY]  readFileDataDescriptor(current,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current,  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current,  lastStoredEntry);	  readFileDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
167	[BUG]  [BUGGY]  readFileDataDescriptor(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.getDataDescriptor());	  readFileDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
168	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry);  }  else  {  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry);  }  else  {  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDataDescriptor(lastStoredEntry);  }  else  {  current  =  null;  }	  readFileDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
169	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastEntryDataDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastEntryDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastEntryDataDescriptor();	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
170	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntryHasDataDescriptor();	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
171	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntryDataDescriptor(current.hasDataDescriptor);	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
172	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(current);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntryDataDescriptor(current);	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
173	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntryDataDescriptor(),  current.hasDataDescriptor);	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
174	[BUG]  [BUGGY]  lastStoredEntry  =  getFirstEntryDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getFirstEntryDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getFirstEntryDataDescriptor();	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
175	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
176	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.dataDescriptor);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
177	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.getDataDescriptor());	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
178	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.hasDataDescriptor);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
179	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.lastStoredEntry);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
180	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.storedEntry);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.storedEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.storedEntry);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
181	[BUG]  [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag  &&  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag  &&  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  hasUTF8Flag  &&  lastStoredEntry.getDataDescriptor()  :  null;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
182	[BUG]  [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag  ||  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag  ||  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  hasUTF8Flag  ||  lastStoredEntry.getDataDescriptor()  :  null;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
183	[BUG]  [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag  &  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag  &  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  hasUTF8Flag  &  lastStoredEntry.getDataDescriptor()  :  null;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
184	[BUG]  [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DELETED;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DELETED;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DELETED;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
185	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry();	  lastStoredEntry    =    current.readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
186	[BUG]  [BUGGY]  current  =  currentEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  currentEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  currentEntry.getDataDescriptor();	  current    =    lastStoredEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
187	[BUG]  [BUGGY]  current  =  this.lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  this.lastStoredEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  this.lastStoredEntry.getDataDescriptor();	  current    =    lastStoredEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
188	[BUG]  [BUGGY]  current  =  lastStoredEntry.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  lastStoredEntry.getValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  lastStoredEntry.getValueDescriptor();	  current    =    lastStoredEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
189	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
190	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
191	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFrom  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFrom  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFrom	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
192	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
193	[BUG]  [BUGGY]  lastStoredEntry  =  current.currentEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.currentEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.currentEntryHasDataDescriptor();	  lastStoredEntry    =    current.readValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
194	[BUG]  [BUGGY]  lastStoredEntry  =  current.readValue()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readValue()  -  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readValue()  -  1;	  lastStoredEntry    =    current.readValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
195	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  this;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  this;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  this;	  lastStoredEntry    =    current.hasDataDescriptor?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
196	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  DELETED;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  DELETED;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getDataDescriptor()  :  DELETED;	  lastStoredEntry    =    current.hasDataDescriptor?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
197	[BUG]  [BUGGY]  lastStoredEntry  =  current.readValueDescriptor()  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readValueDescriptor()  &&  hasUTF8Flag;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readValueDescriptor()  &&  hasUTF8Flag;	  lastStoredEntry    =    current.readValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
198	[BUG]  [BUGGY]  lastStoredEntry  =  current.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getFirstChild();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getFirstChild();	  lastStoredEntry    =    current.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
199	[BUG]  [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getLastChild();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getLastChild();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  lastStoredEntry  =  current.getLastChild();	  lastStoredEntry    =    current.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
200	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastChild()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastChild()  -  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastChild()  -  1;	  lastStoredEntry    =    current.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
201	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastChild()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastChild()  +  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastChild()  +  1;	  lastStoredEntry    =    current.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
202	[BUG]  [BUGGY]  readFileDataDescriptor(current.dataDescriptor,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.dataDescriptor,  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.dataDescriptor,  lastStoredEntry);	  readFileDataDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
203	[BUG]  [BUGGY]  readFileDataDescriptor(lastStoredEntry,  current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(lastStoredEntry,  current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(lastStoredEntry,  current.dataDescriptor);	  readFileDataDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
204	[BUG]  [BUGGY]  readFileDataDescriptor(lastStoredEntry.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(lastStoredEntry.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(lastStoredEntry.dataDescriptor);	  readFileDataDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
205	[BUG]  [BUGGY]  readFileDataDescriptor(current.dataDescriptor,  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.dataDescriptor,  encoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.dataDescriptor,  encoding);	  readFileDataDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
206	[BUG]  [BUGGY]  readFileDataDescriptor(current.dataDescriptor,  current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.dataDescriptor,  current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.dataDescriptor,  current.lastStoredEntry);	  readFileDataDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
207	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.getKey()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.getKey()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor?  lastStoredEntry.getKey()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
208	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  current.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  current.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  current.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
209	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
210	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
211	[BUG]  [BUGGY]  current  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.getValue();	  current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
212	[BUG]  [BUGGY]  current  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  currentEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  currentEntry.getValue();	  current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
213	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  lastStoredEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  lastStoredEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  lastStoredEntry.getValue();	  current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
214	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
215	[BUG]  [BUGGY]  lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
216	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  throw  new  IllegalArgumentException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
217	[BUG]  [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
218	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  break;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  break;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
219	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  break;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  break;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
220	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  break;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  break;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
221	[BUG]  [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  break;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  break;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
222	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.getValue();	  CurrentEntry    <    K,    V>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
223	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.getValueDescriptor();	  CurrentEntry    <    K,    V>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
224	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.getCurrentEntry();	  CurrentEntry    <    K,    V>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
225	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.getDataDescriptor();	  CurrentEntry    <    K,    V>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
226	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.getLastStoredEntry();	  CurrentEntry    <    K,    V>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
227	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  current.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  current.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  current.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
228	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getKey()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getKey()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getKey()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
229	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getDataDescriptor()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
230	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor()?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor()?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
231	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
232	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValue()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValue()?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getValue()?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
233	[BUG]  [BUGGY]  readFileDescriptor(current.lastStoredEntry,  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.lastStoredEntry,  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.lastStoredEntry,  current.hasDataDescriptor);	  readFileDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
234	[BUG]  [BUGGY]  readFileDescriptor(current.lastStoredEntry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.lastStoredEntry,  hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.lastStoredEntry,  hasDataDescriptor);	  readFileDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
235	[BUG]  [BUGGY]  readFileDescriptor(current.lastStoredEntry,  encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.lastStoredEntry,  encoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.lastStoredEntry,  encoding);	  readFileDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
236	[BUG]  [BUGGY]  readFileDescriptor(current,  current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current,  current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current,  current.lastStoredEntry);	  readFileDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
237	[BUG]  [BUGGY]  scanCurrentEntry(current,  lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current,  lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current,  lastStoredEntry.getValue());	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
238	[BUG]  [BUGGY]  browseCurrentEntry(current.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  browseCurrentEntry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	browseCurrentEntry(current.getValue());	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
239	[BUG]  [BUGGY]  scanCurrentEntryData(current.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryData(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryData(current.getValue());	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
240	[BUG]  [BUGGY]  scanZip64Entry(current.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanZip64Entry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanZip64Entry(current.getValue());	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
241	[BUG]  [BUGGY]  validateEntry(current.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  validateEntry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	validateEntry(current.getValue());	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
242	[BUG]  [BUGGY]  flushCurrentEntry(current);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  flushCurrentEntry(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	flushCurrentEntry(current);	  flushCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
243	[BUG]  [BUGGY]  flushCurrentEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  flushCurrentEntry(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	flushCurrentEntry(current.getDataDescriptor());	  flushCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
244	[BUG]  [BUGGY]  lastStoredEntry  =  current.currentEntryHasUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.currentEntryHasUnicodeExtraFields();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.currentEntryHasUnicodeExtraFields();	  lastStoredEntry    =    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
245	[BUG]  [BUGGY]  lastStoredEntry  =  current.nextEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.nextEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.nextEntry();	  lastStoredEntry    =    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
246	[BUG]  [BUGGY]  lastStoredEntry  =  current.getFirstEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getFirstEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getFirstEntry();	  lastStoredEntry    =    getFirstEntry();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
247	[BUG]  [BUGGY]  lastStoredEntry  =  current.currentEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.currentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.currentEntry();	  lastStoredEntry    =    current.readCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
248	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastCurrentEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastCurrentEntry();	  lastStoredEntry    =    getLastCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
249	[BUG]  [BUGGY]  lastStoredEntry  =  getLastDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastDataDescriptor();	  lastStoredEntry    =    getLastCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
250	[BUG]  [BUGGY]  lastStoredEntry  =  getFirstCurrentEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getFirstCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getFirstCurrentEntry();	  lastStoredEntry    =    getLastCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
251	[BUG]  [BUGGY]  lastStoredEntry  =  getLastCurrentEntry(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastCurrentEntry(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastCurrentEntry(current.hasDataDescriptor);	  lastStoredEntry    =    getLastCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
252	[BUG]  [BUGGY]  lastStoredEntry  =  getLastCurrentEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastCurrentEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastCurrentEntryHasDataDescriptor();	  lastStoredEntry    =    getLastCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
253	[BUG]  [BUGGY]  lastStoredEntry  =  getLastCurrentEntry().getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastCurrentEntry().getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastCurrentEntry().getValue();	  lastStoredEntry    =    getLastCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
254	[BUG]  [BUGGY]  scanCurrentEntry(current,  lastStoredEntry.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current,  lastStoredEntry.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current,  lastStoredEntry.hasDataDescriptor);	  scanCurrentEntry(lastStoredEntry,    current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
255	[BUG]  [BUGGY]  scanCurrentEntry(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.hasDataDescriptor);	  scanCurrentEntry(lastStoredEntry,    current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
256	[BUG]  [BUGGY]  scanCurrentEntry(current,  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current,  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current,  current.hasDataDescriptor);	  scanCurrentEntry(lastStoredEntry,    current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
257	[BUG]  [BUGGY]  scanCurrentEntry(current.getValue(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getValue(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getValue(),  current.hasDataDescriptor);	  scanCurrentEntry(lastStoredEntry,    current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
258	[BUG]  [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getDataDescriptor(),  current.hasDataDescriptor);	  scanCurrentEntry(lastStoredEntry,    current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
259	[BUG]  [BUGGY]  scanCurrentEntry(current,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current,  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current,  lastStoredEntry);	  scanCurrentEntry(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
260	[BUG]  [BUGGY]  current  =  currentEntry;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  currentEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  currentEntry;	  current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
261	[BUG]  [BUGGY]  current  =  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.hasDataDescriptor;	  current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
262	[BUG]  [BUGGY]  lastStoredEntry  =  current.getCurrentEntry()?  getCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getCurrentEntry()?  getCurrentEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getCurrentEntry()?  getCurrentEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
263	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  getCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  getCurrentEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor()?  getCurrentEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
264	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  this;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  this;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  this;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
265	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryName()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryName()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryName()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
266	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  DELETE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  DELETE;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntry()  :  DELETE;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
267	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.bytesReadFromStream);	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
268	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getValue());	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
269	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.dataDescriptor);	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
270	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.lastStoredEntry);	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
271	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.nextDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.nextDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.nextDataDescriptor);	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
272	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getValue(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getValue(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getValue(),  current.hasDataDescriptor);	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
273	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
274	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current.hasDataDescriptor)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
275	[BUG]  [BUGGY]  lastStoredEntry  =  null;  current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  null;  current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  null;  current.hasDataDescriptor)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
276	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current;	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
277	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry;	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
278	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry;	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
279	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor;	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
280	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.dataDescriptor;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.dataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.dataDescriptor;	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
281	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue()  +  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue()  +  1;	  lastStoredEntry    =    current.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
282	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue()  -  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue()  -  1;	  lastStoredEntry    =    current.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
283	[BUG]  [BUGGY]  lastStoredEntry  =  current.getKey();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getKey();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getKey();	  lastStoredEntry    =    current.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
284	[BUG]  [BUGGY]  lastStoredEntry  =  current.currentEntryHasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.currentEntryHasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.currentEntryHasDataDescriptor;	  lastStoredEntry    =    current.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
285	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(current.getValue(),  diff);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(current.getValue(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(current.getValue(),  diff);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
286	[BUG]  [BUGGY]  CurrentEntry  current  =  new  ZipArchiveEntry(current.getValue(),  diff);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  current  =  new  ZipArchiveEntry(current.getValue(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  current  =  new  ZipArchiveEntry(current.getValue(),  diff);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
287	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(diff.getValue(),  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(diff.getValue(),  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(diff.getValue(),  lastStoredEntry);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
288	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(this.lastStoredEntry.getValue(),  diff);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(this.lastStoredEntry.getValue(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(this.lastStoredEntry.getValue(),  diff);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
289	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  current);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  current);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
290	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getKey(),  diff);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getKey(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getKey(),  diff);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
291	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  -  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream  -  1;	  lastStoredEntry    =    current.bytesReadFromStream;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
292	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  -  diff;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  -  diff;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream  -  diff;	  lastStoredEntry    =    current.bytesReadFromStream;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
293	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  ||  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  ||  current.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream  ||  current.hasDataDescriptor;	  lastStoredEntry    =    current.bytesReadFromStream;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
294	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  +  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream  +  1;	  lastStoredEntry    =    current.bytesReadFromStream;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
295	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  -  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  -  2;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream  -  2;	  lastStoredEntry    =    current.bytesReadFromStream;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
296	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  +  diff;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream  +  diff;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream  +  diff;	  lastStoredEntry    =    current.bytesReadFromStream;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
297	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  hasUTF8Flag);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  hasUTF8Flag);	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
298	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  current);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  current);	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
299	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  current.hasDataDescriptor);	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
300	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getValue());	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
301	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  this);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  this);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  this);	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
302	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  diff);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  diff);	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
303	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  inf);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  inf);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getDataDescriptor(),  inf);	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
304	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  this;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  this;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  this;	  lastStoredEntry    =    current.hasDataDescriptor?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
305	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(current);	  lastStoredEntry    =    current.readDataDescriptor(null);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
306	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(false);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(false);	  lastStoredEntry    =    current.readDataDescriptor(null);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
307	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  null);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(null,  null);	  lastStoredEntry    =    current.readDataDescriptor(null);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
308	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  false);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(null,  false);	  lastStoredEntry    =    current.readDataDescriptor(null);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
309	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(diff);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(diff);	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.bytesReadFromStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
310	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  null  :  current.bytesReadFromStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  null  :  current.bytesReadFromStream();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor()?  null  :  current.bytesReadFromStream();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.bytesReadFromStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
311	[BUG]  [BUGGY]  LastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.bytesReadFromStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
312	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(1);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(1);	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.bytesReadFromStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
313	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(0);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.bytesReadFromStream(0);	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.bytesReadFromStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
314	[BUG]  [BUGGY]  current  =  current.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.getValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.getValueDescriptor();	  current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
315	[BUG]  [BUGGY]  current  =  current.getEntryDescriptor();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.getEntryDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.getEntryDescriptor();	  current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
316	[BUG]  [BUGGY]  current  =  current.getEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.getEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.getEntry();	  current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
317	[BUG]  [BUGGY]  current  =  current.getDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.getDataDescriptor(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.getDataDescriptor(lastStoredEntry);	  current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
318	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry,  current);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(lastStoredEntry,  current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry,  current);	  scanCurrentEntry(current);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
319	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  current  =  lastStoredEntry;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  current  =  lastStoredEntry;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  current  =  lastStoredEntry;  }	  current.hasDataDescriptor)    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
320	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  current  =  this;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  current  =  this;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  current  =  this;  }	  current.hasDataDescriptor)    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
321	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  current  =  nextEntry;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  current  =  nextEntry;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  current  =  nextEntry;  }	  current.hasDataDescriptor)    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
322	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  current  =  new  CurrentEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  current  =  new  CurrentEntry();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  current  =  new  CurrentEntry();  }	  current.hasDataDescriptor)    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
323	[BUG]  [BUGGY]  current.hasDescriptor)  {  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDescriptor)  {  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDescriptor)  {  current  =  null;  }	  current.hasDataDescriptor)    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
324	[BUG]  [BUGGY]  lastStoredEntry  =  current.getFirstDataDescriptor();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getFirstDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getFirstDataDescriptor();	  lastStoredEntry    =    current.getLastDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
325	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor()  -  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastDataDescriptor()  -  1;	  lastStoredEntry    =    current.getLastDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
326	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor()  +  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastDataDescriptor()  +  1;	  lastStoredEntry    =    current.getLastDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
327	[BUG]  [BUGGY]  LastStoredEntry  =  current.getLastDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  =  current.getLastDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  =  current.getLastDataDescriptor();	  lastStoredEntry    =    current.getLastDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
328	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastValueDescriptor();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastValueDescriptor();	  lastStoredEntry    =    current.getLastDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
329	[BUG]  [BUGGY]  readFileDescriptor(current.dataDescriptor,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.dataDescriptor,  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.dataDescriptor,  lastStoredEntry);	  readFileDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
330	[BUG]  [BUGGY]  readFileDescriptor(lastStoredEntry,  current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(lastStoredEntry,  current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(lastStoredEntry,  current.dataDescriptor);	  readFileDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
331	[BUG]  [BUGGY]  readFileDescriptor(lastStoredEntry.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(lastStoredEntry.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(lastStoredEntry.dataDescriptor);	  readFileDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
332	[BUG]  [BUGGY]  readFileDescriptor(current.dataDescriptor,  encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.dataDescriptor,  encoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.dataDescriptor,  encoding);	  readFileDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
333	[BUG]  [BUGGY]  readFileDescriptor(current.dataDescriptor,  current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.dataDescriptor,  current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.dataDescriptor,  current.lastStoredEntry);	  readFileDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
334	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
335	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
336	[BUG]  [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
337	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getKey()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getKey()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getKey()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
338	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry.getValue()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
339	[BUG]  [BUGGY]  LastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
340	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.getValue();	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
341	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.storedEntry.getValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.storedEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.storedEntry.getValue();	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
342	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.dataDescriptor.getValue();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.dataDescriptor.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.dataDescriptor.getValue();	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
343	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.currentEntry.getValue();	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
344	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
345	[BUG]  [BUGGY]  lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
346	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
347	[BUG]  [BUGGY]  LastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
348	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor()?  lastStoredEntry  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
349	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue()?  lastStoredEntry  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue()?  lastStoredEntry  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue()?  lastStoredEntry  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
350	[BUG]  [BUGGY]  lastStoredEntry  =  current.currentDataDescriptor()?  lastStoredEntry  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.currentDataDescriptor()?  lastStoredEntry  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.currentDataDescriptor()?  lastStoredEntry  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
351	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  this.lastStoredEntry  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  this.lastStoredEntry  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  this.lastStoredEntry  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
352	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry()?  lastStoredEntry  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry()?  lastStoredEntry  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry()?  lastStoredEntry  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
353	[BUG]  [BUGGY]  reader.readDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  reader.readDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	reader.readDataDescriptor();	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
354	[BUG]  [BUGGY]  readDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readDataDescriptor(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readDataDescriptor(lastStoredEntry);	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
355	[BUG]  [BUGGY]  readDataDescriptor(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readDataDescriptor(current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readDataDescriptor(current.bytesReadFromStream);	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
356	[BUG]  [BUGGY]  ReadCurrentEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadCurrentEntry();	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
357	[BUG]  [BUGGY]  readFileDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getValue());	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
358	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
359	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  inf.close();  }	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
360	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  current  =  null;  }	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
361	[BUG]  [BUGGY]  readFileDescriptor(current,  lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current,  lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current,  lastStoredEntry.getValue());	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
362	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  inf.reset();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  inf.reset();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry.getValue());  }  else  {  inf.reset();  }	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
363	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor  &&  hasUTF8Flag;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor  &&  hasUTF8Flag;	  lastStoredEntry    =    current.hasDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
364	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor  ||  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor  ||  hasUTF8Flag;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor  ||  hasUTF8Flag;	  lastStoredEntry    =    current.hasDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
365	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasValueDescriptor;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasValueDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasValueDescriptor;	  lastStoredEntry    =    current.hasDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
366	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  current.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  current.hasDataDescriptor;	  lastStoredEntry    =    current.hasDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
367	[BUG]  [BUGGY]  readFileDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor();  }  else  {  inf.close();  }	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
368	[BUG]  [BUGGY]  Inflater  inf  =  lastStoredEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  Inflater  inf  =  lastStoredEntry.getInputStream();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	Inflater  inf  =  lastStoredEntry.getInputStream();	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
369	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
370	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
371	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentDirectory();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentDirectory();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentDirectory();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
372	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasFullDataDescriptor();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasFullDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasFullDataDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
373	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasCurrentEntry();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
374	[BUG]  [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getLastEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getLastEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  lastStoredEntry  =  current.getLastEntry();	  lastStoredEntry    =    current.getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
375	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastEntry()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastEntry()  -  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastEntry()  -  1;	  lastStoredEntry    =    current.getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
376	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastEntry()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastEntry()  +  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastEntry()  +  1;	  lastStoredEntry    =    current.getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
377	[BUG]  [BUGGY]  LastStoredEntry  =  current.getLastEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  =  current.getLastEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  =  current.getLastEntry();	  lastStoredEntry    =    current.getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
378	[BUG]  [BUGGY]  readFileDescriptor(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.bytesReadFromStream);	  readFileDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
379	[BUG]  [BUGGY]  readFileDescriptor(current,  encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current,  encoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current,  encoding);	  readFileDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
380	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getKey()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getKey()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getKey()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
381	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue()?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue()?  lastStoredEntry.getValue()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
382	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  this;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  this;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  this;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
383	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getName()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getName()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getName()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
384	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  return;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry  ==  null)  {  return;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
385	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  return;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  return;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
386	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  return;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  return;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
387	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry  ==  null)  {  return;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry  ==  null)  {  return;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
388	[BUG]  [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  return;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getShortDataDescriptor();  if(lastStoredEntry!=  null)  {  return;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
389	[BUG]  [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  diff);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getDataDescriptor(),  diff);	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
390	[BUG]  [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getDataDescriptor(),  lastStoredEntry);	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
391	[BUG]  [BUGGY]  readFileDescriptor(lastStoredEntry.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(lastStoredEntry.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(lastStoredEntry.getDataDescriptor());	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
392	[BUG]  [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  inf);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  inf);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getDataDescriptor(),  inf);	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
393	[BUG]  [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  this);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  this);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getDataDescriptor(),  this);	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
394	[BUG]  [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getDataDescriptor(),  current.lastStoredEntry);	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
395	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.bytesReadFromStream);	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
396	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(current.bytesReadFromStream);	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
397	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry);  }	  readFileDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
398	[BUG]  [BUGGY]  readFileDescriptor(current,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current,  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current,  lastStoredEntry);	  readFileDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
399	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry);  }  else  {  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry);  }  else  {  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  readFileDescriptor(lastStoredEntry);  }  else  {  current  =  null;  }	  readFileDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
400	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDataDescriptor();	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
401	[BUG]  [BUGGY]  lastStoredEntry  =  hasDataDescriptor?  readFileDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  hasDataDescriptor?  readFileDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  hasDataDescriptor?  readFileDataDescriptor()  :  null;	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
402	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDataDescriptor(current.hasDataDescriptor);	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
403	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDataDescriptor(current.bytesReadFromStream);	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
404	[BUG]  [BUGGY]  lastStoredEntry  =  ze.readFileDataDescriptor();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  ze.readFileDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  ze.readFileDataDescriptor();	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
405	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDataDescriptor(current.getValue());	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
406	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getRawDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getRawDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getRawDataDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
407	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasDataDescriptor(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasDataDescriptor(lastStoredEntry);	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
408	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current);	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
409	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.hasDataDescriptor);	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
410	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.lastStoredEntry);	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
411	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntryHasZip64(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntryHasZip64(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.currentEntryHasZip64(lastStoredEntry);	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
412	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.entryHasZip64(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.entryHasZip64(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.entryHasZip64(lastStoredEntry);	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
413	[BUG]  [BUGGY]  lastStoredEntry  =  current.getKeyDescriptor();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getKeyDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getKeyDescriptor();	  lastStoredEntry    =    current.getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
414	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor()  +  1;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor()  +  1;	  lastStoredEntry    =    current.getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
415	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor(null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor(null);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor(null);	  lastStoredEntry    =    current.getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
416	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor(0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor(0);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor(0);	  lastStoredEntry    =    current.getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
417	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(current.lastStoredEntry);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
418	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(current.dataDescriptor);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
419	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(current.bytesReadFromStream);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
420	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(current.hasDataDescriptor);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
421	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(current.getValue());	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
422	[BUG]  [BUGGY]  lastStoredEntry  =  getLastChildEntry().getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastChildEntry().getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastChildEntry().getValue();	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
423	[BUG]  [BUGGY]  lastStoredEntry  =  getLastChildEntry(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastChildEntry(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastChildEntry(current.hasDataDescriptor);	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
424	[BUG]  [BUGGY]  lastStoredEntry  =  getLastChildEntry(current);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastChildEntry(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastChildEntry(current);	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
425	[BUG]  [BUGGY]  lastStoredEntry  =  getFirstChildEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getFirstChildEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getFirstChildEntry();	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
426	[BUG]  [BUGGY]  lastStoredEntry  =  getLastChildEntry().cloneTree();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastChildEntry().cloneTree();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastChildEntry().cloneTree();	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
427	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasOutstandingBytes();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasOutstandingBytes();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasOutstandingBytes();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
428	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
429	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry(lastStoredEntry);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
430	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasDataDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
431	[BUG]  [BUGGY]  readFileDataDescriptor(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.bytesReadFromStream);	  readFileDataDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
432	[BUG]  [BUGGY]  readFileDataDescriptor(current,  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current,  encoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current,  encoding);	  readFileDataDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
433	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getShortValue()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getShortValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getShortValue()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
434	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getSize()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getSize()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getSize()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
435	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  this;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  this;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  this;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
436	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  buf.setLength(0);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry  ==  null)  {  buf.setLength(0);  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
437	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  buf.setLength(0);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null  ||  current.hasDataDescriptor)  {  buf.setLength(0);  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
438	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
439	[BUG]  [BUGGY]  lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getKey();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
440	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValue();  buf.setLength(0);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValue();  buf.setLength(0);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValue();  buf.setLength(0);	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
441	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasUnicodeExtraFields();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasUnicodeExtraFields();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
442	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeDescriptor();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
443	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(),  lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(),  lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(),  lastStoredEntry;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
444	[BUG]  [BUGGY]  lastStoredEntry  =  current.getShortDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getShortDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getShortDescriptor();	  lastStoredEntry    =    current.getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
445	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastChronology();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastChronology();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastChronology();	  lastStoredEntry    =    current.getShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
446	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  diff);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  diff);	  lastStoredEntry    =    getCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
447	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.hasDataDescriptor);	  lastStoredEntry    =    getCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
448	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.size);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.size);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.size);	  lastStoredEntry    =    getCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
449	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current);	  lastStoredEntry    =    getCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
450	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.type);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.type);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  current.type);	  lastStoredEntry    =    getCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
451	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.getDataDescriptor();	  lastStoredEntry    =    current.lastStoredEntry.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
452	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.getValue();	  lastStoredEntry    =    current.lastStoredEntry.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
453	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.readValue();	  lastStoredEntry    =    current.lastStoredEntry.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
454	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readShortDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readShortDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.readShortDataDescriptor();	  lastStoredEntry    =    current.lastStoredEntry.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
455	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readFileDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readFileDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.readFileDataDescriptor();	  lastStoredEntry    =    current.lastStoredEntry.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
456	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.dataDescriptor();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.dataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.dataDescriptor();	  lastStoredEntry    =    current.lastStoredEntry.readDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
457	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readFileDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readFileDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readFileDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
458	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  readFileDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  readFileDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  readFileDataDescriptor()  :  null;	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
459	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream.readFully();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream.readFully();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream.readFully();	  lastStoredEntry    =    current.readFully();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
460	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readFully();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readFully();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.readFully();	  lastStoredEntry    =    current.readFully();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
461	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFully()  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFully()  &&  hasUTF8Flag;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFully()  &&  hasUTF8Flag;	  lastStoredEntry    =    current.readFully();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
462	[BUG]  [BUGGY]  readFileDataDescriptor(lastStoredEntry,  current);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(lastStoredEntry,  current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(lastStoredEntry,  current);	  readFileDataDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
463	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDataDescriptor(current);	  readFileDataDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
464	[BUG]  [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
465	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.valueEntry.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.valueEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.valueEntry.getValue();	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
466	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getCurrentEntry();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
467	[BUG]  [BUGGY]  ReadFileDataDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadFileDataDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadFileDataDescriptor(current.getValue());	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
468	[BUG]  [BUGGY]  readFileDataDescriptor(current.getValue(),  lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.getValue(),  lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.getValue(),  lastStoredEntry.getValue());	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
469	[BUG]  [BUGGY]  current.hasDataDescriptor(current.getDataDescriptor()))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(current.getDataDescriptor()))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(current.getDataDescriptor()))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
470	[BUG]  [BUGGY]  current.hasDataDescriptor(lastStoredEntry.getLength()))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(lastStoredEntry.getLength()))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(lastStoredEntry.getLength()))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
471	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getKey());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getKey());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getKey());	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
472	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getLastChild());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getLastChild());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getLastChild());	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
473	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  this.lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  this.lastStoredEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  this.lastStoredEntry.getDataDescriptor();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
474	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  firstEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  firstEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  firstEntry.getDataDescriptor();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
475	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  nextEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  nextEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  nextEntry.getDataDescriptor();	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
476	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getCurrentDataDescriptor());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getCurrentDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getCurrentDataDescriptor());	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
477	[BUG]  [BUGGY]  scanCurrentEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryHasDataDescriptor();	  scanCurrentEntryData();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
478	[BUG]  [BUGGY]  scanCurrentEntryData(lastStoredEntry,  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryData(lastStoredEntry,  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryData(lastStoredEntry,  current.hasDataDescriptor);	  scanCurrentEntryData();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
479	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getLastCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getLastCurrentEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getLastCurrentEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
480	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getDataDescriptor()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
481	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(lastStoredEntry,  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(lastStoredEntry,  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(lastStoredEntry,  current.hasDataDescriptor);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
482	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(entry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64(entry);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
483	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.entryHasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.entryHasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.entryHasDataDescriptor);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
484	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  lastStoredEntry.getValue()  :  currentEntryHasOutstandingBytes();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  lastStoredEntry.getValue()  :  currentEntryHasOutstandingBytes();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  lastStoredEntry.getValue()  :  currentEntryHasOutstandingBytes();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
485	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  currentEntryHasOutstandingBytes();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  currentEntryHasOutstandingBytes();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  lastStoredEntry.getDataDescriptor()  :  currentEntryHasOutstandingBytes();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
486	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor(lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDescriptor(lastStoredEntry.getValue());	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
487	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  hasUTF8Flag);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  hasUTF8Flag);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
488	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current,  hasUTF8Flag);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(current,  hasUTF8Flag);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
489	[BUG]  [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntryHasOutstandingBytes());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntryHasOutstandingBytes());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntryHasOutstandingBytes());	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
490	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry,  current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(lastStoredEntry,  current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry,  current.getDataDescriptor());	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
491	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntryHasDataDescriptor();	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
492	[BUG]  [BUGGY]  lastStoredEntry  =  current.readEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readEntry();	  lastStoredEntry    =    current.readValue();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
493	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readCurrentEntryDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readCurrentEntryDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readCurrentEntryDataDescriptor();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
494	[BUG]  [BUGGY]  current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  &&  lastStoredEntry  ==  null)  {  readDataDescriptor();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
495	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(false);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDescriptor(false);	  lastStoredEntry    =    current.readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
496	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(null);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(null);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDescriptor(null);	  lastStoredEntry    =    current.readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
497	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(entry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDescriptor(entry);	  lastStoredEntry    =    current.readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
498	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(current);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDescriptor(current);	  lastStoredEntry    =    current.readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
499	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastShortDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastShortDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastShortDataDescriptor();	  lastStoredEntry    =    current.getShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
500	[BUG]  [BUGGY]  if(current  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current  ==  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current  ==  null)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
501	[BUG]  [BUGGY]  lastStoredEntry  =  current.allowStoredEntriesWithDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.allowStoredEntriesWithDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.allowStoredEntriesWithDataDescriptor();	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
502	[BUG]  [BUGGY]  lastStoredEntry  =  current.allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.allowStoredEntriesWithDataDescriptor;	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
503	[BUG]  [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  break;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  break;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
504	[BUG]  [BUGGY]  readFileDescriptor(lastStoredEntry,  current);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(lastStoredEntry,  current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(lastStoredEntry,  current);	  readFileDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
505	[BUG]  [BUGGY]  readFileDescriptor(current,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current,  fileNameLen);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current,  fileNameLen);	  readFileDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
506	[BUG]  [BUGGY]  CurrentEntry  lastStoredEntry  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  lastStoredEntry  =  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  lastStoredEntry  =  current.getValue();	  current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
507	[BUG]  [BUGGY]  readFileDataDescriptor(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.hasDataDescriptor);	  readFileDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
508	[BUG]  [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  continue;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  continue;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
509	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
510	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry?  lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry?  lastStoredEntry.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry?  lastStoredEntry.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
511	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  lastStoredEntry.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry?  lastStoredEntry.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
512	[BUG]  [BUGGY]  while(current.allowStoredEntriesWithDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.allowStoredEntriesWithDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.allowStoredEntriesWithDataDescriptor)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
513	[BUG]  [BUGGY]  while(current.hasDataDescriptor  ||  lastStoredEntry!=  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  ||  lastStoredEntry!=  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  ||  lastStoredEntry!=  null)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
514	[BUG]  [BUGGY]  while(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
515	[BUG]  [BUGGY]  while(current.closeEntry())  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.closeEntry())  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.closeEntry())  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
516	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getLastChild()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getLastChild()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getLastChild()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
517	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getValue()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
518	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor(null);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor(null);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastDataDescriptor(null);	  lastStoredEntry    =    current.getLastDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
519	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor(lastStored);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastDataDescriptor(lastStored);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastDataDescriptor(lastStored);	  lastStoredEntry    =    current.getLastDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
520	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getLastCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getLastCurrentEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getLastCurrentEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
521	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getLastChild()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getLastChild()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getLastChild()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
522	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64();	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
523	[BUG]  [BUGGY]  lastStoredEntry  =  new  ByteArrayInputStream(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ByteArrayInputStream(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ByteArrayInputStream(current.getDataDescriptor());	  lastStoredEntry    =    null;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
524	[BUG]  [BUGGY]  lastStoredEntry  =  new  ByteArrayInputStream(current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ByteArrayInputStream(current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ByteArrayInputStream(current.hasDataDescriptor);	  lastStoredEntry    =    null;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
525	[BUG]  [BUGGY]  lastStoredEntry  =  new  ByteArrayInputStream(current.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ByteArrayInputStream(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ByteArrayInputStream(current.getValue());	  lastStoredEntry    =    null;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
526	[BUG]  [BUGGY]  scanCurrentEntry(current.dataDescriptor,  lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.dataDescriptor,  lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.dataDescriptor,  lastStoredEntry.getValue());	  scanCurrentEntry(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
527	[BUG]  [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  buf.setLength(0);  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
528	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
529	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
530	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFrom  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFrom  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFrom	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
531	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
532	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
533	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
534	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.firstEntry.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.firstEntry.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.firstEntry.getLastStoredEntry();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
535	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()  &&  hasUTF8Flag;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()  &&  hasUTF8Flag;	  lastStoredEntry    =    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
536	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
537	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor)  {  readDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor)  {  readDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor)  {  readDataDescriptor();	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
538	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor)  {  readCurrentEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor)  {  readCurrentEntry();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor)  {  readCurrentEntry();  }	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
539	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry.getValue(),  current);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(lastStoredEntry.getValue(),  current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry.getValue(),  current);	  scanCurrentEntry(current);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
540	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getLastEntry()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getLastEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getLastEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
541	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasZip64()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasZip64()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasZip64()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
542	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasFollowCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasFollowCurrentEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasFollowCurrentEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
543	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasShortBytes()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasShortBytes()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasShortBytes()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
544	[BUG]  [BUGGY]  flushCurrentEntry(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  flushCurrentEntry(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	flushCurrentEntry(lastStoredEntry);	  flushCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
545	[BUG]  [BUGGY]  removeCurrentEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  removeCurrentEntry(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	removeCurrentEntry(current.getDataDescriptor());	  flushCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
546	[BUG]  [BUGGY]  removeLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  removeLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	removeLastStoredEntry();	  flushCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
547	[BUG]  [BUGGY]  lastStoredEntry  =  getValueDescriptor(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getValueDescriptor(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getValueDescriptor(current.getDataDescriptor());	  lastStoredEntry    =    getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
548	[BUG]  [BUGGY]  lastStoredEntry  =  getValueDescriptor()  &&  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getValueDescriptor()  &&  current.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getValueDescriptor()  &&  current.hasDataDescriptor;	  lastStoredEntry    =    getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
549	[BUG]  [BUGGY]  lastStoredEntry  =  ze.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  ze.getValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  ze.getValueDescriptor();	  lastStoredEntry    =    getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
550	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  hasUTF8Flag);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  hasUTF8Flag);	  lastStoredEntry    =    getCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
551	[BUG]  [BUGGY]  scanSurrogateEntry(current.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanSurrogateEntry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanSurrogateEntry(current.getValue());	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
552	[BUG]  [BUGGY]  scanZipEntry(current.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanZipEntry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanZipEntry(current.getValue());	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
553	[BUG]  [BUGGY]  scanCentralEntry(current.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCentralEntry(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCentralEntry(current.getValue());	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
554	[BUG]  [BUGGY]  while(current.allowStoredEntriesWithDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.allowStoredEntriesWithDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.allowStoredEntriesWithDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
555	[BUG]  [BUGGY]  while(lastStoredEntry.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(lastStoredEntry.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(lastStoredEntry.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
556	[BUG]  [BUGGY]  while(lastStoredEntry.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(lastStoredEntry.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(lastStoredEntry.hasDataDescriptor)  {  readDataDescriptor();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
557	[BUG]  [BUGGY]  int  hasDataDescriptor  =  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  int  hasDataDescriptor  =  current.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	int  hasDataDescriptor  =  current.hasDataDescriptor;	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
558	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getShortValue()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getShortValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getShortValue()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
559	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  new  ByteArrayInputStream(current.bytesReadFromStream):  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
560	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.getFirstEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.getFirstEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  entryEncoding.getFirstEntry();	  lastStoredEntry    =    getFirstEntry();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
561	[BUG]  [BUGGY]  lastStoredEntry  =  ze.getFirstEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  ze.getFirstEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  ze.getFirstEntry();	  lastStoredEntry    =    getFirstEntry();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
562	[BUG]  [BUGGY]  current  =  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.lastStoredEntry;	  current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
563	[BUG]  [BUGGY]  CurrentEntry.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
564	[BUG]  [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  this;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  this;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  this;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
565	[BUG]  [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DELETE;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DELETE;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DELETE;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
566	[BUG]  [BUGGY]  current.hasDataDescriptor  =  lastStoredEntry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  =  lastStoredEntry.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  lastStoredEntry.getDataDescriptor();	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
567	[BUG]  [BUGGY]  lastStoredEntry  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
568	[BUG]  [BUGGY]  ReadDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadDataDescriptor(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadDataDescriptor(lastStoredEntry);	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
569	[BUG]  [BUGGY]  current  =  current.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.getLastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.getLastStoredEntry();	  current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
570	[BUG]  [BUGGY]  current  =  current.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.getCurrentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.getCurrentEntry();	  current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
571	[BUG]  [BUGGY]  inf.write('n');  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  inf.write('n');  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	inf.write('n');	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
572	[BUG]  [BUGGY]  inf.closeEntry(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  inf.closeEntry(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	inf.closeEntry(lastStoredEntry);	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
573	[BUG]  [BUGGY]  CurrentEntry  lastStoredEntry  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  lastStoredEntry  =  current.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  lastStoredEntry  =  current.getDataDescriptor();	  current    =    lastStoredEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
574	[BUG]  [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  return;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getCurrentEntry();  if(lastStoredEntry!=  null)  {  return;  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
575	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(current.getDataDescriptor());	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
576	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry);	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
577	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry();	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
578	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.lastStoredEntry.hasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.lastStoredEntry.hasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.lastStoredEntry.hasDataDescriptor();	  lastStoredEntry    =    current.hasDataDescriptor?    null    :    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
579	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.currentEntryHasUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.currentEntryHasUnicodeExtraFields();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.currentEntryHasUnicodeExtraFields();	  lastStoredEntry    =    current.hasDataDescriptor?    null    :    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
580	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.dataDescriptor);	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
581	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  currentEntryHasZip64(current.getDataDescriptor());	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntryHasZip64(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
582	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry()?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry()?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
583	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  lastStoredEntry.getKey()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  lastStoredEntry.getKey()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.getValue()?  lastStoredEntry.getKey()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
584	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntry(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntry(current.getDataDescriptor());	  lastStoredEntry    =    getLastEntry();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
585	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getShortCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getShortCurrentEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getShortCurrentEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
586	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getLastEntry()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getLastEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getLastEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
587	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntryHasShortBytes()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntryHasShortBytes()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntryHasShortBytes()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
588	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.nextEntry;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.nextEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.nextEntry;	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
589	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream()?  null  :  current.hasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream()?  null  :  current.hasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream()?  null  :  current.hasDataDescriptor();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.bytesReadFromStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
590	[BUG]  [BUGGY]  lastStoredEntry  =  current.readValueDescriptor(null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readValueDescriptor(null);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readValueDescriptor(null);	  lastStoredEntry    =    current.readValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
591	[BUG]  [BUGGY]  lastStoredEntry  =  current.readValueDescriptor(false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readValueDescriptor(false);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readValueDescriptor(false);	  lastStoredEntry    =    current.readValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
592	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDescriptor(lastStoredEntry.getValue());	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
593	[BUG]  [BUGGY]  ReadFileDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadFileDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadFileDescriptor(current.getValue());	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
594	[BUG]  [BUGGY]  readFileDescriptor(current.getValue(),  lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getValue(),  lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getValue(),  lastStoredEntry.getValue());	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
595	[BUG]  [BUGGY]  lastStoredEntry  =  hasUTF8Flag?  readFileDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  hasUTF8Flag?  readFileDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  hasUTF8Flag?  readFileDataDescriptor()  :  null;	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
596	[BUG]  [BUGGY]  lastStoredEntry  =  hasUTF8Flag?  readFileDataDescriptor()  :  current;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  hasUTF8Flag?  readFileDataDescriptor()  :  current;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  hasUTF8Flag?  readFileDataDescriptor()  :  current;	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
597	[BUG]  [BUGGY]  readFileDescriptor(current.getLastStoredEntry());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getLastStoredEntry());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getLastStoredEntry());	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
598	[BUG]  [BUGGY]  readFileDescriptor(current.getCurrentDataDescriptor());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getCurrentDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getCurrentDataDescriptor());	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
599	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  lastStoredEntry;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
600	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasCentralDirectory();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasCentralDirectory();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  lastStoredEntry.currentEntryHasCentralDirectory();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
601	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasLocalFile();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasLocalFile();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasLocalFile();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
602	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasShortCurrentDirectory();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasShortCurrentDirectory();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasShortCurrentDirectory();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
603	[BUG]  [BUGGY]  scanCurrentEntryWithDataDescriptor(current);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntryWithDataDescriptor(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntryWithDataDescriptor(current);	  scanCurrentEntry(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
604	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDataDescriptor(current.lastStoredEntry);	  readFileDataDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
605	[BUG]  [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  ze);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  ze);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.lastStoredEntry,  ze);	  readFileDataDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
606	[BUG]  [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDataDescriptor(current.lastStoredEntry,  hasUTF8Flag);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDataDescriptor(current.lastStoredEntry,  hasUTF8Flag);	  readFileDataDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
607	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getCurrentDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getCurrentDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry.getCurrentDataDescriptor()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
608	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDescriptor(current.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readFileDescriptor(current.lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDescriptor(current.lastStoredEntry);	  readFileDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
609	[BUG]  [BUGGY]  readFileDescriptor(current.lastStoredEntry,  ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.lastStoredEntry,  ze);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.lastStoredEntry,  ze);	  readFileDescriptor(current.lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
610	[BUG]  [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getDataDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
611	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  hasUTF8Flag);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(null,  hasUTF8Flag);	  lastStoredEntry    =    current.readDataDescriptor(null);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
612	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  ze);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(null,  ze);	  lastStoredEntry    =    current.readDataDescriptor(null);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
613	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(entry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(entry);	  lastStoredEntry    =    current.readDataDescriptor(null);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
614	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
615	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFrom  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFrom  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFrom	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
616	[BUG]  [BUGGY]  lastStoredEntry  =  getLastChildEntry().getDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastChildEntry().getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastChildEntry().getDataDescriptor();	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
617	[BUG]  [BUGGY]  lastStoredEntry  =  getLastChildEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastChildEntry(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastChildEntry(current.getDataDescriptor());	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
618	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()  &&  lastStoredEntry.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()  &&  lastStoredEntry.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()  &&  lastStoredEntry.hasDataDescriptor;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
619	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()  &&  lastStoredEntry.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()  &&  lastStoredEntry.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()  &&  lastStoredEntry.hasDataDescriptor);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
620	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readFileDescriptor();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readFileDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readFileDescriptor();  }	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
621	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntryCurrentEntryDataDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntryCurrentEntryDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntryCurrentEntryDataDescriptor();	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
622	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntryDataDescriptor(current.getValue());	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
623	[BUG]  [BUGGY]  lastStoredEntry  =  current.readUnicodeExtraFields();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readUnicodeExtraFields();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readUnicodeExtraFields();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
624	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFullyDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFullyDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFullyDataDescriptor();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
625	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFullyDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFullyDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFullyDescriptor();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
626	[BUG]  [BUGGY]  lastStoredEntry  =  current.readUTF();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readUTF();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readUTF();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
627	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.hasDataDescriptor;	  lastStoredEntry    =    current.hasDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
628	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.entry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.entry.getValue();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
629	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.parentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.parentEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.parentEntry.getValue();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
630	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.valueEntry.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.valueEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.valueEntry.getValue();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
631	[BUG]  [BUGGY]  CurrentEntry  lastStoredEntry  =  new  ZipArchiveEntry(current.getValue(),  diff);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  lastStoredEntry  =  new  ZipArchiveEntry(current.getValue(),  diff);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  lastStoredEntry  =  new  ZipArchiveEntry(current.getValue(),  diff);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
632	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  dataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  dataDescriptor);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
633	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  this.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  this.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  this.dataDescriptor);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
634	[BUG]  [BUGGY]  scanCurrentEntry(lastStoredEntry,  current.hasDataDescriptor,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(lastStoredEntry,  current.hasDataDescriptor,  hasUTF8Flag);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(lastStoredEntry,  current.hasDataDescriptor,  hasUTF8Flag);	  scanCurrentEntry(lastStoredEntry,    current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
635	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  current  =  new  BigInteger(current.bytesReadFromStream);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  current  =  new  BigInteger(current.bytesReadFromStream);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  current  =  new  BigInteger(current.bytesReadFromStream);  }	  current.hasDataDescriptor)    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
636	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  current  =  new  BigInteger(lastStoredEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  current  =  new  BigInteger(lastStoredEntry.getValue());  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  current  =  new  BigInteger(lastStoredEntry.getValue());  }	  current.hasDataDescriptor)    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
637	[BUG]  [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  lastStoredEntry  =  current.getValue();  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
638	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  current.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  current.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  current.getValue()  :  null;	  lastStoredEntry    =    current.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
639	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  this  :  current.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  this  :  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  this  :  current.getValue();	  lastStoredEntry    =    current.getValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
640	[BUG]  [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntry.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntry.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getDataDescriptor(),  lastStoredEntry.hasDataDescriptor);	  scanCurrentEntry(lastStoredEntry,    current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
641	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.hasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.hasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.hasDataDescriptor();	  lastStoredEntry    =    current.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
642	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasSize()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasSize()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getCurrentEntryHasSize()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
643	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor();	  CurrentEntry    <    K,    V>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
644	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.currentEntry();	  CurrentEntry    <    K,    V>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
645	[BUG]  [BUGGY]  scanCurrentEntry(current.dataDescriptor,  firstStoredEntry);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.dataDescriptor,  firstStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.dataDescriptor,  firstStoredEntry);	  scanCurrentEntry(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
646	[BUG]  [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readValueDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.lastStoredEntry.readValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.lastStoredEntry.readValueDescriptor();	  lastStoredEntry    =    current.readValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
647	[BUG]  [BUGGY]  lastStoredEntry  =  current.readValueDescriptor(lastStored);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readValueDescriptor(lastStored);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readValueDescriptor(lastStored);	  lastStoredEntry    =    current.readValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
648	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  2,  current.bytesReadFromStream);  current  =  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  2,  current.bytesReadFromStream);  current  =  null;  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  2,  current.bytesReadFromStream);  current  =  null;  }	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
649	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    1,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
650	[BUG]  [BUGGY]  current  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.hasDataDescriptor?  lastStoredEntry.getDataDescriptor()  :  null;	  current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
651	[BUG]  [BUGGY]  current  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;	  current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
652	[BUG]  [BUGGY]  current  =  current.hasDataDescriptor?  lastStoredEntry  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  current.hasDataDescriptor?  lastStoredEntry  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  current.hasDataDescriptor?  lastStoredEntry  :  null;	  current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
653	[BUG]  [BUGGY]  current  =  this.lastStoredEntry.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  this.lastStoredEntry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  this.lastStoredEntry.getValue();	  current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
654	[BUG]  [BUGGY]  CurrentEntry  current  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  current  =  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  current  =  current.getValue();	  current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
655	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
656	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  this  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  this  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  this  :  null;	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
657	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  current.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  current.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  current.getDataDescriptor()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
658	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getLastChild()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getLastChild()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getLastChild()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
659	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastSecondStoredEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastSecondStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastSecondStoredEntry();	  lastStoredEntry    =    current.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
660	[BUG]  [BUGGY]  lastStoredEntry  =  current.getLastSerialEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getLastSerialEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getLastSerialEntry();	  lastStoredEntry    =    current.getLastStoredEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
661	[BUG]  [BUGGY]  current  =  new  BigDecimalEntry(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  BigDecimalEntry(lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  BigDecimalEntry(lastStoredEntry.getValue());	  current    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
662	[BUG]  [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  current);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getDataDescriptor(),  current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getDataDescriptor(),  current);	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
663	[BUG]  [BUGGY]  scanCurrentEntry(current.getSimpleDataDescriptor());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getSimpleDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getSimpleDataDescriptor());	  scanCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
664	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  buf.setLength(1);  }	  lastStoredEntry    =    current.getDataDescriptor();    if(lastStoredEntry!=    null)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
665	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor  ||!current.allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor  ||!current.allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor  ||!current.allowStoredEntriesWithDataDescriptor;	  lastStoredEntry    =    current.hasDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
666	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor(lastStored);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor(lastStored);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor(lastStored);	  lastStoredEntry    =    current.getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
667	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readFileDataDescriptor(current.dataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDataDescriptor(current.dataDescriptor);	  readFileDataDescriptor(current.dataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
668	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  readFileDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  readFileDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  readFileDescriptor();  }  else  {  inf.close();  }	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
669	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  readFileDescriptor();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  readFileDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  readFileDescriptor();  }	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
670	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  null;  }  }	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
671	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  1,  current.bytesReadFromStream);  current  =  null;  }  }	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
672	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
673	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.getValueDescriptor();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.getValueDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  entryEncoding.getValueDescriptor();	  lastStoredEntry    =    getValueDescriptor();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
674	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  current.hasDataDescriptor);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
675	[BUG]  [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  this.entryEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  this.entryEncoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  new  ZipArchiveEntry(lastStoredEntry.getValue(),  this.entryEncoding);	  current    =    new    ZipArchiveEntry(lastStoredEntry.getValue(),    diff);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
676	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getLastChild()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getLastChild()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getLastChild()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
677	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getShortCurrentEntry()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  getShortCurrentEntry()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  getShortCurrentEntry()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
678	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(current,  hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(current,  hasDataDescriptor);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
679	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  encoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  encoding);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
680	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  ze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  ze);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(lastStoredEntry,  ze);	  lastStoredEntry    =    current.readDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
681	[BUG]  [BUGGY]  lastStoredEntry  =  current.next();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.next();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.next();	  lastStoredEntry    =    current.readFully();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
682	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  new  ZipArchiveEntry(current);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  new  ZipArchiveEntry(current);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getCurrentEntry()  :  new  ZipArchiveEntry(current);	  lastStoredEntry    =    current.hasDataDescriptor?    getCurrentEntry()    :    null;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
683	[BUG]  [BUGGY]  CurrentEntry  <?>  current  =  current.getDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <?>  current  =  current.getDataDescriptor(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <?>  current  =  current.getDataDescriptor(lastStoredEntry);	  CurrentEntry    <?>    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
684	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  firstEntry  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  firstEntry  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  firstEntry  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
685	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry  :  new  ByteArrayInputStream(current.bytesReadFromStream));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry  :  new  ByteArrayInputStream(current.bytesReadFromStream));  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  lastStoredEntry  :  new  ByteArrayInputStream(current.bytesReadFromStream));	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
686	[BUG]  [BUGGY]  lastStoredEntry  =  current.next()?  lastStoredEntry  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.next()?  lastStoredEntry  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.next()?  lastStoredEntry  :  null;	  lastStoredEntry    =    current.hasDataDescriptor()?    lastStoredEntry    :    null;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
687	[BUG]  [BUGGY]  scanCurrentEntry(current.getValue(),  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current.getValue(),  lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current.getValue(),  lastStoredEntry);	  scanCurrentEntry(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
688	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getKey();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getKey();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.getKey();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
689	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.fileDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.fileDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields(current.fileDescriptor);	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
690	[BUG]  [BUGGY]  lastStoredEntry.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  null;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
691	[BUG]  [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DEFAULT_SYNTHETIC;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DEFAULT_SYNTHETIC;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor  =  hasUTF8Flag?  lastStoredEntry.getDataDescriptor()  :  DEFAULT_SYNTHETIC;	  current.hasDataDescriptor    =    hasUTF8Flag?    lastStoredEntry.getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
692	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  null  :  current.lastStoredEntry;	  lastStoredEntry    =    null;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
693	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor()?  null  :  current.lastStoredEntry;	  lastStoredEntry    =    null;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
694	[BUG]  [BUGGY]  lastStoredEntry  =  current.readBigInteger();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readBigInteger();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readBigInteger();	  lastStoredEntry    =    current.readShortDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
695	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  current  =  new  ZipArchiveEntry(lastStoredEntry);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  current  =  new  ZipArchiveEntry(lastStoredEntry);  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  current  =  new  ZipArchiveEntry(lastStoredEntry);  }	  current.hasDataDescriptor)    {    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
696	[BUG]  [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getFullDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.hasDataDescriptor?  getFullDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.hasDataDescriptor?  getFullDataDescriptor()  :  null;	  lastStoredEntry    =    current.hasDataDescriptor?    getDataDescriptor()    :    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
697	[BUG]  [BUGGY]  lastStoredEntry  =  readFileDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readFileDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readFileDescriptor(current.getValue());	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
698	[BUG]  [BUGGY]  writeFileDescriptor(current.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  writeFileDescriptor(current.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	writeFileDescriptor(current.getValue());	  readFileDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
699	[BUG]  [BUGGY]  current.hasDataDescriptor(lastStoredEntry.getName()))  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor(lastStoredEntry.getName()))  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor(lastStoredEntry.getName()))  {  readDataDescriptor();  }	  current.hasDataDescriptor(lastStoredEntry.length))    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
700	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor)  {  if(lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  System.arraycopy(current.bytesReadFromStream,  0,  current.bytesReadFromStream);  current  =	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    else    {    System.arraycopy(current.bytesReadFromStream,    0,    current.bytesReadFromStream);    current    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
701	[BUG]  [BUGGY]  lastStoredEntry  =  inf.close();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  inf.close();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  inf.close();	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
702	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  current  =  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  current  =  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  current  =  null;	  if(lastStoredEntry    ==    null)    {    if(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
703	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  current.hasDataDescriptor)  {  readDataDescriptor();  }	  if(lastStoredEntry    ==    null)    {    current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
704	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current,  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current,  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current,  current.hasDataDescriptor);	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
705	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getKey(),  current.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getKey(),  current.hasDataDescriptor);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getKey(),  current.hasDataDescriptor);	  lastStoredEntry    =    getCurrentEntry(current.hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
706	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
707	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
708	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
709	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.entryHasDataDescriptor?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
710	[BUG]  [BUGGY]  lastStoredEntry  =  getLastChildEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastChildEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastChildEntryHasDataDescriptor();	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
711	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.getLastChildEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.getLastChildEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  entryEncoding.getLastChildEntry();	  lastStoredEntry    =    getLastChildEntry();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
712	[BUG]  [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  fileNameLen);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.getDataDescriptor(),  fileNameLen);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.getDataDescriptor(),  fileNameLen);	  readFileDescriptor(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
713	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64Fields();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64Fields();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasZip64Fields();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
714	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.entry.getValue();	  CurrentEntry    <    K,    V>    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
715	[BUG]  [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(current.getSize());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastEntryDataDescriptor(current.getSize());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastEntryDataDescriptor(current.getSize());	  lastStoredEntry    =    getLastEntryDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
716	[BUG]  [BUGGY]  lastStoredEntry  =  current.current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.current.hasDataDescriptor()?  null  :  current.bytesReadFromStream();	  lastStoredEntry    =    current.hasDataDescriptor()?    null    :    current.bytesReadFromStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
717	[BUG]  [BUGGY]  readFileDescriptor(current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  readFileDescriptor(current.fileNameLen);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	readFileDescriptor(current.fileNameLen);	  readFileDescriptor(current);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
718	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.currentEntryHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.currentEntryHasDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.currentEntryHasDataDescriptor();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
719	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  current.getDataDescriptor()  :  null;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  current.getDataDescriptor()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.hasDataDescriptor()?  current.getDataDescriptor()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
720	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.lastStoredEntry();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.lastStoredEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.lastStoredEntry();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasOutstandingBytes();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
721	[BUG]  [BUGGY]  current  =  readFileDataDescriptor(lastStoredEntry.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  readFileDataDescriptor(lastStoredEntry.getValue());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  readFileDataDescriptor(lastStoredEntry.getValue());	  readFileDataDescriptor(lastStoredEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
722	[BUG]  [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  this);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  this);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getCurrentEntry(current.getDataDescriptor(),  this);	  lastStoredEntry    =    getCurrentEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
723	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.valueEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.valueEntry();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.valueEntry();	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
724	[BUG]  [BUGGY]  ||  current.hasDataDescriptor)  {  readFileDescriptor();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ||  current.hasDataDescriptor)  {  readFileDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	||  current.hasDataDescriptor)  {  readFileDescriptor();  }	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
725	[BUG]  [BUGGY]  if(current.hasDataDescriptor  ||  hasUTF8Flag)  {  readFileDescriptor();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor  ||  hasUTF8Flag)  {  readFileDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor  ||  hasUTF8Flag)  {  readFileDescriptor();  }	  if(current.hasDataDescriptor)    {    readFileDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
726	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
727	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  current.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  current.getValue();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  lastStoredEntry  =  current.hasDataDescriptor?  lastStoredEntry.getValue()  :  current.getValue();	  CurrentEntry    <    K,    V>    lastStoredEntry    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
728	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getName()  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getName()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasUnicodeExtraFields()?  lastStoredEntry.getName()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
729	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getValue()?  lastStoredEntry.getValue()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.getValue()?  lastStoredEntry.getValue()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.getValue()?  lastStoredEntry.getValue()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasUnicodeExtraFields()?    lastStoredEntry.getValue()    :    null;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
730	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entryHasDataDescriptor?  lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entryHasDataDescriptor?  lastStoredEntry.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.entryHasDataDescriptor?  lastStoredEntry.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
731	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.lastStoredEntry.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
732	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor?  lastStoredEntry.clone()  :  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor?  lastStoredEntry.clone()  :  null;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.currentEntryHasDataDescriptor?  lastStoredEntry.clone()  :  null;	  CurrentEntry    <    K,    V>    current    =    currentEntryHasDataDescriptor?    lastStoredEntry.clone()    :    null;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
733	[BUG]  [BUGGY]  lastStoredEntry  =  getLastCurrentEntry(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  getLastCurrentEntry(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  getLastCurrentEntry(current.getDataDescriptor());	  lastStoredEntry    =    getLastCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
734	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDescriptor(lastStoredEntry);	  lastStoredEntry    =    current.readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
735	[BUG]  [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(current.getDataDescriptor());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readFileDescriptor(current.getDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readFileDescriptor(current.getDataDescriptor());	  lastStoredEntry    =    current.readFileDescriptor();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
736	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  readDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  readDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  readDataDescriptor();	  if(lastStoredEntry    ==    null)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
737	[BUG]  [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream;  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.bytesReadFromStream;  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.bytesReadFromStream;  if(lastStoredEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
738	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
739	[BUG]  [BUGGY]  while(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readDataDescriptor();  }  else  {  inf.close();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
740	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntry;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.currentEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.currentEntry;	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
741	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  current.entry;	  CurrentEntry    <    K,    V>    current    =    lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
742	[BUG]  [BUGGY]  current  =  readFileDataDescriptor(lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current  =  readFileDataDescriptor(lastStoredEntry);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current  =  readFileDataDescriptor(lastStoredEntry);	  readFileDataDescriptor(lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
743	[BUG]  [BUGGY]  lastStoredEntry  =  hasDataDescriptor?  readFileDataDescriptor()  :  current;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  hasDataDescriptor?  readFileDataDescriptor()  :  current;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  hasDataDescriptor?  readFileDataDescriptor()  :  current;	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
744	[BUG]  [BUGGY]  lastStoredEntry  =  readCurrentEntryDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  readCurrentEntryDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  readCurrentEntryDataDescriptor();	  lastStoredEntry    =    readFileDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
745	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  readCurrentEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  readCurrentEntry();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  readCurrentEntry();  }	  while(current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
746	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDirectory();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDirectory();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntryHasDataDirectory();	  CurrentEntry    <    K,    V>    current    =    currentEntryHasCentralDirectory();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
747	[BUG]  [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.getValueDescriptor();  if(lastStoredEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  lastStoredEntry    =    current.getValue();    if(lastStoredEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
748	[BUG]  [BUGGY]  ||  current.hasDataDescriptor)  {  readFileDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ||  current.hasDataDescriptor)  {  readFileDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	||  current.hasDataDescriptor)  {  readFileDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
749	[BUG]  [BUGGY]  if(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readFileDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  if(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readFileDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	if(current.hasDataDescriptor  ||  lastStoredEntry  ==  null)  {  readFileDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
750	[BUG]  [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  csize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  current.readDataDescriptor(null,  csize);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  current.readDataDescriptor(null,  csize);	  lastStoredEntry    =    current.readDataDescriptor(null);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
751	[BUG]  [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getSize());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  new  ZipArchiveEntry(current.getSize());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  new  ZipArchiveEntry(current.getSize());	  lastStoredEntry    =    new    ZipArchiveEntry(current.getDataDescriptor());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
752	[BUG]  [BUGGY]  ReadDataDescriptor(lastStoredEntry,  current.hasDataDescriptor());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  ReadDataDescriptor(lastStoredEntry,  current.hasDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	ReadDataDescriptor(lastStoredEntry,  current.hasDataDescriptor());	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
753	[BUG]  [BUGGY]  CheckState(current.hasDataDescriptor()  ||  current.hasDataDescriptor());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CheckState(current.hasDataDescriptor()  ||  current.hasDataDescriptor());  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CheckState(current.hasDataDescriptor()  ||  current.hasDataDescriptor());	  ReadDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
754	[BUG]  [BUGGY]  scanCurrentEntry(current,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  scanCurrentEntry(current,  entryEncoding);  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	scanCurrentEntry(current,  entryEncoding);	  scanCurrentEntry(current);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
755	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readCurrentEntryData();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readCurrentEntryData();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readCurrentEntryData();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
756	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  readCurrentEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  readCurrentEntry();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  readCurrentEntry();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
757	[BUG]  [BUGGY]  current.hasDataDescriptor())  {  readCurrentEntryDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor())  {  readCurrentEntryDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor())  {  readCurrentEntryDataDescriptor();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
758	[BUG]  [BUGGY]  current.hasDataDescriptor)  {  handleUnicodeExtraFields();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  current.hasDataDescriptor)  {  handleUnicodeExtraFields();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	current.hasDataDescriptor)  {  handleUnicodeExtraFields();  }	  current.hasDataDescriptor)    {    readDataDescriptor();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
759	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  else  {  inf.close();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  else  {  inf.close();  }	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
760	[BUG]  [BUGGY]  while(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  while(current.hasDataDescriptor)  {  readFileDataDescriptor();  }  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	while(current.hasDataDescriptor)  {  readFileDataDescriptor();  }	  if(current.hasDataDescriptor)    {    readFileDataDescriptor();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
761	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getSize();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getSize();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getSize();	  CurrentEntry    <    K,    V>    current    =    currentEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
762	[BUG]  [BUGGY]  LastStoredEntry  =  current.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  LastStoredEntry  =  current.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	LastStoredEntry  =  current.lastStoredEntry;	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
763	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  entryEncoding.lastStoredEntry;	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
764	[BUG]  [BUGGY]  lastStoredEntry  =  entry.lastStoredEntry;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  lastStoredEntry  =  entry.lastStoredEntry;  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	lastStoredEntry  =  entry.lastStoredEntry;	  lastStoredEntry    =    current.lastStoredEntry;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
765	[BUG]  [BUGGY]  CurrentEntry  current  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      current.bytesReadFromStream  -=  diff;  }  if  (currentEntryHasOutstandingBytes())  {  drainCurrentEntryData();  }  }  if  (lastStoredEntry  ==  null  &&  current.hasDataDescriptor)  {      [BUGGY]  CurrentEntry  current  =  current.getDataDescriptor();  [BUGGY]      }  inf.reset();  buf.clear().flip();  current  =  null;  lastStoredEntry  =  null;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  closeEntry  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	CurrentEntry  current  =  current.getDataDescriptor();	  current    =    lastStoredEntry.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
