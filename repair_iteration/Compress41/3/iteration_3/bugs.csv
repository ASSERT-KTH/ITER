bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  off  +=  SHORT_BUF  SKIP_BUF,  size;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  SKIP_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  SKIP_BUF,  size;	  off    +=    SHORT_BUF    SKIP_BUF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  off  +=  SHORT_BUF  SKIP_BUF,  size);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  SKIP_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  SKIP_BUF,  size);	  off    +=    SHORT_BUF    SKIP_BUF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  off  +=  3  *  SHORT_BUF  SKIP_BUF,  size;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  SHORT_BUF  SKIP_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  SHORT_BUF  SKIP_BUF,  size;	  off    +=    3    *    SHORT_BUF    SKIP_BUF;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
4	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  SHORT_BUF  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  SHORT_BUF  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  SHORT_BUF  SKIP_BUF;	  off    +=    3    *    SHORT_BUF    SKIP_BUF;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
5	[BUG]  [BUGGY]  off  +=  3  *  SHORT_BUF  SKIP_BUF,  size);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  SHORT_BUF  SKIP_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  SHORT_BUF  SKIP_BUF,  size);	  off    +=    3    *    SHORT_BUF    SKIP_BUF;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
6	[BUG]  [BUGGY]  off  +=  3  *  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  SKIP_BUF;	  off    +=    3    *    SHORT_BUF    SKIP_BUF;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
7	[BUG]  [BUGGY]  off  +=  2  *  SHORT_BUF  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  SHORT_BUF  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  SHORT_BUF  SKIP_BUF;	  off    +=    3    *    SHORT_BUF    SKIP_BUF;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
8	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
9	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
10	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
11	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
12	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
13	[BUG]  [BUGGY]  off  +=  2  *  SHORT_BUF,  size;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  SHORT_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  SHORT_BUF,  size;	  off    +=    2    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  off  +=  SHORT_BUF  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  -  1;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
15	[BUG]  [BUGGY]  off  +=  cSize  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  -  1;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
16	[BUG]  [BUGGY]  off  +=  WORD_BUF  -  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  -  2;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  -  2;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
17	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  1;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  off  +=  WORD_BUF  -  3;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  -  3;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  -  3;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
19	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
20	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
21	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
22	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(cSize,  off));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(cSize,  off));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(cSize,  off));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
23	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
24	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(RECORD_BUF,  off));  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(RECORD_BUF,  off));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(RECORD_BUF,  off));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
25	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  2;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  2;	  off    +=    WORD_BUF    *    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
26	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  2  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  2  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  2  -  1;	  off    +=    WORD_BUF    *    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
27	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  2  cSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  2  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  2  cSize;	  off    +=    WORD_BUF    *    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
28	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  2  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  2  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  2  SKIP_BUF;	  off    +=    WORD_BUF    *    2;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
29	[BUG]  [BUGGY]  off  +=  WORD  *  cSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD  *  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD  *  cSize;	  off    +=    4    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
30	[BUG]  [BUGGY]  off  +=  4  *  cSize,  size;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  4  *  cSize,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  cSize,  size;	  off    +=    4    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
31	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  WORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  WORD);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(LFH_BUF,  off  +  WORD);	  cSize    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
32	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(LFH_BUF,  off  +  1);	  cSize    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
33	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(FH_BUF,  off  +  WORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  ZipLong.getValue(FH_BUF,  off  +  WORD);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(FH_BUF,  off  +  WORD);	  cSize    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
34	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  WORD_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(LFH_BUF,  off  +  WORD_BUF);	  cSize    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
35	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off)+  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off)+  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(LFH_BUF,  off)+  1;	  cSize    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
36	[BUG]  [BUGGY]  off  +=  2  *  cSize,  size;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  cSize,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  cSize,  size;	  off    +=    2    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  off  +=  2  *  cSize.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  cSize.length;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  cSize.length;	  off    +=    2    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  cSize);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  cSize);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  cSize);  off  +=  WORD;	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
39	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
40	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValue(LFH_BUF,  off);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValue(LFH_BUF,  off);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getValue(LFH_BUF,  off);  off  +=  WORD;	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
41	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
42	[BUG]  [BUGGY]  off  +=  10L  *  size;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10L  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10L  *  size;	  off    +=    10L    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
43	[BUG]  [BUGGY]  off  +=  10L  *  cSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10L  *  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10L  *  cSize;	  off    +=    10L    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
44	[BUG]  [BUGGY]  off  +=  10L  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10L  *  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10L  *  WORD_BUF;	  off    +=    10L    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
45	[BUG]  [BUGGY]  off  +=  10L  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10L  *  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10L  *  SHORT_BUF;	  off    +=    10L    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
46	[BUG]  [BUGGY]  off  +=  10L  *  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10L  *  WORD_SIZE;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10L  *  WORD_SIZE;	  off    +=    10L    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
47	[BUG]  [BUGGY]  if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
48	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
49	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
50	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  size);  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  size);  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  size);  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
51	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
52	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  *  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  WORD_BUF;	  off    +=    WORD_BUF    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
53	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  SKIP_BUF;	  off    +=    WORD_BUF    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
54	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  SHORT_BUF,  size;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  SHORT_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  SHORT_BUF,  size;	  off    +=    WORD_BUF    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
55	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  4;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  4;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  4;	  off    +=    WORD_BUF    *    4;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
56	[BUG]  [BUGGY]  off  +=  2  *  WORD_BUF,  size;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  WORD_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  WORD_BUF,  size;	  off    +=    2    *    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  off  +=  cSize  +  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  +  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  +  SHORT_BUF;	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
58	[BUG]  [BUGGY]  off  +=  WORD_BUF  +  cSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  +  cSize;	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
59	[BUG]  [BUGGY]  off  +=  SHORT_BUF  +  cSize  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  +  cSize  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  +  cSize  +  1;	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
60	[BUG]  [BUGGY]  off  +=  SHORT_BUF  +  cSize.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  +  cSize.length;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  +  cSize.length;	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
61	[BUG]  [BUGGY]  off  +=  SHORT_BUF  +  cSize.subtract(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  +  cSize.subtract(current.entry.getValue());  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  +  cSize.subtract(current.entry.getValue());	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
62	[BUG]  [BUGGY]  off  +=  SHORT_BUF  +  cSize  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  +  cSize  +  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  +  cSize  +  WORD_BUF;	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
63	[BUG]  [BUGGY]  off  +=  WORD.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD.length;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD.length;	  off    +=    4;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
64	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  SHORT_BUF;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
65	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
66	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(CCH_BUF,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
67	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(CFH_BUF,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
68	[BUG]  [BUGGY]  off  +=  11;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  11;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  11;	  off    +=    11    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
69	[BUG]  [BUGGY]  off  +=  11  *  size;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  11  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  11  *  size;	  off    +=    11    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
70	[BUG]  [BUGGY]  off  +=  11  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  11  *  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  11  *  SHORT_BUF;	  off    +=    11    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
71	[BUG]  [BUGGY]  off  +=  11  *  cSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  11  *  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  11  *  cSize;	  off    +=    11    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
72	[BUG]  [BUGGY]  off  +=  12  *  WORD;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  12  *  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  12  *  WORD;	  off    +=    11    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
73	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  11;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  11;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  11;	  off    +=    11    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
74	[BUG]  [BUGGY]  off  +=  CRC32.getValue(current.entry,  cSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(current.entry,  cSize);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(current.entry,  cSize);	  off    +=    size;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
75	[BUG]  [BUGGY]  off  +=  CRC32.getValue(SHORT_BUF,  cSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(SHORT_BUF,  cSize);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(SHORT_BUF,  cSize);	  off    +=    size;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
76	[BUG]  [BUGGY]  off  +=  WORD_LENGTH;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_LENGTH;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_LENGTH;	  off    +=    NUMBER_LENGTH;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
77	[BUG]  [BUGGY]  off  +=  NUMBER_LENGTH  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER_LENGTH  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_LENGTH  +  1;	  off    +=    NUMBER_LENGTH;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
78	[BUG]  [BUGGY]  off  +=  NUMBER_LENGTH  +  cSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER_LENGTH  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_LENGTH  +  cSize;	  off    +=    NUMBER_LENGTH;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
79	[BUG]  [BUGGY]  off  +=  10  *  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  current.entry.getValue();  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  current.entry.getValue();	  off    +=    10    *    size;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
80	[BUG]  [BUGGY]  off  +=  10  *  size  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  size  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  size  -  1;	  off    +=    10    *    size;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
81	[BUG]  [BUGGY]  off  +=  10  *  size,  cSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  size,  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  size,  cSize;	  off    +=    10    *    size;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
82	[BUG]  [BUGGY]  off  +=  10  *  current.entry.getSize();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  current.entry.getSize();  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  current.entry.getSize();	  off    +=    10    *    size;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
83	[BUG]  [BUGGY]  off  +=  2  *  WORD_SIZE  +  cSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  WORD_SIZE  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  WORD_SIZE  +  cSize;	  off    +=    2    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  10;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  10;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  10;	  off    +=    WORD_BUF    /    3;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
85	[BUG]  [BUGGY]  off  +=  CRC32.getValue(LFH_BUF,  cSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(LFH_BUF,  cSize);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(LFH_BUF,  cSize);	  off    +=    TWO_DWORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  off  +=  CRC32.getValue(TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(TWO_DWORD_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(TWO_DWORD_BUF);	  off    +=    TWO_DWORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  off  +=  WORD_BUF,  cSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF,  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  cSize;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
88	[BUG]  [BUGGY]  off  +=  WORD_BUF,  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF,  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  size  =  new  ZipLong(LFH_BUF,  off);	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
89	[BUG]  [BUGGY]  off  +=  WORD_BUF,  size  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF,  size  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  size  -  1;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
90	[BUG]  [BUGGY]  off  +=  SHORT_BUF,  size;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF,  size;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
91	[BUG]  [BUGGY]  off  +=  WORD_BUF,  size  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF,  size  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  size  +  1;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
92	[BUG]  [BUGGY]  off  +=  WORD_BUF,  size  =  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF,  size  =  new  ZipLong(LFH_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  size  =  new  ZipLong(LFH_BUF);	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
93	[BUG]  [BUGGY]  off  +=  WORD_BUF,  cacheSize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF,  cacheSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  cacheSize;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
94	[BUG]  [BUGGY]  off  +=  10  *  WORD_BUF,  size;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  WORD_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  WORD_BUF,  size;	  off    +=    10    *    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
95	[BUG]  [BUGGY]  off  +=  SHORT_BUF  /  3;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  /  3;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  /  3;	  off    +=    SHORT_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
96	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  *  2;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  2;	  off    +=    SHORT_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
97	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  4;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  *  4;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  4;	  off    +=    SHORT_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
98	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  *  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  SKIP_BUF;	  off    +=    SHORT_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
99	[BUG]  [BUGGY]  off  +=  WORD  /  4;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD  /  4;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD  /  4;	  off    +=    WORD    *    4;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
100	[BUG]  [BUGGY]  off  +=  WORD  *  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD  *  2;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD  *  2;	  off    +=    WORD    *    4;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
101	[BUG]  [BUGGY]  off  +=  10  *  WORD_SIZE  +  cSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  WORD_SIZE  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  WORD_SIZE  +  cSize;	  off    +=    10    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
102	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off  +  1));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off  +  1));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off  +  1));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(FH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
103	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off),  cSize);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off),  cSize);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off),  cSize);  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(FH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
104	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  SHORT_BUF;	  current.entry.setCrc(ZipLong.getValue(FH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
105	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off  +  2));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off  +  2));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off  +  2));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(FH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
106	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  cSize;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  cSize;	  current.entry.setCrc(ZipLong.getValue(FH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
107	[BUG]  [BUGGY]  entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(FH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
108	[BUG]  [BUGGY]  off  +=  CRC32.getValue(cSize,  size);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(cSize,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(cSize,  size);	  off    +=    CRC32.getValue(LFH_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
109	[BUG]  [BUGGY]  off  +=  CRC32.getValue(LFH_BUF,  size  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(LFH_BUF,  size  -  1);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(LFH_BUF,  size  -  1);	  off    +=    CRC32.getValue(LFH_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
110	[BUG]  [BUGGY]  off  +=  SHORT_BUF.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF.getValue(LFH_BUF,  size);	  off    +=    CRC32.getValue(LFH_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
111	[BUG]  [BUGGY]  off  +=  CRC32.getValue(FH_BUF,  cSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(FH_BUF,  cSize);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(FH_BUF,  cSize);	  off    +=    CRC32.getValue(LFH_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
112	[BUG]  [BUGGY]  off  +=  cSize.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize.getValue(LFH_BUF,  size);	  off    +=    CRC32.getValue(LFH_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
113	[BUG]  [BUGGY]  off  +=  NUMBER  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER  +  1;	  off    +=    NUMBER;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
114	[BUG]  [BUGGY]  off  +=  NUMBER  +  cSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER  +  cSize;	  off    +=    NUMBER;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
115	[BUG]  [BUGGY]  off  +=  cSize  *  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  2;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  2;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
116	[BUG]  [BUGGY]  off  +=  cSize  *  4;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  4;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  4;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
117	[BUG]  [BUGGY]  off  +=  cSize  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  WORD_BUF;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
118	[BUG]  [BUGGY]  off  +=  cSize  *  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  1;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
119	[BUG]  [BUGGY]  off  +=  cSize  *  WORD;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  WORD;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
120	[BUG]  [BUGGY]  off  +=  cSize  *  5;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  5;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  5;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
121	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD);	  cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
122	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  1);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  1);	  cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
123	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  2);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  2);	  cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
124	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  3);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  3);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  3);	  cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
125	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  4);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  4);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  4);	  cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
126	[BUG]  [BUGGY]  off  +=  CRC32.getValue(SCRIPT_BUF,  size);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(SCRIPT_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(SCRIPT_BUF,  size);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
127	[BUG]  [BUGGY]  off  +=  SHORT_BUF.getValue(cSize,  size);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF.getValue(cSize,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF.getValue(cSize,  size);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
128	[BUG]  [BUGGY]  off  +=  CRC32.getValue(CHIP_BUF,  size);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(CHIP_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(CHIP_BUF,  size);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
129	[BUG]  [BUGGY]  off  +=  CRC32.getValue(current.entry,  size);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(current.entry,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(current.entry,  size);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
130	[BUG]  [BUGGY]  off  +=  CRC32.getValue(STANDARD_BUF,  size);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(STANDARD_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(STANDARD_BUF,  size);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
131	[BUG]  [BUGGY]  off  +=  CRC32.getValue(cSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(cSize);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(cSize);	  off    +=    cSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
132	[BUG]  [BUGGY]  off  +=  10  *  SHORT_BUF  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  SHORT_BUF  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  SHORT_BUF  SKIP_BUF;	  off    +=    10    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
133	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  size;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  size;	  off    +=    4    *    size;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
134	[BUG]  [BUGGY]  off  +=  WORD  *  size;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD  *  size;	  off    +=    4    *    size;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
135	[BUG]  [BUGGY]  off  +=  4  *  size,  cSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  4  *  size,  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  size,  cSize;	  off    +=    4    *    size;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
136	[BUG]  [BUGGY]  off  +=  NUMBER_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER_SIZE  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_SIZE  +  1;	  off    +=    NUMBER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
137	[BUG]  [BUGGY]  off  +=  NUMBER_SIZE  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER_SIZE  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_SIZE  -  1;	  off    +=    NUMBER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
138	[BUG]  [BUGGY]  off  +=  NUMBER_SIZE  +  cSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER_SIZE  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_SIZE  +  cSize;	  off    +=    NUMBER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
139	[BUG]  [BUGGY]  off  +=  2  *  size,  cSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  size,  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  size,  cSize;	  off    +=    2    *    size;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
140	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  cSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  cSize;	  off    +=    WORD_BUF    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
141	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  cSize,  size;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  cSize,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  cSize,  size;	  off    +=    WORD_BUF    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
142	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  cSize.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  cSize.length;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  cSize.length;	  off    +=    WORD_BUF    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
143	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  1);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  1);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  1);  off  +=  WORD;	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
144	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  SHORT_BUF;	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
145	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  2);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  2);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  2);  off  +=  WORD;	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
146	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  1,  size);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  1,  size);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  1,  size);  off  +=  WORD;	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
147	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD);  off  +=  WORD;	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
148	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
149	[BUG]  [BUGGY]  if(cSize!=  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(cSize!=  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(cSize!=  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
150	[BUG]  [BUGGY]  if(cSize  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(cSize  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(cSize  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
151	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
152	[BUG]  [BUGGY]  off  +=  WORD_SIZE  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_SIZE  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_SIZE  -  1;	  off    +=    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
153	[BUG]  [BUGGY]  off  +=  WORD_SIZE  +  size;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_SIZE  +  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_SIZE  +  size;	  off    +=    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
154	[BUG]  [BUGGY]  off  +=  WORD_SIZE  +  cSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_SIZE  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_SIZE  +  cSize;	  off    +=    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
155	[BUG]  [BUGGY]  off  +=  SHORT_BUF  /  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  /  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  /  WORD_BUF;	  off    +=    WORD_BUF    /    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
156	[BUG]  [BUGGY]  off  +=  cSize  /  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  /  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  /  SHORT_BUF;	  off    +=    WORD_BUF    /    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
157	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  SHORT_BUF,  size;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  SHORT_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  SHORT_BUF,  size;	  off    +=    WORD_BUF    /    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
158	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  SHORT_BUF.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  SHORT_BUF.length;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  SHORT_BUF.length;	  off    +=    WORD_BUF    /    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
159	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  SHORT_BUF,  size);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  SHORT_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  SHORT_BUF,  size);	  off    +=    WORD_BUF    /    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
160	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  *  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  1;	  off    +=    WORD_BUF    *    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
161	[BUG]  [BUGGY]  off  +=  WORD.length();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD.length();  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD.length();	  off    +=    10;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
162	[BUG]  [BUGGY]  off  +=  3  *  cSize,  size;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  cSize,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  cSize,  size;	  off    +=    3    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
163	[BUG]  [BUGGY]  off  +=  1  *  cSize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1  *  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1  *  cSize;	  off    +=    3    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
164	[BUG]  [BUGGY]  if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
165	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
166	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
167	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off  +  1));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
168	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
169	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  6;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  /  6;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  6;	  off    +=    WORD_BUF    *    6;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
170	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  5;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  5;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  5;	  off    +=    WORD_BUF    *    6;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
171	[BUG]  [BUGGY]  off  +=  10  *  cSize.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  cSize.length;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize.length;	  off    +=    10    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
172	[BUG]  [BUGGY]  off  +=  10  *  cSize,  size;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  cSize,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize,  size;	  off    +=    10    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
173	[BUG]  [BUGGY]  off  +=  10  *  cSize.longValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  cSize.longValue();  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize.longValue();	  off    +=    10    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
174	[BUG]  [BUGGY]  off  +=  4  *  SHORT_BUF  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  4  *  SHORT_BUF  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  SHORT_BUF  SKIP_BUF;	  off    +=    4    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
175	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(WORD_BUF,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
176	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(0,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(0,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(0,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
177	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(4,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(4,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(4,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
178	[BUG]  [BUGGY]  off  +=  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1;	  off    +=    1    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
179	[BUG]  [BUGGY]  off  +=  1L  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1L  *  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1L  *  SHORT_BUF;	  off    +=    1    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
180	[BUG]  [BUGGY]  off  +=  1  *  SHORT_BUF  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1  *  SHORT_BUF  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1  *  SHORT_BUF  SKIP_BUF;	  off    +=    1    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
181	[BUG]  [BUGGY]  off  +=  1  /  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1  /  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1  /  SHORT_BUF;	  off    +=    1    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
182	[BUG]  [BUGGY]  off  +=  LAST_BUF  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  LAST_BUF  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  LAST_BUF  -  1;	  off    +=    LAST_BUF;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
183	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
184	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
185	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(0,  off));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(0,  off));  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(0,  off));	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
186	[BUG]  [BUGGY]  off  +=  cSize  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  +  1;	  off    +=    cSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
187	[BUG]  [BUGGY]  off  +=  cSize  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  +  2;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  +  2;	  off    +=    cSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
188	[BUG]  [BUGGY]  off  +=  cSize  *  size;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  size;	  off    +=    cSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
189	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(FH_BUF,  off  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  ZipLong.getValue(FH_BUF,  off  +  WORD_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(FH_BUF,  off  +  WORD_BUF);	  cSize    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
190	[BUG]  [BUGGY]  off  +=  10  /  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  /  WORD_SIZE;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  /  WORD_SIZE;	  off    +=    10    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
191	[BUG]  [BUGGY]  off  +=  2  *  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  SKIP_BUF;	  off    +=    2    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
192	[BUG]  [BUGGY]  off  +=  CRC32.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(LFH_BUF,  off);	  off    +=    size;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
193	[BUG]  [BUGGY]  off  +=  TWO_EXP_32;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  TWO_EXP_32;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  TWO_EXP_32;	  off    +=    size;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
194	[BUG]  [BUGGY]  off  +=  2  /  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  /  WORD_SIZE;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  /  WORD_SIZE;	  off    +=    2    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
195	[BUG]  [BUGGY]  off  +=  3  *  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  WORD_SIZE;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  WORD_SIZE;	  off    +=    2    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
196	[BUG]  [BUGGY]  off  +=  10  *  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  SKIP_BUF;	  off    +=    10    *    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
197	[BUG]  [BUGGY]  off  +=  SHORT_BUF  +  TWO_DWORD_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  +  TWO_DWORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  +  TWO_DWORD_BUF;	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
198	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
199	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  size  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
200	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
201	[BUG]  [BUGGY]  off  +=  10  *  cSize  +  File.separator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  cSize  +  File.separator;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize  +  File.separator;	  off    +=    10    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
202	[BUG]  [BUGGY]  off  +=  10  *  cSize  +  File.separatorChar;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  cSize  +  File.separatorChar;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize  +  File.separatorChar;	  off    +=    10    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
203	[BUG]  [BUGGY]  off  +=  10  *  cSize  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  cSize  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize  +  1;	  off    +=    10    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
204	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  10;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  *  10;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  10;	  off    +=    WORD_BUF    *    10;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
205	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  8;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  8;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  8;	  off    +=    WORD_BUF    *    10;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
206	[BUG]  [BUGGY]  off  +=  SKIP_BUF  /  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SKIP_BUF  /  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SKIP_BUF  /  SHORT_BUF;	  off    +=    WORD_BUF    /    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
207	[BUG]  [BUGGY]  off  +=  size  /  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  size  /  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  size  /  SHORT_BUF;	  off    +=    WORD_BUF    /    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
208	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(SHORT_BUF,  off));  off  +=  SHORT_BUF;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
209	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD_BUF;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
210	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));  off  +=  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));  off  +=  SHORT_BUF;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
211	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(CHIP_BUF,  off));  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(CHIP_BUF,  off));  off  +=  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(CHIP_BUF,  off));  off  +=  SHORT_BUF;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
212	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(0,  off));  off  +=  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(0,  off));  off  +=  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(0,  off));  off  +=  WORD_BUF;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
213	[BUG]  [BUGGY]  off  +=  NON_SHORT_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NON_SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NON_SHORT_BUF;	  off    +=    TWO_DWORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
214	[BUG]  [BUGGY]  off  +=  2  *  size  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  size  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  size  -  1;	  off    +=    2    *    size;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
215	[BUG]  [BUGGY]  off  +=  10  *  sigSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  sigSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  sigSize;	  off    +=    10    *    size;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
216	[BUG]  [BUGGY]  off  +=  2  *  cSize  +  File.separator;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  cSize  +  File.separator;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  cSize  +  File.separator;	  off    +=    2    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
217	[BUG]  [BUGGY]  off  +=  2  *  cSize  +  File.separatorChar;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  cSize  +  File.separatorChar;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  cSize  +  File.separatorChar;	  off    +=    2    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
218	[BUG]  [BUGGY]  off  +=  8  *  WORD;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  8  *  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  8  *  WORD;	  off    +=    11    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
219	[BUG]  [BUGGY]  off  +=  CRC32.getValue(SHORT_BUF,  size  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(SHORT_BUF,  size  -  1);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(SHORT_BUF,  size  -  1);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
220	[BUG]  [BUGGY]  off  +=  4  *  size  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  4  *  size  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  size  -  1;	  off    +=    4    *    size;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
221	[BUG]  [BUGGY]  off  +=  BYTE_LEN  *  size;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  BYTE_LEN  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  BYTE_LEN  *  size;	  off    +=    4    *    size;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
222	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
223	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setSize(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
224	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD_BUF;  cSize  =  new  ZipLong(LFH_BUF,  off);	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
225	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(CHIP_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(CHIP_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(CHIP_BUF,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(FH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
226	[BUG]  [BUGGY]  off  +=  cSize  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  SHORT_BUF;	  off    +=    WORD_BUF    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
227	[BUG]  [BUGGY]  off  +=  SKIP_BUF  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SKIP_BUF  *  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SKIP_BUF  *  SHORT_BUF;	  off    +=    WORD_BUF    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
228	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD_BUF;	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
229	[BUG]  [BUGGY]  if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
230	[BUG]  [BUGGY]  if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
231	[BUG]  [BUGGY]  if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.entry!=  null)  {  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD	  cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
232	[BUG]  [BUGGY]  off  +=  cSize  /  3;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  /  3;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  /  3;	  off    +=    WORD_BUF    /    3;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
233	[BUG]  [BUGGY]  off  +=  3  *  sigSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  sigSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  sigSize;	  off    +=    3    *    size;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
234	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
235	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
236	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
237	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  size  +=  WORD;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  size  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off),  size  +=  WORD;	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
238	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(cSize,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(cSize,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(cSize,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
239	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(SCRIPT_BUF,  off));  off  +=  WORD;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
240	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  cSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  *  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  cSize;	  off    +=    WORD_BUF    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
241	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  WORD_BUF);	  cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
242	[BUG]  [BUGGY]  off  +=  SKIP_BUF,  size;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SKIP_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SKIP_BUF,  size;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
243	[BUG]  [BUGGY]  off  +=  cSize,  size;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize,  size;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
244	[BUG]  [BUGGY]  off  +=  TWO_DWORD_BUF,  size;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  TWO_DWORD_BUF,  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  TWO_DWORD_BUF,  size;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
245	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
246	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.hasDataDescriptor)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
247	[BUG]  [BUGGY]  off  +=  TWO_DWORD_BUF  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  TWO_DWORD_BUF  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  TWO_DWORD_BUF  -  1;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
248	[BUG]  [BUGGY]  off  +=  SKIP_BUF  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SKIP_BUF  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SKIP_BUF  -  1;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
249	[BUG]  [BUGGY]  off  +=  NUMBER_BUF  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER_BUF  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_BUF  -  1;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
250	[BUG]  [BUGGY]  off  +=  1  *  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1  *  SKIP_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1  *  SKIP_BUF;	  off    +=    1    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
251	[BUG]  [BUGGY]  off  +=  1  *  size;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1  *  size;	  off    +=    1    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
252	[BUG]  [BUGGY]  off  +=  10  *  SHORT_BUF  +  cSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  SHORT_BUF  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  SHORT_BUF  +  cSize;	  off    +=    10    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
253	[BUG]  [BUGGY]  off  +=  TWO_DWORD_BUF  *  3;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  TWO_DWORD_BUF  *  3;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  TWO_DWORD_BUF  *  3;	  off    +=    SHORT_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
254	[BUG]  [BUGGY]  off  +=  SKIP_BUF  *  3;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SKIP_BUF  *  3;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SKIP_BUF  *  3;	  off    +=    SHORT_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
255	[BUG]  [BUGGY]  off  +=  cSize  *  3L;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  3L;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  3L;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
256	[BUG]  [BUGGY]  off  +=  cSize  *  8;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  8;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  8;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
257	[BUG]  [BUGGY]  off  +=  cSize  *  6;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  6;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  6;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
258	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  6;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  *  6;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  6;	  off    +=    WORD_BUF    *    6;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
259	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  6  +  cSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  6  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  6  +  cSize;	  off    +=    WORD_BUF    *    6;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
260	[BUG]  [BUGGY]  off  +=  4  *  cSize  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  4  *  cSize  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  cSize  +  1;	  off    +=    4    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
261	[BUG]  [BUGGY]  off  +=  WORD.length  *  size;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD.length  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD.length  *  size;	  off    +=    4    *    size;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
262	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  4  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  4  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  4  -  1;	  off    +=    WORD_BUF    *    4;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
263	[BUG]  [BUGGY]  if(current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
264	[BUG]  [BUGGY]  if(cSize  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(cSize  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(cSize  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
265	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.entry  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
266	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
267	[BUG]  [BUGGY]  off  +=  10  *  cSize  +  ZipLong.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  cSize  +  ZipLong.getValue(LFH_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize  +  ZipLong.getValue(LFH_BUF);	  off    +=    10    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
268	[BUG]  [BUGGY]  off  +=  10  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  10  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);	  off    +=    10    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
269	[BUG]  [BUGGY]  off  +=  cSize  *  10;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  10;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  10;	  off    +=    cSize    *    3;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
270	[BUG]  [BUGGY]  off  +=  WORD_BUF.length  *  4;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF.length  *  4;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF.length  *  4;	  off    +=    WORD    *    4;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
271	[BUG]  [BUGGY]  if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
272	[BUG]  [BUGGY]  off  +=  3  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  WORD_BUF;	  off    +=    2    *    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
273	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(cSize,  off));  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(cSize,  off));  off  +=  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(cSize,  off));  off  +=  SHORT_BUF;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
274	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(RECORD_BUF,  off));  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  current.entry.setCrc(ZipLong.getValue(RECORD_BUF,  off));  off  +=  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(RECORD_BUF,  off));  off  +=  SHORT_BUF;	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
275	[BUG]  [BUGGY]  off  +=  WORD_BUF.length  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF.length  *  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF.length  *  SHORT_BUF;	  off    +=    4    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
276	[BUG]  [BUGGY]  off  +=  1,  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1,  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1,  size  =  new  ZipLong(LFH_BUF,  off);	  off    +=    1    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
277	[BUG]  [BUGGY]  off  +=  11  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  11  *  WORD_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  11  *  WORD_BUF;	  off    +=    10    *    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
278	[BUG]  [BUGGY]  off  +=  WORD_BUF  -  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  -  SHORT_BUF;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  -  SHORT_BUF;	  off    +=    WORD_BUF    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
279	[BUG]  [BUGGY]  entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
280	[BUG]  [BUGGY]  owner.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  owner.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	owner.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;	  if(current.entry!=    null)    {    current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
281	[BUG]  [BUGGY]  if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
282	[BUG]  [BUGGY]  off  +=  2  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);	  off    +=    2    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
283	[BUG]  [BUGGY]  off  +=  2  *  cSize  +  ZipLong.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  cSize  +  ZipLong.getValue(LFH_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  cSize  +  ZipLong.getValue(LFH_BUF);	  off    +=    2    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
284	[BUG]  [BUGGY]  off  +=  1  *  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  1  *  WORD_SIZE;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1  *  WORD_SIZE;	  off    +=    2    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
285	[BUG]  [BUGGY]  off  +=  WORD_SIZE  *  size;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_SIZE  *  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_SIZE  *  size;	  off    +=    2    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
286	[BUG]  [BUGGY]  off  +=  3  *  cSize  +  ZipLong.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  cSize  +  ZipLong.getValue(LFH_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  cSize  +  ZipLong.getValue(LFH_BUF);	  off    +=    3    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
287	[BUG]  [BUGGY]  off  +=  3  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  3  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);	  off    +=    3    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
288	[BUG]  [BUGGY]  off  +=  NUMBER_LENGTH  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER_LENGTH  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_LENGTH  -  1;	  off    +=    NUMBER_LENGTH;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
289	[BUG]  [BUGGY]  off  +=  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  +  ZipLong.getValue(LFH_BUF,  size);	  off    +=    cSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
290	[BUG]  [BUGGY]  off  +=  cSize  *  ZipLong.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  ZipLong.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  ZipLong.getValue(LFH_BUF,  size);	  off    +=    cSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
291	[BUG]  [BUGGY]  off  +=  cSize  *  ZipLong.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  *  ZipLong.getValue(LFH_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  ZipLong.getValue(LFH_BUF);	  off    +=    cSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
292	[BUG]  [BUGGY]  off  +=  cSize  +  ZipLong.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  cSize  +  ZipLong.getValue(LFH_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  +  ZipLong.getValue(LFH_BUF);	  off    +=    cSize;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
293	[BUG]  [BUGGY]  off  +=  ZipLong.getValue(SHORT_BUF,  size);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  ZipLong.getValue(SHORT_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  ZipLong.getValue(SHORT_BUF,  size);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
294	[BUG]  [BUGGY]  off  +=  CRC32.getValue(SC_SIZE,  size);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(SC_SIZE,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(SC_SIZE,  size);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
295	[BUG]  [BUGGY]  off  +=  CRC32.getValue(sHORT_BUF,  size);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  CRC32.getValue(sHORT_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(sHORT_BUF,  size);	  off    +=    CRC32.getValue(SHORT_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
296	[BUG]  [BUGGY]  off  +=  WORD_BUF.length  /  3;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF.length  /  3;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF.length  /  3;	  off    +=    WORD_BUF    /    3;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
297	[BUG]  [BUGGY]  off  +=  SHORT_BUF  -  3;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  -  3;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  -  3;	  off    +=    SHORT_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
298	[BUG]  [BUGGY]  off  +=  NUMBER  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  NUMBER  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER  -  1;	  off    +=    NUMBER;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
299	[BUG]  [BUGGY]  off  +=  ZipLong.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  ZipLong.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  ZipLong.getValue(LFH_BUF,  size);	  off    +=    CRC32.getValue(LFH_BUF,    size);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
300	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  2);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(LFH_BUF,  off  +  2);	  cSize    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
301	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  1,  size);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off  +  1,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(LFH_BUF,  off  +  1,  size);	  cSize    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
302	[BUG]  [BUGGY]  off  +=  11  *  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  11  *  WORD_SIZE;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  11  *  WORD_SIZE;	  off    +=    10    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
303	[BUG]  [BUGGY]  off  +=  8  *  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  8  *  WORD_SIZE;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  8  *  WORD_SIZE;	  off    +=    10    *    WORD_SIZE;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
304	[BUG]  [BUGGY]  off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF,  off);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF,  off);	  off    +=    2    *    size;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
305	[BUG]  [BUGGY]  off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF);	  off    +=    2    *    size;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
306	[BUG]  [BUGGY]  off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF,  cSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF,  cSize);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  size  +  ZipLong.getValue(LFH_BUF,  cSize);	  off    +=    2    *    size;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
307	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  cSize  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  cSize  +  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  cSize  +  1;	  off    +=    WORD_BUF    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
308	[BUG]  [BUGGY]  off  +=  size  *  cSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  size  *  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  size  *  cSize;	  off    +=    WORD_BUF    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
309	[BUG]  [BUGGY]  off  +=  4  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  4  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  cSize  +  ZipLong.getValue(LFH_BUF,  size);	  off    +=    4    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
310	[BUG]  [BUGGY]  off  +=  4  *  cSize  +  ZipLong.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  4  *  cSize  +  ZipLong.getValue(LFH_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  cSize  +  ZipLong.getValue(LFH_BUF);	  off    +=    4    *    cSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
311	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  SHORT_BUF);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  SHORT_BUF);	  cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
312	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  1,  size);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off  +  1,  size);  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off  +  1,  size);	  cSize    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
313	[BUG]  [BUGGY]  off  +=  WORD_BUF,  extraData;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF,  extraData;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  extraData;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
314	[BUG]  [BUGGY]  off  +=  WORD_BUF,  extraData.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF,  extraData.length;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  extraData.length;	  off    +=    WORD_BUF,    size;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
315	[BUG]  [BUGGY]  off  +=  size  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  size  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  size  -  1;	  off    +=    WORD_BUF    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
316	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  6  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  WORD_BUF  *  6  -  1;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  6  -  1;	  off    +=    WORD_BUF    *    6;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
317	[BUG]  [BUGGY]  off  +=  SHORT_BUF  +  cSize  +  size;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  SHORT_BUF  +  cSize  +  size;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  +  cSize  +  size;	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
318	[BUG]  [BUGGY]  off  +=  TWO_DWORD_BUF  +  cSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  off  +=  TWO_DWORD_BUF  +  cSize;  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  TWO_DWORD_BUF  +  cSize;	  off    +=    SHORT_BUF    +    cSize;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
319	[BUG]  [BUGGY]  if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
320	[BUG]  [BUGGY]  if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
321	[BUG]  [BUGGY]  if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }  else  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {      [BUGGY]  if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }  else  {  [BUGGY]      }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(cSize  ==  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  }  else  {	  current.entry.setCrc(ZipLong.getValue(LFH_BUF,    off));    off    +=    WORD;    size    =    new    ZipLong(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
