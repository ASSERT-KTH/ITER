bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  off  +=  3;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  3;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  WORD;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  off  +=  2  *  WORD;  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  2  *  WORD;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  WORD;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  off  +=  4  *  WORD;  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  4  *  WORD;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  WORD;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  off  +=  WORD_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  WORD_BUF;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  off  +=  3  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  3  *  SHORT_BUF;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  SHORT_BUF;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  off  +=  2;  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  2;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]    [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	  	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  off  +=  10  *  WORD;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  10  *  WORD;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  WORD;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  3;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  WORD_BUF  *  3;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  3;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {  [BUGGY]  off  +=  SHORT_BUF;  [BUGGY]  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF;	off  +=  3  *  WORD;  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
