bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  off  +=  2  *  size;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  2  *  size;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  size;	  off    +=    2    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  off  +=  2  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  2  *  SHORT_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  SHORT_BUF;	  off    +=    2    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  off  +=  2  *  cSize;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  2  *  cSize;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  cSize;	  off    +=    2    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  off  +=  2  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  2  *  WORD_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  WORD_BUF;	  off    +=    2    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  off  +=  2  *  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  2  *  WORD_SIZE;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  2  *  WORD_SIZE;	  off    +=    2    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  off  +=  cSize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  cSize;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize;	  off    +=    3;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  off  +=  NUMBER_SIZE;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  NUMBER_SIZE;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_SIZE;	  off    +=    3;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  off  +=  SHORT_BUF  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  SHORT_BUF  SKIP_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  SKIP_BUF;	  off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  off  +=  TWO_DWORD_BUF;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  TWO_DWORD_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  TWO_DWORD_BUF;	  off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  off  +=  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  SKIP_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SKIP_BUF;	  off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  off  +=  10;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  10;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  off  +=  10  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  10  *  SHORT_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  SHORT_BUF;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  off  +=  10  *  cSize;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  10  *  cSize;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  cSize;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  off  +=  10  *  size;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  10  *  size;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  size;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  off  +=  10  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  10  *  WORD_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  WORD_BUF;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  off  +=  10  *  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  10  *  WORD_SIZE;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10  *  WORD_SIZE;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  *  SHORT_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  SHORT_BUF;	  off    +=    3    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  off  +=  3  *  size;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  3  *  size;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  size;	  off    +=    3    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  off  +=  3  *  SHORT_BUF  SKIP_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  3  *  SHORT_BUF  SKIP_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  SHORT_BUF  SKIP_BUF;	  off    +=    3    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  off  +=  3  *  cSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  3  *  cSize;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  3  *  cSize;	  off    +=    3    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  off  +=  WORD_BUF  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  -  1;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  -  1;	  off    +=    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  off  +=  WORD_BUF,  size;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF,  size;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF,  size;	  off    +=    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  off  +=  WORD_SIZE;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_SIZE;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_SIZE;	  off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  off  +=  CRC32.getValue(LFH_BUF,  size);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  CRC32.getValue(LFH_BUF,  size);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(LFH_BUF,  size);	  off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  off  +=  CRC32.getValue(SHORT_BUF,  size);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  CRC32.getValue(SHORT_BUF,  size);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  CRC32.getValue(SHORT_BUF,  size);	  off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  SHORT_BUF;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
33	[BUG]  [BUGGY]  off  +=  4;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  4;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4;	  off    +=    4    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  off  +=  4  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  4  *  SHORT_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  SHORT_BUF;	  off    +=    4    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  off  +=  4  *  size;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  4  *  size;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  size;	  off    +=    4    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  off  +=  WORD  *  4;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD  *  4;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD  *  4;	  off    +=    4    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  off  +=  4  *  cSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  4  *  cSize;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  4  *  cSize;	  off    +=    4    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  4;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  *  4;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  4;	  off    +=    4    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  3;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  /  3;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  3;	  off    +=    WORD_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  2;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  *  2;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  2;	  off    +=    WORD_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  cSize;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  *  cSize;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  cSize;	  off    +=    WORD_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  *  1;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  1;	  off    +=    WORD_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  off  +=  size;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  size;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  size;	  off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  off  +=  LAST_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  LAST_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  LAST_BUF;	  off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  off  +=  NUMBER_LENGTH;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  NUMBER_LENGTH;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER_LENGTH;	  off    +=    3;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  off  +=  10L  *  WORD;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  10L  *  WORD;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  10L  *  WORD;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  off  +=  SHORT_BUF  *  3;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  SHORT_BUF  *  3;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  *  3;	  off    +=    WORD_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  off  +=  cSize  *  3;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  cSize  *  3;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  cSize  *  3;	  off    +=    WORD_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  6;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  *  6;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  6;	  off    +=    WORD_BUF    *    3;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  cSize  =  new  ZipLong(LFH_BUF,  off);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  new  ZipLong(LFH_BUF,  off);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	current.entry.setCrc(ZipLong.getValue(FH_BUF,  off));  off  +=  WORD;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  off  +=  SHORT_BUF  +  cSize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  SHORT_BUF  +  cSize;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  SHORT_BUF  +  cSize;	  off    +=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  off  +=  WORD_BUF  *  10;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  *  10;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  *  10;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  off  +=  11  *  WORD;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  11  *  WORD;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  11  *  WORD;	  off    +=    10    *    WORD;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
55	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	if(current.entry!=  null)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  cSize  =  ZipLong.getValue(LFH_BUF,  off);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	cSize  =  ZipLong.getValue(LFH_BUF,  off);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  off  +=  NUMBER;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  NUMBER;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  NUMBER;	  off    +=    WORD;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
59	[BUG]  [BUGGY]  off  +=  WORD_BUF  /  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  WORD_BUF  /  SHORT_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  WORD_BUF  /  SHORT_BUF;	  off    +=    3    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  off  +=  1  *  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (!current.hasDataDescriptor)  {  current.entry.setCrc(ZipLong.getValue(LFH_BUF,  off));  off  +=  WORD;  cSize  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  size  =  new  ZipLong(LFH_BUF,  off);  off  +=  WORD;  }  else  {    [BUGGY]  off  +=  1  *  SHORT_BUF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	off  +=  1  *  SHORT_BUF;	  off    +=    3    *    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
