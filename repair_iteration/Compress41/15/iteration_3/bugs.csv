bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  0));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD,  0));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD,  WORD));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
9	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
10	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
11	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
12	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  WORD));	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
13	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
14	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD,  TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD,  TWO_EXP_32));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(WORD,  TWO_EXP_32));	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
15	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_16,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_16,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_EXP_16,  WORD));	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
16	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_2,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_2,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_EXP_2,  WORD));	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
17	[BUG]  [BUGGY]  reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_NAME));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
18	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME),  potentialSig);	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_NAME));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
19	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
20	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
21	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD,  WORD));	  current.entry.setPadding(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
22	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(WORD,  WORD));	  current.entry.setPadding(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
23	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
24	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(WORD,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
25	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(WORD,  WORD_BUF));	  current.entry.setPosition(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
26	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
27	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
28	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  TWO_WORD_BUF));  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  TWO_WORD_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  TWO_WORD_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
29	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
30	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
31	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
32	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
33	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(WORD,  0));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
34	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
38	[BUG]  [BUGGY]  pushback(ZipLong.CFH_SIG,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.CFH_SIG,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.CFH_SIG,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
39	[BUG]  [BUGGY]  pushback(ZipLong.DEFAULT_WORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.DEFAULT_WORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.DEFAULT_WORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
40	[BUG]  [BUGGY]  pushback(ZipLong.WORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.WORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.WORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
41	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD));	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
42	[BUG]  [BUGGY]  pushback(ZipLong.DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.DWORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
43	[BUG]  [BUGGY]  reader.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WSORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
44	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  2);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  2);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
45	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  10);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  10);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  10);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
46	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  4);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  4);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  4);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
47	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  3);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  3);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  3);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
48	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
49	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD,  TWO_DWORD_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
50	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD,  DWORD));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
51	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
52	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD,  LFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DEPRECATED,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DEPRECATED,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DEPRECATED,  WORD));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
56	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setPosition(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
57	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
58	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
59	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
60	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
61	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
62	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
63	[BUG]  [BUGGY]  reader.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
64	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
65	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
66	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
67	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
68	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
69	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
70	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(WORD,  WORD));	  current.entry.setFileName(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
71	[BUG]  [BUGGY]  reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setFileName(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
72	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(TWO_DWORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
73	[BUG]  [BUGGY]  hopback(TWO_DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  hopback(TWO_DWORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	hopback(TWO_DWORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
74	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
75	[BUG]  [BUGGY]  rmând  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  rmând  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	rmând  pushback(TWO_DWORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
76	[BUG]  [BUGGY]  peechback(TWO_DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  peechback(TWO_DWORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	peechback(TWO_DWORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
77	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
78	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
79	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
80	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WS));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
81	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
82	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  NUMBER));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  NUMBER));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  NUMBER));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
83	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
84	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
85	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
86	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
87	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD,  WORD));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
89	[BUG]  [BUGGY]  reader.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
90	[BUG]  [BUGGY]  next.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  next.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	next.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
91	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
92	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
93	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
94	[BUG]  [BUGGY]  reader.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
95	[BUG]  [BUGGY]  next.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  next.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	next.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
96	[BUG]  [BUGGY]  reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
97	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
98	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(WORD_BUF,  WORD));	  current.entry.setFileName(ZipLong.getValue(WORD_BUF,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
99	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD,  WORD));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD,  WORD));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
100	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
101	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
102	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
103	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  0));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
104	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
105	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
106	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)-  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)-  1,  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)-  1,  potentialSig);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
107	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(WORD_BUF,  WORD));	  current.entry.setPadding(ZipLong.getValue(WORD_BUF,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
108	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_BUF,  WORD));	  current.entry.setPadding(ZipLong.getValue(WORD_BUF,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
109	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
110	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
111	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_BUF,  WORD));	  current.entry.setFileName(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
112	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_EXP_32,  WORD));	  current.entry.setFileName(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
113	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_SHORT_BUF));	  current.entry.setFileName(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
114	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DUP,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DUP,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DUP,  WORD));	  current.entry.setFileName(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
115	[BUG]  [BUGGY]  reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
116	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD,  DEFAULT_SIZE));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
118	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
119	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  pushback(TWO  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  pushback(TWO  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  pushback(TWO	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
120	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
121	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  }  else  {  pushback(TWO_  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  }  else  {  pushback(TWO_  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  }  else  {  pushback(TWO_	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
122	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
123	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
124	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  0));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
125	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WS));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
126	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
127	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
128	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
129	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
130	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
131	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  DWORD));	  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
132	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);	  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
133	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);	  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
134	[BUG]  [BUGGY]  reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
135	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  DEFAULT_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD,  DEFAULT_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
136	[BUG]  [BUGGY]  reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
137	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(WORD,  TWO_DWORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
138	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD,  WORD));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
139	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD,  DWORD));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
140	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  LFH_SIG);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
141	[BUG]  [BUGGY]  hopback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  hopback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	hopback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
142	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  WORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
143	[BUG]  [BUGGY]  rmând  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  rmând  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	rmând  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
144	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
145	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD,  TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD,  TWO_EXP_32));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(WORD,  TWO_EXP_32));	  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
146	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_2,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_2,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_EXP_2,  WORD));	  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
147	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_2));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_2));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_EXP_2));	  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
148	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_64,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_64,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_EXP_64,  WORD));	  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
149	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_WORD,  WORD));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
150	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  TWO_WORD_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  TWO_WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(WORD,  TWO_WORD_BUF));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
151	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  SHORT_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
152	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  WORD),  potentialSig);	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
153	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_LEN));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_LEN));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
154	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD,  WORD));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
155	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  DEFAULT_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  DEFAULT_SIG));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
156	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
157	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
158	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  pushback(TWO  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  pushback(TWO  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  pushback(TWO	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
159	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  pushback(  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  pushback(  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  pushback(	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
160	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SKIP_BUF));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
161	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  pushback(TWO_  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  pushback(TWO_  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  pushback(TWO_	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SKIP_BUF));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
162	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
163	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
164	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
165	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
166	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  pushback(  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  pushback(  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  pushback(	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
167	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
168	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_BUF,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
169	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(WORD_BUF,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
170	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_BORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_BORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_BORD_BUF,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
171	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
172	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
173	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
174	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  DWORD));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
175	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
176	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
177	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
178	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
179	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
180	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
181	[BUG]  [BUGGY]  reader.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
182	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_NAME));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_NAME));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_NAME));	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
183	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
184	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
185	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
186	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
187	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
188	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
189	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
190	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
191	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  }  else  {  pushback(TWO_  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  }  else  {  pushback(TWO_  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  }  else  {  pushback(TWO_	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
192	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
193	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  0));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
194	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
195	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
196	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
197	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
198	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(WORD,  DWORD));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
199	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
200	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
201	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
202	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
203	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
204	[BUG]  [BUGGY]  reader.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD_BUF,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
205	[BUG]  [BUGGY]  entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
206	[BUG]  [BUGGY]  next.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  next.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	next.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
207	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
208	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.LFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
209	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
210	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD,  0));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
211	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
212	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
213	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  pushback(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  pushback(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  pushback(TWO_DWORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
214	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD,  WORD));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
215	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(WORD,  0));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
216	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
217	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
218	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  else  {  pushback(  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  else  {  pushback(  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  }  else  {  pushback(	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
219	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  LFH));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD,  LFH));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD,  LFH));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
220	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_BORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_BORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_BORD_BUF,  WORD));	  current.entry.setPadding(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
221	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD,  LFH_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
222	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
223	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
224	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.LFH_LEN))  {  pushback(TWO_DWORD_BUF,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
225	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
226	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    LONG_SIZE));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
227	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    LONG_SIZE));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
228	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_PADDING,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_PADDING,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_PADDING,  WORD));	  current.entry.setPadding(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
229	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_PAD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_PAD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_PAD_BUF,  WORD));	  current.entry.setPadding(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
230	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD,  WORD));	  current.entry.setPadding(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
231	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
232	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }  else  {  pushback(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }  else  {  pushback(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }  else  {  pushback(TWO_DWORD	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
233	[BUG]  [BUGGY]  entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
234	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }  else  {  pushback(TWO_  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }  else  {  pushback(TWO_  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  0));  }  else  {  pushback(TWO_	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
235	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
236	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
237	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
238	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD_BUF,  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD_BUF,  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  }  else  {  pushback(TWO_DWORD_BUF,	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
239	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
240	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
241	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
242	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
243	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  else  {  pushback(  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  else  {  pushback(  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  else  {  pushback(	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
244	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  else  {  pushback(TWO_  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  else  {  pushback(TWO_  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  }  else  {  pushback(TWO_	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
245	[BUG]  [BUGGY]  pushback(ZipLong.CFH_SIG,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.CFH_SIG,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.CFH_SIG,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
246	[BUG]  [BUGGY]  pushback(ZipLong.WORD,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.WORD,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.WORD,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
247	[BUG]  [BUGGY]  pushback(ZipLong.WORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.WORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.WORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
248	[BUG]  [BUGGY]  pushback(ZipLong.DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.DWORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.DWORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
249	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF),  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
250	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
251	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  }	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
252	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  }  else  {  pushback(TWO_  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  }  else  {  pushback(TWO_  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  }  else  {  pushback(TWO_	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
253	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
254	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
255	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  LFH_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
256	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  0));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
257	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
258	[BUG]  [BUGGY]  reader.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  reader.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	reader.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WORD));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
259	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  0));	  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
260	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
261	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1);	  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
262	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);	  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
263	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));	  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
264	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(WORD,  DEFAULT_SIZE));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
265	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
266	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
267	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
268	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
269	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
270	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIZE));	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
271	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
272	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
273	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
274	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_2,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_2,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_2,  WORD));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
275	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
276	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD_BUF,  0));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
277	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
278	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD_BUF,  LFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
279	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD,  WORD));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
280	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
281	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1000);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1000);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1000);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
282	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD,  WORD)+  1);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD,  WORD)+  1);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
283	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
284	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
285	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
286	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
287	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
288	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
289	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
290	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD_BUF,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD_BUF,  DWORD));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
291	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  SKIP_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
292	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WSORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WSORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  WSORD));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
293	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
294	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SKIP_BUF));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
295	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
296	[BUG]  [BUGGY]  pushback(ZipLong.DEFAULT_TWO_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.DEFAULT_TWO_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.DEFAULT_TWO_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
297	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  DWORD));	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
298	[BUG]  [BUGGY]  pushback(ZipLong.valueOf(WORD),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.valueOf(WORD),  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.valueOf(WORD),  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
299	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD,  SHORT_BUF));	  current.entry.setPosition(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
300	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
301	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_16,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_16,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_EXP_16,  WORD));	  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
302	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
303	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
304	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
305	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DEFAULT_SCRIPT));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DEFAULT_SCRIPT));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DEFAULT_SCRIPT));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
306	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
307	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  0));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  0));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
308	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_NAME));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_NAME));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_NAME));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
309	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_POS_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_POS_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_POS_BUF,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
310	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_HOME_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_HOME_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_HOME_BUF,  WORD));	  current.entry.setPosition(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
311	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  WS));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
312	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WS));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WS));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
313	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_2));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_2));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_EXP_2));	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
314	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
315	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
316	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  LFH_LEN));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD,  LFH_LEN));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
317	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
318	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
319	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
320	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD,  WORD));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD,  WORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
321	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(WORD,  TWO_WORD_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
322	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
323	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
324	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
325	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  0));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
326	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
327	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
328	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
329	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
330	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  NUMBER_SIZE));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  NUMBER_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  NUMBER_SIZE));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
331	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
332	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
333	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
334	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  LFH));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  LFH));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(WORD,  LFH));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
335	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(WORD,  LFH_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
336	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD,  WORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
337	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
338	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(WORD,  LFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
339	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  DWORD));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
340	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSORD));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSORD));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WSORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
341	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
342	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
343	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
344	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WS));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  WS));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
345	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WS));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
346	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DWORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
347	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD_BUF,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(WORD_BUF,  DWORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
348	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
349	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
350	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
351	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
352	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_BUF,  SHORT_BUF));	  current.entry.setPosition(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
353	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  current.entry.setPosition(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
354	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_BUF,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_BUF,  0));	  current.entry.setPosition(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
355	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
356	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
357	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(WORD,  DWORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
358	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
359	[BUG]  [BUGGY]  pushback(ZipLong.valueOf(WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.valueOf(WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.valueOf(WORD));	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
360	[BUG]  [BUGGY]  peechback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  peechback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	peechback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
361	[BUG]  [BUGGY]  pushback(ZipLong.valueOf(WORD),  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.valueOf(WORD),  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.valueOf(WORD),  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
362	[BUG]  [BUGGY]  pushback(ZipLong.valueOf(SWORD));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.valueOf(SWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.valueOf(SWORD));	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
363	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  0));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  0));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
364	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
365	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  LFH_SIG));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
366	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  0));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
367	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
368	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DEFAULT_SPACE));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DEFAULT_SPACE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DEFAULT_SPACE));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
369	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
370	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
371	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
372	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
373	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
374	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
375	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_PADDING));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_PADDING));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_PADDING));	  current.entry.setPadding(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
376	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
377	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(WORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(WORD_BUF,  WORD_BUF));	  current.entry.setPosition(ZipLong.getValue(WORD_BUF,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
378	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
379	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
380	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
381	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
382	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
383	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
384	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  NAME));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  NAME));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  NAME));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_NAME));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
385	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
386	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
387	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
388	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
389	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
390	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
391	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WS));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
392	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_BUF,  SHORT_BUF));	  current.entry.setPadding(ZipLong.getValue(WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
393	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  LONG_SIZE));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
394	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  TWO_EXP_32));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
395	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
396	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIZE));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIZE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIZE));	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
397	[BUG]  [BUGGY]  pushback(ZipLong.DEFAULT_TWO_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.DEFAULT_TWO_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.DEFAULT_TWO_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
398	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_EXP_32));	  current.entry.setFileName(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
399	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_SIZE,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_SIZE,  WORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_SIZE,  WORD));	  current.entry.setFileName(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
400	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SCRIPT));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SCRIPT));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SCRIPT));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
401	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  LFH));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  LFH));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(WORD,  LFH));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
402	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF),  potentialSig);	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
403	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  LFH_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(WORD,  LFH_BUF));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
404	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32),  WORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32),  WORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_EXP_32),  WORD);	  current.entry.setPosition(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
405	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF),  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
406	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setFileName(ZipLong.getValue(WORD));    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
407	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.set  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.set  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.set	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
408	[BUG]  [BUGGY]  pull(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pull(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pull(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
409	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(TWO_DWORD_BUF,  DWORD,  DEFAULT_SIG);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(TWO_DWORD_BUF,  DWORD,  DEFAULT_SIG);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
410	[BUG]  [BUGGY]  pomback(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pomback(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pomback(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
411	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
412	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
413	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
414	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  NUMBER));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  NUMBER));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  NUMBER));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
415	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WS));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
416	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    DWORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
417	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
418	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setPadding(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setPadding(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setPadding(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  }	  current.entry.setPadding(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
419	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setPadding(ZipLong.getValue(WORD,  WORD));  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setPadding(ZipLong.getValue(WORD,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setPadding(ZipLong.getValue(WORD,  WORD));  }	  current.entry.setPadding(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
420	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  WS));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(WORD,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(WORD,  WS));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
421	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  current.entry.set  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  current.entry.set  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  current.entry.set	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
422	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  else  {	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
423	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
424	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  TWO_WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  TWO_WORD_BUF));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,  TWO_WORD_BUF));	  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
425	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
426	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
427	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
428	[BUG]  [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry!=  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
429	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SPACE));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SPACE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SPACE));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
430	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  DEFAULT_NAME));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  DEFAULT_NAME));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD,  DEFAULT_NAME));	  current.entry.setFileName(ZipLong.getValue(TWO_DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
431	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_EXP_32),  potentialSig);	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
432	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32));	  current.entry.setPadding(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
433	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
434	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LONG));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
435	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  current.entry.set  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  current.entry.set  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  current.entry.set	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
436	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  }  else  {	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
437	[BUG]  [BUGGY]  pull(TWO_DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pull(TWO_DWORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pull(TWO_DWORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
438	[BUG]  [BUGGY]  pomback(TWO_DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pomback(TWO_DWORD_BUF,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pomback(TWO_DWORD_BUF,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
439	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  DEFAULT_SIG);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(TWO_DWORD_BUF,  WORD,  DEFAULT_SIG);	  if(potentialSig.equals(ZipLong.CFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
440	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF),  potentialSig);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF),  potentialSig);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
441	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
442	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DS));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DS));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
443	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
444	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  0));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD_BUF,  0));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
445	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(current.entry  ==  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(current.entry  ==  null)  {  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
446	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  WORD);  }  else  {  current.entry.setCompressedSize(ZipLong.getValue(TWO	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
447	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  16);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  16);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  16);	  current.entry.setTime(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
448	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SCRIPT));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SCRIPT));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SCRIPT));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
449	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
450	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
451	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  pushback(TWO_DWORD  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  pushback(TWO_DWORD  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  pushback(TWO_DWORD	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
452	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.set  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.set  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_BUF))  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  }  else  {  current.entry.set	  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
453	[BUG]  [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  BYTE_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  BYTE_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setTime(ZipLong.getValue(TWO_EXP_32,  BYTE_SIG));	  current.entry.setTime(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
454	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  WS));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(WORD,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPreferredSize(ZipLong.getValue(WORD,  WS));	  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
455	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SPACE));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SPACE));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SPACE));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
456	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  PADDING));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  PADDING));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  PADDING));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
457	[BUG]  [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,  WS));	  current.entry.setPadding(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
458	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
459	[BUG]  [BUGGY]  pushback(ZipLong.LFH_SIG,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  pushback(ZipLong.LFH_SIG,  WORD,  DWORD);  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	pushback(ZipLong.LFH_SIG,  WORD,  DWORD);	  if(potentialSig.equals(ZipLong.CFH_SIG)||    potentialSig.equals(ZipLong.LFH_SIG))    {    pushback(TWO_DWORD_BUF,    WORD,    DWORD);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
460	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,  DWORD));	  current.entry.setPosition(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
461	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG));	  current.entry.setFileName(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
462	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setFileName(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setFileName(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setFileName(ZipLong.getValue(WORD,  TWO_DWORD_BUF));  }	  current.entry.setFileName(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
463	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setFileName(ZipLong.getValue(WORD,  WORD));  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setFileName(ZipLong.getValue(WORD,  WORD));  }  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  current.entry.setFileName(ZipLong.getValue(WORD,  WORD));  }	  current.entry.setFileName(ZipLong.getValue(WORD,    TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
464	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  WS));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  WS));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setSize(ZipLong.getValue(WORD,  WS));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
465	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
466	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  NUMBER));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  NUMBER));  [BUGGY]      current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  NUMBER));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
