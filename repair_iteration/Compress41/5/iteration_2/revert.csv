projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG.equals(val)
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG.equals(val)){return
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECLARATION);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);val
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);return
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ze.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInflater();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(ZipLong.DEFAULT_SIZE);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=createInflater();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(value)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ZipLong.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(SHORT_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(ZipLong.DD_SIG);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getValue())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.descriptor)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(value)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);return
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.entry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=currentEntry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.currentEntry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.readIn();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.getEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.getInputStream(true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(zipLong.DD_BUF!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF>=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(zipLong.DD_BUF==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF!=null||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,SHORT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DD,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)&&ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)||ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,0,current.entry.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_EXP_32,WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DD,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_EXP_32,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,TWO_EXP_32,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_EXP_32,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BU
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}else{ZipLongval=newZipLong(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,ZERO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ZERO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(value)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,value)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)&&ZipLong.DD_SIG.equals(value)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null||current.entry.getCrc()==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null||current.entry.getValue()==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null||hasDataDescriptor){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null||current.entry.getCrc()!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null||current.entry.getValue()!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)&&ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(current.entry)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(val.equals(ZipLong.DD_BUF)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(value)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(zipLong.DD_BUF.equals(val)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(v)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getCrc());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getValue()+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getShortValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DEFAULT_SIG,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729reader.readFully(ZipLong.DEFAULT_SIG,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,true,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=this.createInflater();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=createInflater(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=createInflater(true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=createInflater(inputStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=createInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)&&ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(value)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(zipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(val.equals(ZipLong.DD_SIG)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(v)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(!ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(zipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(!ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729current.entry=newZipLong(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729current.entry=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong>current=newZipLong(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current=newZipLong(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntrycurrent=newZipLong(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729current.entry=newZipLong(ZipLong.SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,3);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,4);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,0,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)||ZipLong.DD_SIG.equals(current.getValue())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val),ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)||ZipLong.DD_SIG.equals(scope)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,SHORT_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STRING_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,SHORT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null||current.entry.getCrc()!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null||hasDataDescriptor){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getValue())||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadLong.DD_SIG.equals(current.entry)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.value)||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInflater().readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getOutputFile();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SKIP_BUF,WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STRING_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_DWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STRING_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(zipLong.DD_SIG==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(zipLong.DD_SIG!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG==null||!ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG==null||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG!=null||!ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInputStream().readDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInputStream().readData();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInputStream(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInputStream(true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getOutputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry.getCrc());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry.getValue()+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.descriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729reader.readDataDescriptor(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.descriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729reader.readFully(ZipLong.DD_SIG,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,true,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getCrc());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getValue()+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=entry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=inputStream.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.inputStream;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(current)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,0,current.entry.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.entry.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=newZipLong(ZipLong.getInstance());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ZipLong.getInstance(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ZipLong.getInstanceUTF8();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=currentEntry.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD.equals(val)||ZipLong.DD.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)||readFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)){readFully(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)){readFully(WRORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)&&ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)||ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(value)||ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(zipLong.DD_SIG.equals(val)||ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_BUF.startsWith(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,null);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,true,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECLARATION,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECLARATION,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECLARATION,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);current.
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry,inputStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry,ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry,buffer);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729current.entry=newZipLong(ZipLong.DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong>current=newZipLong(ZipLong.DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntrycurrent=newZipLong(ZipLong.DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current.entry=newZipLong(ZipLong.DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current=newZipLong(ZipLong.DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,ZipLong.DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,ZERO_DWORD_BUF.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,current.entry.getShortValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry.getValue(),ZipLong.DD_SIG)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry.getValue(),zipLong.DD_SIG)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry.getValue(),ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,WRITE_DWORD_BUF.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,WRITE_DWORD_BUF.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getKey(),this);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getKey(),true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(JipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WRORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729current.entry=newZipLong(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong>current=newZipLong(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntrycurrent=newZipLong(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current.entry=newZipLong(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current=newZipLong(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Entryentry=newZipLong(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ZipLong.DECEMBER.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,current.entry.getCrc());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,current.entry.getValue()+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,current.entry.getShortValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntrycurrent=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,3);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,4);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,0,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,0,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,4);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,ZipLong.DECEMBER);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(current.entry)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(current.getValue())){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_BIGINT.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SIZE.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_EXP_32.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(!ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,ZERO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,SHORT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry.getCrc());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry.getValue()+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry.getShortValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current.entry)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current.getValue())){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||val.equals(ZipLong.DD_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||!ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current.entry.getValue())){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||zipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SKIP_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(val,WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,val.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,val,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,this);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG!=null||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,0,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current,WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,ZipLong.DEFAULT_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current.getValue())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||val.equals(ZipLong.DD_SIG)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||!ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||zipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_DWORD_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_BUF,val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadLong.DD_SIG.equals(current.entry)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(ZipLong.SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(ZipLong.DECEMBER);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(ZipLong.DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,value)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(value)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val.getValue())){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val),current.entry.getValue()){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val),current.entry){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729current.entry=newZipLong(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<TWO_EXP_32,current.entry=newZipLong(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntrycurrent=newZipLong(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current=newZipLong(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<K,V>current=newZipLong(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current.entry=newZipLong(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,0,current.entry.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,10);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,0,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(JSC_WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,3);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(v)||ZipLong.DD_SIG.equals(v)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(diff)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(current)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current)||ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,current)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current)||ZipLong.DD_SIG.equals(val)){readFully(WRORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(value)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(v)||ZipLong.DD_SIG.equals(v)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF,csize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ze.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);val
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(hasDataDescriptor){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ZipLong.DEFAULT_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ZERO_LEN);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,isEnabled);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.getDataDescriptor();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.getOutputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.read();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(value)||ZipLong.DD_SIG.equals(value)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getKey())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry.getValue())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getValue())){readFully(JSC_WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getValue())){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);val
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(LFH_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(LFH_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DEFAULT_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null||isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(LFH_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DFH,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DS,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(LFH,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STRING_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=createInflater(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=createInflater(outputStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=findInflater();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DFH,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry,hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current.entry,DEFAULT_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null||!hasDataDescriptor){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BIGINT!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)||ZipLong.DD_SIG.equals(value)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInflater().getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInflater(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}else{ZipLongval=newZipLong(WRITE_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<T>current=newZipLong(TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<K,V>current=currentEntry;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<K,V>current=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<T>current=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DS,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){current.entry=newZipLong(ZipLong.DD_SIG);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong>current=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getKey(),hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){current.entry=newZipLong(SHORT_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){current.entry=newZipLong(ZipLong.DEFAULT_SIZE);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(ZipLong.DEFAULT_SIZE+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}else{ZipLongval=newZipLong(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getValue(),hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG>=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DS_SIG==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG[Delete]null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(LFH_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DD,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DS,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current.getValue())){readFully(current);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current.getValue())){readFully(current.getValue());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,current.entry.getValue(),hasDataDescriptor);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,current.entry.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(hasDataDescriptor){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);return
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,0,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,current.entry.getValue()+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,0,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(value)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(current)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)||hasDataDescriptor){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(RFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DS);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_BUF.equals(value)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current)||ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_BUF.equals(current.getValue())){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG==null||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG==null||isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_DWORD_BUF,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_DWORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(value)&&ZipLong.DD_SIG.equals(value)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ZipLong.DECEMBER);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF,STANDARD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TCH_BUF,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val),this);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readFully(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInputStream().readInt();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729writeFully(ZipLong.DEFAULT_SIG,false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,0L);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.name)||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)||ZipLong.DD_SIG.equals(current.getValue())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.descriptor)||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_BUF,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,readFully(val));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getValue())||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.name)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,val.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(DD,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(LFH_BUF,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD,fileNameLen);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DS);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD,current);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(value)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SHIFT.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(value)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(current)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_TWO_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(ZERO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=this.entry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(SCRIPT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,16);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){current.entry=newZipLong(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<TWO_EXP_32||current.entry!=null){current.entry=newZipLong(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<TWO_EXP_32||current.entry==null){current.entry=newZipLong(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,10);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current,ZERO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG==null||zipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG==null||ZipLong.DD_SIG.equals(null)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SCRIPT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(current.entry)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry.getKey())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getSize());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.descriptor)){readFully(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.descriptor)){readFully(TWO_DWORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729this.entry=newZipLong(ZipLong.DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729newZipLong(ZipLong.DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=entryEncoding.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=this.entryEncoding.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=this.ze.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,current.entry.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,true,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)){readFully(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)){readFully(TWO_DWORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=this.current.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.encoding.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.inputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF!=null){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG!=
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SCRIPT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TEMP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TEMP_SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ZERO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry,ZERO_LENGTH);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,16);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,10);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(diff)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(current.entry)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null&&current.entry.getMethod()==ZipLong.DEFAULT){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null&&current.entry.getValue()==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null&&hasDataDescriptor){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null&&current.entry.getMethod()==ZipEncoding.UTF8){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getEntryName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getEntry());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(current.entry)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val),current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SUB);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD,this);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current.entry=newZipLong(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729CurrentEntry<ZipLong,ZipLong>current=currentEntry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SCRIPT_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729newZipLong(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry,zipEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SCRIPT_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getValue())){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getValue())){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD!=
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(current,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_DWORD_BUF,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WORD_BUF,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(zipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)&&ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)&&ZipLong.DD_SIG.equals(current.getValue())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BIGINT.equals(val)||ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_BUF.equals(current.entry)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=zipEncoding.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ZipLong.createInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ZipLong.getInstance(current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SIZE.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_BIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DEFAULT_SIG,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)&&ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInputStream(in.readUTF());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=this.inputStream;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null||!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null||!current.entry.isEnabled()){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null||entryEncoding.equals(ZipLong.DD_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null||!current.entry.isDirectory()){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_DWORD_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG!=null||zipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_EXP_32,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,TWO_EXP_32,bytesReadFromStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,TWO_EXP_32,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF!=null||!ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF!=null&&ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECLARATION,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZERO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_BIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SUB.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){readFully(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SCRIPT_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInflater(inputStream);
