bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    return    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
2	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.entry.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  currentEntry.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  Inflater  inf  =  current.currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.currentEntry.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.currentEntry.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  Inflater  inf  =  current.readIn();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.readIn();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.readIn();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  Inflater  inf  =  current.getEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.getEntry();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.getEntry();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(true);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.getInputStream(true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.getInputStream(true);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  if(ZipLong.DD_BUF  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF  ==  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF  ==  null)  {	  if(ZipLong.DD_BUF!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
9	[BUG]  [BUGGY]  if(zipLong.DD_BUF!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(zipLong.DD_BUF!=  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(zipLong.DD_BUF!=  null)  {	  if(ZipLong.DD_BUF!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
10	[BUG]  [BUGGY]  if(ZipLong.DD_BUF  >=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF  >=  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF  >=  null)  {	  if(ZipLong.DD_BUF!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
11	[BUG]  [BUGGY]  if(zipLong.DD_BUF  ==  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(zipLong.DD_BUF  ==  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(zipLong.DD_BUF  ==  null)  {	  if(ZipLong.DD_BUF!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
12	[BUG]  [BUGGY]  if(ZipLong.DD_BUF!=  null  ||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF!=  null  ||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF!=  null  ||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
13	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)&&    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  readFully(SHORT_BUF,  WRITE_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SHORT_BUF,  WRITE_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  WRITE_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
15	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  SHORT_BUF,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
16	[BUG]  [BUGGY]  readFully(DD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DD,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DD,  SHORT_BUF);	  readFully(WRITE_DWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
17	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WRITE_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
18	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WRITE_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
19	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WRITE_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
20	[BUG]  [BUGGY]  ReadFully(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(SHORT_BUF);	  ReadFully(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
21	[BUG]  [BUGGY]  ReadFully(current.entry,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  WORD_BUF);	  ReadFully(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
22	[BUG]  [BUGGY]  ReadFully(WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(WRITE_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(WRITE_BUF);	  ReadFully(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
23	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECEMBER);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER);	  ReadFully(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
24	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  0,  current.entry.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  0,  current.entry.length);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  0,  current.entry.length);	  readFully(ZipLong.DEFAULT_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
25	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  2);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  2);	  readFully(ZipLong.DEFAULT_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
26	[BUG]  [BUGGY]  ReadFully(ZipLong.DD,  current.entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD,  current.entry);	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
27	[BUG]  [BUGGY]  ReadFully(ZipLong.DD,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD,  current.entry.getValue());	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
28	[BUG]  [BUGGY]  ReadFully(ZipLong.DD,  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD,  val);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD,  val);	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
29	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  WRITE_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_EXP_32,  WRITE_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_EXP_32,  WRITE_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
30	[BUG]  [BUGGY]  readFully(DD,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DD,  TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DD,  TWO_EXP_32);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
31	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_EXP_32,  TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_EXP_32,  TWO_EXP_32);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
32	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  current.entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  current.entry);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
33	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_EXP_32,  LFH_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_EXP_32,  LFH_BUF);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
34	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BU  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BU  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BU	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
35	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
36	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
37	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  }	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
38	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  current.entry.getValue());	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
39	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  current.entry);	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
40	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  true);	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
41	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  current.entry.getKey());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  current.entry.getKey());	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
42	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  0);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  0);	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
43	[BUG]  [BUGGY]  readFully(current.entry,  ZERO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  ZERO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  ZERO_DWORD_BUF);	  readFully(ZERO_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
44	[BUG]  [BUGGY]  ReadFully(current.entry,  ZERO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ZERO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ZERO_DWORD_BUF);	  readFully(ZERO_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
45	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(value))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
46	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  value))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  value))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  value))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(value))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
47	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(value))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
48	[BUG]  [BUGGY]  if(current.entry!=  null  ||  current.entry.getCrc()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  ||  current.entry.getCrc()  ==  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  ||  current.entry.getCrc()  ==  null)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
49	[BUG]  [BUGGY]  if(current.entry!=  null  ||  current.entry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  ||  current.entry.getValue()  ==  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  ||  current.entry.getValue()  ==  null)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
50	[BUG]  [BUGGY]  if(current.entry!=  null  ||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  ||  hasDataDescriptor)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  ||  hasDataDescriptor)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
51	[BUG]  [BUGGY]  if(current.entry!=  null  ||  current.entry.getCrc()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  ||  current.entry.getCrc()!=  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  ||  current.entry.getCrc()!=  null)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
52	[BUG]  [BUGGY]  if(current.entry!=  null  ||  current.entry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  ||  current.entry.getValue()!=  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  ||  current.entry.getValue()!=  null)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
53	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
54	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
55	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
56	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
57	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)&&  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
58	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
59	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(val.equals(ZipLong.DD_BUF)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(val.equals(ZipLong.DD_BUF)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
60	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(value)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(value)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(value)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
61	[BUG]  [BUGGY]  if(zipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(zipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(zipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
62	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(v)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(v)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(v)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
63	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getCrc());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getCrc());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getCrc());	  readFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getValue()  +  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getValue()  +  1);	  readFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getShortValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getShortValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getShortValue());	  readFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  readFully(WRITE_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_BUF,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_BUF,  current.entry);	  readFully(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
67	[BUG]  [BUGGY]  readFully(WRITE_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_BUF,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_BUF,  SHORT_BUF);	  readFully(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
68	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  false);	  readFully(ZipLong.DEFAULT_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
69	[BUG]  [BUGGY]  ReadFully(ZipLong.DEFAULT_SIG,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DEFAULT_SIG,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DEFAULT_SIG,  false);	  readFully(ZipLong.DEFAULT_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
70	[BUG]  [BUGGY]  reader.readFully(ZipLong.DEFAULT_SIG,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  reader.readFully(ZipLong.DEFAULT_SIG,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	reader.readFully(ZipLong.DEFAULT_SIG,  true);	  readFully(ZipLong.DEFAULT_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
71	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  null);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  null);	  readFully(ZipLong.DEFAULT_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  true,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  true,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  true,  false);	  readFully(ZipLong.DEFAULT_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
73	[BUG]  [BUGGY]  readFully(CFH_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH_BUF,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH_BUF,  current.entry);	  readFully(CFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
74	[BUG]  [BUGGY]  readFully(CFH_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH_BUF,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH_BUF,  SHORT_BUF);	  readFully(CFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
75	[BUG]  [BUGGY]  readFully(CFH_BUF,  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH_BUF,  val);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH_BUF,  val);	  readFully(CFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
76	[BUG]  [BUGGY]  Inflater  inf  =  this.createInflater();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.createInflater();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  this.createInflater();	  Inflater    inf    =    createInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
77	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(current.entry);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  createInflater(current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  createInflater(current.entry);	  Inflater    inf    =    createInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
78	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(true);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  createInflater(true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  createInflater(true);	  Inflater    inf    =    createInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
79	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(inputStream);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  createInflater(inputStream);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  createInflater(inputStream);	  Inflater    inf    =    createInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
80	[BUG]  [BUGGY]  Inflater  inf  =  createInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  createInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  createInputStream();	  Inflater    inf    =    createInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
81	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
82	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
83	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
84	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
85	[BUG]  [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(val.equals(ZipLong.DD_SIG)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(val.equals(ZipLong.DD_SIG)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
86	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(v)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(v)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(v)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
87	[BUG]  [BUGGY]  readFully(current.entry,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  SHORT_BUF);	  readFully(SHORT_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
88	[BUG]  [BUGGY]  readFully(current.entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry);	  readFully(SHORT_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
89	[BUG]  [BUGGY]  ReadFully(current.entry,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  SHORT_BUF);	  readFully(SHORT_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  readFully(current,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current,  SHORT_BUF);	  readFully(SHORT_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
91	[BUG]  [BUGGY]  readFully(DFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DFH_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DFH_BUF);	  readFully(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
92	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
93	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(zipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(zipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(zipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
94	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  if(!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
95	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
96	[BUG]  [BUGGY]  current.entry  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  current.entry  =  new  ZipLong(SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	current.entry  =  new  ZipLong(SHORT_BUF);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
97	[BUG]  [BUGGY]  current.entry  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  current.entry  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	current.entry  =  new  ZipLong(WORD_BUF);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
98	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong>  current  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong>  current  =  new  ZipLong(SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong>  current  =  new  ZipLong(SHORT_BUF);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
99	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(SHORT_BUF);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
100	[BUG]  [BUGGY]  CurrentEntry  current  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  current  =  new  ZipLong(SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  current  =  new  ZipLong(SHORT_BUF);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
101	[BUG]  [BUGGY]  current.entry  =  new  ZipLong(ZipLong.SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  current.entry  =  new  ZipLong(ZipLong.SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	current.entry  =  new  ZipLong(ZipLong.SHORT_BUF);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
102	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  3);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  3);	  readFully(ZipLong.DEFAULT_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
103	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  4);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  4);	  readFully(ZipLong.DEFAULT_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
104	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  0,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  0,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  0,  1);	  readFully(ZipLong.DEFAULT_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
105	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
106	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
107	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val),  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val),  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val),  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
108	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
109	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(scope))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(scope))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(scope))  {  readFully(WORD_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
110	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STANDARD_BUF,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF,  SHORT_BUF);	  readFully(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
111	[BUG]  [BUGGY]  readFully(SHORT_BUF,  SHORT_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SHORT_BUF,  SHORT_BUF,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  SHORT_BUF,  current.entry);	  readFully(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
112	[BUG]  [BUGGY]  readFully(STRING_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STRING_BUF,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STRING_BUF,  SHORT_BUF);	  readFully(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
113	[BUG]  [BUGGY]  readFully(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);	  readFully(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
114	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  current.entry.getCrc()!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null  ||  current.entry.getCrc()!=  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null  ||  current.entry.getCrc()!=  null)  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
115	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null  ||  hasDataDescriptor)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null  ||  hasDataDescriptor)  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
116	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
117	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue())||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue())||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.getValue())||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
118	[BUG]  [BUGGY]  ReadLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
119	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.value)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.value)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.value)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
120	[BUG]  [BUGGY]  Inflater  inf  =  getInflater().readDataDescriptor();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInflater().readDataDescriptor();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInflater().readDataDescriptor();	  Inflater    inf    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
121	[BUG]  [BUGGY]  Inflater  inf  =  getOutputFile();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputFile();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getOutputFile();	  Inflater    inf    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
122	[BUG]  [BUGGY]  Inflater  inf  =  getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getDataDescriptor();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getDataDescriptor();	  Inflater    inf    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
123	[BUG]  [BUGGY]  Inflater  inf  =  readInflater();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater();	  Inflater    inf    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
124	[BUG]  [BUGGY]  readFully(SKIP_BUF,  WRITE_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SKIP_BUF,  WRITE_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SKIP_BUF,  WRITE_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
125	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STANDARD_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
126	[BUG]  [BUGGY]  readFully(STRING_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STRING_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STRING_BUF,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
127	[BUG]  [BUGGY]  readFully(CFH_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH_BUF,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
128	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_DWORD_BUF,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_DWORD_BUF,  SHORT_BUF);	  readFully(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
129	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STANDARD_BUF,  TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF,  TWO_DWORD_BUF);	  readFully(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
130	[BUG]  [BUGGY]  readFully(STRING_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STRING_BUF,  TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STRING_BUF,  TWO_DWORD_BUF);	  readFully(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
131	[BUG]  [BUGGY]  if(zipLong.DD_SIG  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(zipLong.DD_SIG  ==  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(zipLong.DD_SIG  ==  null)  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
132	[BUG]  [BUGGY]  if(zipLong.DD_SIG!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(zipLong.DD_SIG!=  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(zipLong.DD_SIG!=  null)  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
133	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||!ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||!ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  ==  null  ||!ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
134	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  ==  null  ||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
135	[BUG]  [BUGGY]  if(ZipLong.DD_SIG!=  null  ||!ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG!=  null  ||!ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG!=  null  ||!ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
136	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val,  current.entry);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
137	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val,  current.entry.getValue());	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
138	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val,  SHORT_BUF);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
139	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val,  true);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
140	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val,  false);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
141	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val,  1);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
142	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().readDataDescriptor();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream().readDataDescriptor();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInputStream().readDataDescriptor();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
143	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().readData();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream().readData();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInputStream().readData();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
144	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(in);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(in);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInputStream(in);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
145	[BUG]  [BUGGY]  Inflater  inf  =  readInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
146	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(true);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInputStream(true);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
147	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getOutputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
148	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getKey());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry.getKey());	  readFully(ZipLong.DD_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
149	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getCrc());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getCrc());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry.getCrc());	  readFully(ZipLong.DD_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
150	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getValue()  +  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry.getValue()  +  1);	  readFully(ZipLong.DD_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
151	[BUG]  [BUGGY]  ReadFully(current.descriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.descriptor);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.descriptor);	  if(ZipLong.DD_SIG.equals(current.descriptor))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
152	[BUG]  [BUGGY]  reader.readDataDescriptor(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  reader.readDataDescriptor(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	reader.readDataDescriptor(WORD_BUF);	  if(ZipLong.DD_SIG.equals(current.descriptor))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
153	[BUG]  [BUGGY]  readFully(current.descriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.descriptor);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.descriptor);	  if(ZipLong.DD_SIG.equals(current.descriptor))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
154	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  false);	  readFully(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
155	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  false);	  readFully(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
156	[BUG]  [BUGGY]  reader.readFully(ZipLong.DD_SIG,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  reader.readFully(ZipLong.DD_SIG,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	reader.readFully(ZipLong.DD_SIG,  true);	  readFully(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
157	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  null);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  null);	  readFully(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
158	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  true,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  true,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  true,  false);	  readFully(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
159	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getKey());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry.getKey());	  readFully(ZipLong.DEFAULT_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
160	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getCrc());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getCrc());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry.getCrc());	  readFully(ZipLong.DEFAULT_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
161	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue()  +  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue()  +  1);	  readFully(ZipLong.DEFAULT_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
162	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getName());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getName());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry.getName());	  readFully(ZipLong.DEFAULT_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
163	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  entry.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  entry.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
164	[BUG]  [BUGGY]  Inflater  inf  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  inputStream.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  inputStream.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
165	[BUG]  [BUGGY]  Inflater  inf  =  current.inputStream;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.inputStream;  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.inputStream;	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
166	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
167	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
168	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  1);	  readFully(ZipLong.DD_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
169	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  0,  current.entry.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  0,  current.entry.length);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  0,  current.entry.length);	  readFully(ZipLong.DD_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
170	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  2);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  2);	  readFully(ZipLong.DD_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
171	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInstance();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.entry.getInstance();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.entry.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
172	[BUG]  [BUGGY]  Inflater  inf  =  current.getInstance();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.getInstance();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
173	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipLong(ZipLong.getInstance());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  new  ZipLong(ZipLong.getInstance());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  new  ZipLong(ZipLong.getInstance());	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
174	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.getInstance(current.entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  ZipLong.getInstance(current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  ZipLong.getInstance(current.entry);	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
175	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.getInstanceUTF8();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  ZipLong.getInstanceUTF8();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  ZipLong.getInstanceUTF8();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
176	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInstance();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  currentEntry.getInstance();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  currentEntry.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
177	[BUG]  [BUGGY]  if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
178	[BUG]  [BUGGY]  if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
179	[BUG]  [BUGGY]  if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
180	[BUG]  [BUGGY]  if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
181	[BUG]  [BUGGY]  if(ZipLong.DD.equals(val)||  ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD.equals(val)||  ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD.equals(val)||  ZipLong.DD.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
182	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val));  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val));	  ReadFully(ZipLong.DD_SIG,    val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
183	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val));  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val));	  ReadFully(ZipLong.DD_SIG,    val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
184	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  readFully(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  readFully(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val)||  readFully(WORD_BUF);	  ReadFully(ZipLong.DD_SIG,    val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
185	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val))  {  readFully(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val))  {  readFully(TWO_EXP_32);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val))  {  readFully(TWO_EXP_32);  }	  ReadFully(ZipLong.DD_SIG,    val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
186	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WRORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WRORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WRORD_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
187	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_BUF.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
188	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BUF.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
189	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_BUF.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
190	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_BUF.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
191	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
192	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.startsWith(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.startsWith(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.startsWith(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
193	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  false);	  readFully(ZipLong.DECEMBER,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
194	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECEMBER,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER,  false);	  readFully(ZipLong.DECEMBER,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
195	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  null);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  null);	  readFully(ZipLong.DECEMBER,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
196	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  true,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  true,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  true,  false);	  readFully(ZipLong.DECEMBER,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
197	[BUG]  [BUGGY]  readFully(ZipLong.DECLARATION,  current.entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECLARATION,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECLARATION,  current.entry);	  readFully(ZipLong.DECLARATION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
198	[BUG]  [BUGGY]  readFully(ZipLong.DECLARATION,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECLARATION,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECLARATION,  current.entry.getValue());	  readFully(ZipLong.DECLARATION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
199	[BUG]  [BUGGY]  readFully(ZipLong.DECLARATION,  val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECLARATION,  val);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECLARATION,  val);	  readFully(ZipLong.DECLARATION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
200	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  current.  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  current.  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  current.	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    val    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
201	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater(current.entry,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry,  true);	  Inflater    inf    =    readInflater(current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
202	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater(current.entry,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry,  false);	  Inflater    inf    =    readInflater(current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
203	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry,  inputStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater(current.entry,  inputStream);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry,  inputStream);	  Inflater    inf    =    readInflater(current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
204	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry,  ze);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater(current.entry,  ze);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry,  ze);	  Inflater    inf    =    readInflater(current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
205	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater(current.entry,  buffer);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry,  buffer);	  Inflater    inf    =    readInflater(current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
206	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry,  encoding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater(current.entry,  encoding);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry,  encoding);	  Inflater    inf    =    readInflater(current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
207	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val,  current.entry);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
208	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
209	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val,  1);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
210	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val,  true);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
211	[BUG]  [BUGGY]  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
212	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong>  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong>  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong>  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
213	[BUG]  [BUGGY]  CurrentEntry  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
214	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
215	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(ZipLong.DEFAULT_SIZE);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
216	[BUG]  [BUGGY]  readFully(ZipLong.DD,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD,  current.entry.getKey());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD,  current.entry.getKey());	  readFully(ZipLong.DD,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
217	[BUG]  [BUGGY]  readFully(current.entry,  ZipLong.DD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  ZipLong.DD);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  ZipLong.DD);	  readFully(ZipLong.DD,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
218	[BUG]  [BUGGY]  readFully(current.entry,  ZERO_DWORD_BUF.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  ZERO_DWORD_BUF.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  ZERO_DWORD_BUF.getValue());	  readFully(ZERO_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
219	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getKey());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  current.entry.getKey());	  readFully(ZERO_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
220	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getShortValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getShortValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  current.entry.getShortValue());	  readFully(ZERO_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
221	[BUG]  [BUGGY]  readFully(SHORT_BUF,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SHORT_BUF,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  current.entry.getValue());	  readFully(ZERO_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
222	[BUG]  [BUGGY]  ReadFully(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry.getValue());	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
223	[BUG]  [BUGGY]  ReadFully(current.entry.getValue(),  ZipLong.DD_SIG))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry.getValue(),  ZipLong.DD_SIG))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry.getValue(),  ZipLong.DD_SIG))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
224	[BUG]  [BUGGY]  ReadFully(current.entry.getValue(),  zipLong.DD_SIG))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry.getValue(),  zipLong.DD_SIG))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry.getValue(),  zipLong.DD_SIG))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
225	[BUG]  [BUGGY]  ReadFully(current.entry.getValue(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry.getValue(),  ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry.getValue(),  ZipLong.DD_SIG);	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
226	[BUG]  [BUGGY]  readFully(current.entry,  WRITE_DWORD_BUF.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  WRITE_DWORD_BUF.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  WRITE_DWORD_BUF.getValue());	  readFully(WRITE_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
227	[BUG]  [BUGGY]  ReadFully(current.entry,  WRITE_DWORD_BUF.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  WRITE_DWORD_BUF.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  WRITE_DWORD_BUF.getValue());	  readFully(WRITE_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
228	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  current.entry.getKey());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  current.entry.getKey());	  readFully(WRITE_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
229	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getKey(),  this);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getKey(),  this);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getKey(),  this);	  readFully(ZipLong.DECEMBER,    current.entry.getKey());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
230	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getKey(),  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getKey(),  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getKey(),  true);	  readFully(ZipLong.DECEMBER,    current.entry.getKey());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
231	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(JipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(JipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(JipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
232	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRORD_BUF);  }	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
233	[BUG]  [BUGGY]  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	current.entry  =  new  ZipLong(ZipLong.DD_SIG);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
234	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong>  current  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong>  current  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong>  current  =  new  ZipLong(ZipLong.DD_SIG);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
235	[BUG]  [BUGGY]  CurrentEntry  current  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  current  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  current  =  new  ZipLong(ZipLong.DD_SIG);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
236	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(ZipLong.DD_SIG);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
237	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(ZipLong.DD_SIG);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
238	[BUG]  [BUGGY]  Entry  entry  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Entry  entry  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Entry  entry  =  new  ZipLong(ZipLong.DD_SIG);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
239	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getKey());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER,  current.entry.getKey());	  ReadFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
240	[BUG]  [BUGGY]  ReadFully(current.entry,  ZipLong.DECEMBER.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ZipLong.DECEMBER.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ZipLong.DECEMBER.getValue());	  ReadFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
241	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getCrc());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getCrc());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER,  current.entry.getCrc());	  ReadFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
242	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getValue()  +  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER,  current.entry.getValue()  +  1);	  ReadFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
243	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getShortValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getShortValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER,  current.entry.getShortValue());	  ReadFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
244	[BUG]  [BUGGY]  CurrentEntry  current  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  current  =  currentEntry.getValue();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  current  =  currentEntry.getValue();	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
245	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  2);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  2);	  readFully(ZipLong.DECEMBER,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
246	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  3);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  3);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  3);	  readFully(ZipLong.DECEMBER,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
247	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  4);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  4);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  4);	  readFully(ZipLong.DECEMBER,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
248	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  0,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  0,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  0,  1);	  readFully(ZipLong.DECEMBER,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
249	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  2);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  2);	  readFully(ZERO_DWORD_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
250	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  0,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  0,  0);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  0,  0);	  readFully(ZERO_DWORD_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
251	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  4);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  4);	  readFully(ZERO_DWORD_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
252	[BUG]  [BUGGY]  readFully(current.entry,  ZipLong.DECEMBER);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  ZipLong.DECEMBER);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  ZipLong.DECEMBER);	  readFully(ZipLong.DECEMBER,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
253	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(current.entry))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(current.entry))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
254	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(current.getValue()))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(current.getValue()))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
255	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIGINT.equals(val))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIGINT.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIGINT.equals(val))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
256	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIZE.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIZE.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIZE.equals(val))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
257	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_EXP_32.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_EXP_32.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_EXP_32.equals(val))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
258	[BUG]  [BUGGY]  if(!ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(!ZipLong.DD_BUF.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(!ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
259	[BUG]  [BUGGY]  readFully(SHORT_BUF,  ZERO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SHORT_BUF,  ZERO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  ZERO_DWORD_BUF);	  readFully(ZERO_DWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
260	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  SKIP_BUF);	  readFully(ZERO_DWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
261	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  SHORT_BUF,  SKIP_BUF);	  readFully(ZERO_DWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
262	[BUG]  [BUGGY]  readFully(ZipLong.DD,  current.entry.getCrc());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD,  current.entry.getCrc());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD,  current.entry.getCrc());	  readFully(ZipLong.DD,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
263	[BUG]  [BUGGY]  readFully(ZipLong.DD,  current.entry.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD,  current.entry.getValue()  +  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD,  current.entry.getValue()  +  1);	  readFully(ZipLong.DD,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
264	[BUG]  [BUGGY]  readFully(ZipLong.DD,  current.entry.getShortValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD,  current.entry.getShortValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD,  current.entry.getShortValue());	  readFully(ZipLong.DD,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
265	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current.entry))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current.entry))  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
266	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current.getValue()))  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
267	[BUG]  [BUGGY]  ||  val.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  val.equals(ZipLong.DD_SIG))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  val.equals(ZipLong.DD_SIG))  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
268	[BUG]  [BUGGY]  ||!ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||!ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||!ZipLong.DD_SIG.equals(val))  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
269	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current.entry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current.entry.getValue()))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current.entry.getValue()))  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
270	[BUG]  [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  zipLong.DD_SIG.equals(val))  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
271	[BUG]  [BUGGY]  readFully(SKIP_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SKIP_BUF,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SKIP_BUF,  SHORT_BUF);	  readFully(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
272	[BUG]  [BUGGY]  readFully(SHORT_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SHORT_BUF,  LFH_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  LFH_BUF);	  readFully(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
273	[BUG]  [BUGGY]  readFully(val,  WRITE_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(val,  WRITE_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(val,  WRITE_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
274	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  val.length);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  val.length);	  readFully(WRITE_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
275	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  val,  current.entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  val,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  val,  current.entry);	  readFully(WRITE_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
276	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  current);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  current);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  current);	  readFully(WRITE_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
277	[BUG]  [BUGGY]  readFully(ZipLong.DD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_BUF);	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
278	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_BUF);	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
279	[BUG]  [BUGGY]  ReadFully(current.entry,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  true);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
280	[BUG]  [BUGGY]  ReadFully(current.entry,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  false);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
281	[BUG]  [BUGGY]  ReadFully(current.entry,  encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  encoding);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  encoding);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
282	[BUG]  [BUGGY]  ReadFully(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  hasDataDescriptor);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  hasDataDescriptor);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
283	[BUG]  [BUGGY]  ReadFully(current.entry,  ze);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ze);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ze);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
284	[BUG]  [BUGGY]  ReadFully(current.entry,  this);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  this);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  this);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
285	[BUG]  [BUGGY]  if(ZipLong.DD_SIG!=  null  ||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG!=  null  ||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG!=  null  ||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
286	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  0,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  0,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  0,  1);	  readFully(ZERO_DWORD_BUF,    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
287	[BUG]  [BUGGY]  readFully(current.entry,  WRITE_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  WRITE_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  WRITE_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
288	[BUG]  [BUGGY]  ReadFully(current.entry,  WRITE_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  WRITE_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  WRITE_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
289	[BUG]  [BUGGY]  readFully(current,  WRITE_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current,  WRITE_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current,  WRITE_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
290	[BUG]  [BUGGY]  readFully(current.entry,  ZipLong.DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  ZipLong.DEFAULT_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  ZipLong.DEFAULT_SIG);	  readFully(ZipLong.DEFAULT_SIG,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
291	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
292	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
293	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
294	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
295	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }	  ||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
296	[BUG]  [BUGGY]  ||  val.equals(ZipLong.DD_SIG))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  val.equals(ZipLong.DD_SIG))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  val.equals(ZipLong.DD_SIG))  {  readFully(WORD_BUF);  }	  ||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
297	[BUG]  [BUGGY]  ||!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||!ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  ||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
298	[BUG]  [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  zipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  ||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
299	[BUG]  [BUGGY]  ReadFully(current.entry,  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ZipLong.DD_SIG);	  if(ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
300	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_DWORD_BUF,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_DWORD_BUF,  current.entry);	  readFully(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
301	[BUG]  [BUGGY]  readFully(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_EXP_32);	  readFully(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
302	[BUG]  [BUGGY]  ||  ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
303	[BUG]  [BUGGY]  ||  ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
304	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_BUF,  val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_BUF,  val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_BUF,  val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
305	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.entry)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
306	[BUG]  [BUGGY]  ReadLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.entry)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
307	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry));  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry));	  readFully(ZipLong.DD_SIG,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
308	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(SHORT_BUF);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
309	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
310	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
311	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
312	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
313	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(ZipLong.DD);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(ZipLong.DD);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
314	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  value)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  value)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  value)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(value)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
315	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(value)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(value)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(value)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(value)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
316	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue()))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue()))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val.getValue()))  {	  readFully(ZipLong.DD_SIG,    val))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
317	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val),  current.entry.getValue())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val),  current.entry.getValue())  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val),  current.entry.getValue())  {	  readFully(ZipLong.DD_SIG,    val))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
318	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val),  current.entry)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val),  current.entry)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val),  current.entry)  {	  readFully(ZipLong.DD_SIG,    val))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
319	[BUG]  [BUGGY]  current.entry  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  current.entry  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	current.entry  =  new  ZipLong(TWO_EXP_32);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
320	[BUG]  [BUGGY]  CurrentEntry  <  TWO_EXP_32,  current.entry  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  TWO_EXP_32,  current.entry  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  TWO_EXP_32,  current.entry  =  new  ZipLong(TWO_EXP_32);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
321	[BUG]  [BUGGY]  CurrentEntry  current  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  current  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  current  =  new  ZipLong(TWO_EXP_32);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
322	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current  =  new  ZipLong(TWO_EXP_32);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
323	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  K,  V>  current  =  new  ZipLong(TWO_EXP_32);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
324	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(TWO_EXP_32);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
325	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  0,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  0,  current.entry.length);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  0,  current.entry.length);	  readFully(ZipLong.DECEMBER,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
326	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  10);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  10);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  10);	  readFully(ZipLong.DECEMBER,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
327	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  0,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  0,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  0,  current.entry.getValue());	  readFully(ZipLong.DECEMBER,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
328	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
329	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(JSC_WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(JSC_WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(JSC_WORD_BUF);  }	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
330	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(TWO_EXP_32);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(TWO_EXP_32);  }	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
331	[BUG]  [BUGGY]  readFully(CFH_BUF,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH_BUF,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH_BUF,  1);	  readFully(ZERO_DWORD_BUF,    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
332	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  3);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  3);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  3);	  readFully(ZERO_DWORD_BUF,    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
333	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(v)||  ZipLong.DD_SIG.equals(v))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(v)||  ZipLong.DD_SIG.equals(v))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(v)||  ZipLong.DD_SIG.equals(v))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
334	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(diff)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(diff)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(diff)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
335	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(current)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(current)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(current)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
336	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getName());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getName());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getName());	  readFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
337	[BUG]  [BUGGY]  readFully(ZipLong.DD,  current.entry.getName());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD,  current.entry.getName());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD,  current.entry.getName());	  readFully(ZipLong.DD,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
338	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(current)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
339	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
340	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
341	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
342	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
343	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(v)||  ZipLong.DD_SIG.equals(v))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(v)||  ZipLong.DD_SIG.equals(v))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(v)||  ZipLong.DD_SIG.equals(v))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
344	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT,  true);	  readFully(ZipLong.DECEMBER,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
345	[BUG]  [BUGGY]  readFully(DD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DD);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DD);	  readFully(CFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
346	[BUG]  [BUGGY]  readFully(CFH_BUF,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH_BUF,  0);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH_BUF,  0);	  readFully(CFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
347	[BUG]  [BUGGY]  readFully(CFH_BUF,  csize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH_BUF,  csize);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH_BUF,  csize);	  readFully(CFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
348	[BUG]  [BUGGY]  Inflater  inf  =  ze.getInstance();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  ze.getInstance();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  ze.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
349	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
350	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
351	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
352	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
353	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
354	[BUG]  [BUGGY]  if(hasDataDescriptor)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(hasDataDescriptor)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(hasDataDescriptor)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
355	[BUG]  [BUGGY]  ReadFully(current.entry,  ZipLong.DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ZipLong.DEFAULT_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ZipLong.DEFAULT_SIG);	  readFully(ZipLong.DEFAULT_SIG,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
356	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry));  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry));	  readFully(ZipLong.DEFAULT_SIG,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
357	[BUG]  [BUGGY]  ReadFully(current.entry,  ZERO_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ZERO_LEN);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ZERO_LEN);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
358	[BUG]  [BUGGY]  ReadFully(current.entry,  isEnabled);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  isEnabled);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  isEnabled);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
359	[BUG]  [BUGGY]  Inflater  inf  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.getDataDescriptor();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.getDataDescriptor();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
360	[BUG]  [BUGGY]  Inflater  inf  =  current.getOutputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.getOutputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.getOutputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
361	[BUG]  [BUGGY]  Inflater  inf  =  current.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.read();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.read();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
362	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(value)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
363	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.getKey()))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.getKey()))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.getKey()))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
364	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry.getValue()))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry.getValue()))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry.getValue()))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
365	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(JSC_WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(JSC_WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(JSC_WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
366	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
367	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    val    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
368	[BUG]  [BUGGY]  readFully(LFH_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(LFH_BUF,  LFH_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(LFH_BUF,  LFH_BUF);	  readFully(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
369	[BUG]  [BUGGY]  readFully(LFH_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(LFH_BUF,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(LFH_BUF,  SHORT_BUF);	  readFully(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
370	[BUG]  [BUGGY]  ReadFully(ZipLong.SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.SHORT_BUF);	  ReadFully(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
371	[BUG]  [BUGGY]  ReadFully(current.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.getValue());	  ReadFully(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
372	[BUG]  [BUGGY]  ReadFully(ZipLong.DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DEFAULT_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DEFAULT_SIG);	  ReadFully(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
373	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
374	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  SHORT_BUF);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
375	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val  +  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val  +  1);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
376	[BUG]  [BUGGY]  if(current.entry!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
377	[BUG]  [BUGGY]  if(current.entry!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
378	[BUG]  [BUGGY]  readFully(LFH_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(LFH_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(LFH_BUF,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
379	[BUG]  [BUGGY]  readFully(CFH,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
380	[BUG]  [BUGGY]  readFully(DFH,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DFH,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DFH,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
381	[BUG]  [BUGGY]  readFully(DS,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DS,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DS,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
382	[BUG]  [BUGGY]  readFully(LFH,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(LFH,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(LFH,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
383	[BUG]  [BUGGY]  readFully(STRING_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STRING_BUF,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STRING_BUF,  current.entry);	  readFully(ZERO_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
384	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(in);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  createInflater(in);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  createInflater(in);	  Inflater    inf    =    createInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
385	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(outputStream);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  createInflater(outputStream);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  createInflater(outputStream);	  Inflater    inf    =    createInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
386	[BUG]  [BUGGY]  Inflater  inf  =  findInflater();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  findInflater();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  findInflater();	  Inflater    inf    =    createInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
387	[BUG]  [BUGGY]  readFully(DFH,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DFH,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DFH,  SHORT_BUF);	  readFully(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
388	[BUG]  [BUGGY]  readFully(CFH,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH,  SHORT_BUF);	  readFully(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
389	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater(current.entry,  hasDataDescriptor);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry,  hasDataDescriptor);	  Inflater    inf    =    readInflater(current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
390	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  current);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  current);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  current);	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
391	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  1);	  ReadFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
392	[BUG]  [BUGGY]  readFully(current.entry,  DEFAULT_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current.entry,  DEFAULT_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current.entry,  DEFAULT_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
393	[BUG]  [BUGGY]  if(current.entry!=  null  ||!hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  ||!hasDataDescriptor)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  ||!hasDataDescriptor)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
394	[BUG]  [BUGGY]  if(ZipLong.DD_BIGINT!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BIGINT!=  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BIGINT!=  null)  {	  if(ZipLong.DD_BUF!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
395	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
396	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
397	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getName());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getName());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry.getName());	  readFully(ZipLong.DD_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
398	[BUG]  [BUGGY]  Inflater  inf  =  getInflater().getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInflater().getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInflater().getInputStream();	  Inflater    inf    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
399	[BUG]  [BUGGY]  Inflater  inf  =  getInflater(in);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInflater(in);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInflater(in);	  Inflater    inf    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
400	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
401	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  if  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  if  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  if	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
402	[BUG]  [BUGGY]  CurrentEntry  <  T>  current  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  T>  current  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  T>  current  =  new  ZipLong(TWO_EXP_32);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
403	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry;  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry;	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
404	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  currentEntry.getValue();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  K,  V>  current  =  currentEntry.getValue();	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
405	[BUG]  [BUGGY]  CurrentEntry  <  T>  current  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  T>  current  =  currentEntry.getValue();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  T>  current  =  currentEntry.getValue();	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
406	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WRITE_BUF);  }	  ReadFully(ZipLong.DD_SIG,    val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
407	[BUG]  [BUGGY]  readFully(DS,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DS,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DS,  SHORT_BUF);	  readFully(WRITE_DWORD_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
408	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  32);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  32);	  readFully(ZipLong.DEFAULT_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
409	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
410	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong>  current  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong>  current  =  currentEntry.getValue();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong>  current  =  currentEntry.getValue();	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
411	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getKey(),  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getKey(),  hasDataDescriptor);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getKey(),  hasDataDescriptor);	  readFully(ZipLong.DECEMBER,    current.entry.getKey());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
412	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(SHORT_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(SHORT_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(SHORT_BUF);  }	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
413	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  }	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
414	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE  +  1);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE  +  1);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE  +  1);  }	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
415	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WRITE_BUF);  }	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
416	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue(),  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue(),  hasDataDescriptor);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue(),  hasDataDescriptor);	  readFully(ZipLong.DEFAULT_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
417	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  >=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG  >=  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  >=  null)  {	  if(ZipLong.DD_SIG!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
418	[BUG]  [BUGGY]  if(ZipLong.DS_SIG  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DS_SIG  ==  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DS_SIG  ==  null)  {	  if(ZipLong.DD_SIG!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
419	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  [Delete]  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG  [Delete]  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  [Delete]  null)  {	  if(ZipLong.DD_SIG!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
420	[BUG]  [BUGGY]  readFully(LFH_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(LFH_BUF,  TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(LFH_BUF,  TWO_DWORD_BUF);	  readFully(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
421	[BUG]  [BUGGY]  readFully(DD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DD,  TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DD,  TWO_DWORD_BUF);	  readFully(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
422	[BUG]  [BUGGY]  readFully(DS,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DS,  TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DS,  TWO_DWORD_BUF);	  readFully(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
423	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT);	  readFully(ZipLong.DECLARATION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
424	[BUG]  [BUGGY]  readFully(ZipLong.SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.SHORT_BUF);	  readFully(ZipLong.DECLARATION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
425	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(current);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(current);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(current);  }	  ||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
426	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current))  {  readFully(WORD_BUF);  }	  ||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
427	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(current.getValue());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(current.getValue());  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(current.getValue());  }	  ||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
428	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getValue(),  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getValue(),  hasDataDescriptor);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER,  current.entry.getValue(),  hasDataDescriptor);	  ReadFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
429	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getName());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getName());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER,  current.entry.getName());	  ReadFully(ZipLong.DECEMBER,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
430	[BUG]  [BUGGY]  if(hasDataDescriptor)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(hasDataDescriptor)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(hasDataDescriptor)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    return    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
431	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  0,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  0,  0);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  0,  0);	  readFully(ZipLong.DEFAULT_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
432	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getValue()  +  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  current.entry.getValue()  +  1);	  readFully(ZERO_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
433	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  0,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  0,  0);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  0,  0);	  readFully(ZipLong.DD_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
434	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(value))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(value))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(value))  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
435	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(current))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(current))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(current))  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
436	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val)||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(val)||  hasDataDescriptor)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val)||  hasDataDescriptor)  {	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
437	[BUG]  [BUGGY]  readFully(RFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(RFH_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(RFH_BUF);	  readFully(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
438	[BUG]  [BUGGY]  readFully(DS);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DS);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DS);	  readFully(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
439	[BUG]  [BUGGY]  readFully(CFH);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(CFH);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH);	  readFully(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
440	[BUG]  [BUGGY]  readFully(ZipLong.DD,  current.entry));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD,  current.entry));  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD,  current.entry));	  readFully(ZipLong.DD,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
441	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(value))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(value))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(value))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
442	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_BUF.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
443	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(current.getValue()))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(current.getValue()))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(current.getValue()))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
444	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
445	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
446	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_DWORD_BUF,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_DWORD_BUF,  current.entry.getValue());	  readFully(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
447	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_DWORD_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_DWORD_BUF,  SKIP_BUF);	  readFully(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
448	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(value)&&  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(value)&&  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(value)&&  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(value))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
449	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
450	[BUG]  [BUGGY]  ReadFully(current.entry,  ZipLong.DECEMBER);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ZipLong.DECEMBER);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ZipLong.DECEMBER);	  readFully(ZipLong.DECEMBER,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
451	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STANDARD_BUF,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF,  current.entry.getValue());	  readFully(STANDARD_BUF);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
452	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  STANDARD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STANDARD_BUF,  STANDARD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF,  STANDARD_BUF);	  readFully(STANDARD_BUF);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
453	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STANDARD_BUF,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF,  current.entry);	  readFully(STANDARD_BUF);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
454	[BUG]  [BUGGY]  readFully(TCH_BUF,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TCH_BUF,  TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TCH_BUF,  TWO_EXP_32);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
455	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STANDARD_BUF,  TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF,  TWO_EXP_32);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
456	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current))  {	  readFully(ZipLong.DD_SIG,    val))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
457	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val),  this);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  val),  this);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val),  this);	  readFully(ZipLong.DD_SIG,    val))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
458	[BUG]  [BUGGY]  Inflater  inf  =  readFully(in);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readFully(in);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readFully(in);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
459	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().readInt();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream().readInt();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInputStream().readInt();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
460	[BUG]  [BUGGY]  writeFully(ZipLong.DEFAULT_SIG,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  writeFully(ZipLong.DEFAULT_SIG,  false);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	writeFully(ZipLong.DEFAULT_SIG,  false);	  readFully(ZipLong.DEFAULT_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
461	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  0L);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  0L);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  0L);	  readFully(ZERO_DWORD_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
462	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
463	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.name)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.name)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.name)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
464	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
465	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.descriptor)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.descriptor)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.descriptor)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
466	[BUG]  [BUGGY]  readFully(WRITE_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_BUF,  SKIP_BUF);	  readFully(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
467	[BUG]  [BUGGY]  readFully(WRITE_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_BUF,  TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_BUF,  TWO_DWORD_BUF);	  readFully(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
468	[BUG]  [BUGGY]  readFully(WRITE_BUF,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_BUF,  current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_BUF,  current.entry.getValue());	  readFully(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
469	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  SHORT_BUF);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
470	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  readFully(val));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  readFully(val));  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  readFully(val));	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
471	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue())||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue())||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.getValue())||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.entry)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
472	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.entry)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
473	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.entry)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
474	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.name)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.name)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.name)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.entry)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
475	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  val.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  val.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  val.getValue());	  readFully(WRITE_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
476	[BUG]  [BUGGY]  readFully(DD,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(DD,  val);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(DD,  val);	  readFully(WRITE_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
477	[BUG]  [BUGGY]  readFully(LFH_BUF,  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(LFH_BUF,  val);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(LFH_BUF,  val);	  readFully(WRITE_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
478	[BUG]  [BUGGY]  ReadFully(ZipLong.DD,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD,  fileNameLen);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD,  fileNameLen);	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
479	[BUG]  [BUGGY]  ReadFully(ZipLong.DD,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD,  true);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD,  true);	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
480	[BUG]  [BUGGY]  ReadFully(ZipLong.DS);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DS);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DS);	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
481	[BUG]  [BUGGY]  ReadFully(ZipLong.DD,  current);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD,  current);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD,  current);	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
482	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(value))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(value))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(value))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
483	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SHIFT.equals(val))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SHIFT.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SHIFT.equals(val))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
484	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
485	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WRITE_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
486	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WRITE_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
487	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_TWO_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_TWO_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_TWO_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
488	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG));  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG));	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
489	[BUG]  [BUGGY]  val  =  new  ZipLong(SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(SKIP_BUF);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
490	[BUG]  [BUGGY]  val  =  new  ZipLong(ZERO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(ZERO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(ZERO_DWORD_BUF);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
491	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(WRITE_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(WRITE_BUF);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
492	[BUG]  [BUGGY]  Inflater  inf  =  this.entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.entry.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  this.entry.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
493	[BUG]  [BUGGY]  val  =  new  ZipLong(SCRIPT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  val  =  new  ZipLong(SCRIPT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(SCRIPT_BUF);	  val    =    new    ZipLong(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
494	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
495	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  16);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  16);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  16);	  readFully(ZipLong.DECEMBER,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
496	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
497	[BUG]  [BUGGY]  CurrentEntry  <  TWO_EXP_32  ||  current.entry!=  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  TWO_EXP_32  ||  current.entry!=  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  TWO_EXP_32  ||  current.entry!=  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
498	[BUG]  [BUGGY]  CurrentEntry  <  TWO_EXP_32  ||  current.entry  ==  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  TWO_EXP_32  ||  current.entry  ==  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  TWO_EXP_32  ||  current.entry  ==  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(TWO_EXP_32);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
499	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  10);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  10);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  10);	  readFully(ZipLong.DEFAULT_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
500	[BUG]  [BUGGY]  readFully(current,  ZERO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current,  ZERO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current,  ZERO_DWORD_BUF);	  readFully(ZERO_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
501	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  zipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  zipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  ==  null  ||  zipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
502	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  ZipLong.DD_SIG.equals(null))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG  ==  null  ||  ZipLong.DD_SIG.equals(null))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  ==  null  ||  ZipLong.DD_SIG.equals(null))  {	  if(ZipLong.DD_SIG    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
503	[BUG]  [BUGGY]  readFully(SCRIPT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SCRIPT_BUF,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SCRIPT_BUF,  SKIP_BUF);	  readFully(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
504	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WRITE_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WRITE_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
505	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry.getKey()))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry.getKey()))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry.getKey()))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.getValue()))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
506	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getSize());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getSize());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getSize());	  readFully(ZipLong.DECEMBER,    current.entry.getKey());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
507	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(TWO_EXP_32);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(TWO_EXP_32);  }	  if(ZipLong.DD_SIG.equals(current.descriptor))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
508	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(TWO_DWORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(TWO_DWORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(TWO_DWORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.descriptor))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
509	[BUG]  [BUGGY]  this.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  this.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	this.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
510	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  new  ZipLong(ZipLong.DEFAULT_SIZE);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	new  ZipLong(ZipLong.DEFAULT_SIZE);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DEFAULT_SIZE);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
511	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  entryEncoding.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
512	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.entryEncoding.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  this.entryEncoding.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
513	[BUG]  [BUGGY]  Inflater  inf  =  this.ze.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.ze.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  this.ze.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
514	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getName());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getName());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  current.entry.getName());	  readFully(ZERO_DWORD_BUF,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
515	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  true,  encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  true,  encoding);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  true,  encoding);	  readFully(ZipLong.DECEMBER,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
516	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(current.entry    ==    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
517	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(TWO_EXP_32);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(TWO_EXP_32);  }	  if(ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
518	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(TWO_DWORD_BUF);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(TWO_DWORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(TWO_DWORD_BUF);  }	  if(ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
519	[BUG]  [BUGGY]  Inflater  inf  =  this.current.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.current.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  this.current.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
520	[BUG]  [BUGGY]  Inflater  inf  =  current.encoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.encoding.getInputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.encoding.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
521	[BUG]  [BUGGY]  Inflater  inf  =  current.inputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.inputStream();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.inputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
522	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
523	[BUG]  [BUGGY]  if(ZipLong.DD_BUF!=  null)  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG!=  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF!=  null)  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG!=  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF!=  null)  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG!=	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
524	[BUG]  [BUGGY]  readFully(SCRIPT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SCRIPT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SCRIPT_BUF);	  readFully(CFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
525	[BUG]  [BUGGY]  readFully(TEMP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TEMP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TEMP_BUF);	  readFully(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
526	[BUG]  [BUGGY]  readFully(TEMP_SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TEMP_SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TEMP_SHORT_BUF);	  readFully(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
527	[BUG]  [BUGGY]  ReadFully(current.entry,  ZERO_EXP_32);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ZERO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ZERO_EXP_32);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
528	[BUG]  [BUGGY]  ReadFully(current.entry,  inf);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  inf);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  inf);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
529	[BUG]  [BUGGY]  ReadFully(current.entry,  ZERO_LENGTH);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(current.entry,  ZERO_LENGTH);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry,  ZERO_LENGTH);	  ReadFully(current.entry);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
530	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  16);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  16);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  16);	  readFully(ZipLong.DEFAULT_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
531	[BUG]  [BUGGY]  readFully(STANDARD_BUF,  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(STANDARD_BUF,  val);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF,  val);	  readFully(WRITE_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
532	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  10);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DD_SIG,  10);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  10);	  readFully(ZipLong.DD_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
533	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(diff)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(diff)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(diff)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
534	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
535	[BUG]  [BUGGY]  if(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipLong.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipLong.DEFAULT)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipLong.DEFAULT)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
536	[BUG]  [BUGGY]  if(current.entry!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
537	[BUG]  [BUGGY]  if(current.entry!=  null  &&  current.entry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  &&  current.entry.getValue()  ==  null)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  &&  current.entry.getValue()  ==  null)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
538	[BUG]  [BUGGY]  if(current.entry!=  null  &&  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  &&  hasDataDescriptor)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  &&  hasDataDescriptor)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
539	[BUG]  [BUGGY]  if(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipEncoding.UTF8)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipEncoding.UTF8)  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipEncoding.UTF8)  {	  if(current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
540	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getEntryName());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getEntryName());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry.getEntryName());	  readFully(ZipLong.DEFAULT_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
541	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getEntry());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getEntry());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry.getEntry());	  readFully(ZipLong.DEFAULT_SIG,    current.entry.getValue());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
542	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
543	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val.getValue());	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
544	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val),  current.entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val),  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val),  current.entry);	  ReadFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
545	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SUB);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD_SUB);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SUB);	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
546	[BUG]  [BUGGY]  ReadFully(ZipLong.DD,  this);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DD,  this);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD,  this);	  ReadFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
547	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current.entry  =  new  ZipLong(SHORT_BUF);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
548	[BUG]  [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  CurrentEntry  <  ZipLong,  ZipLong>  current  =  currentEntry.getValue();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	CurrentEntry  <  ZipLong,  ZipLong>  current  =  currentEntry.getValue();	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(SHORT_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
549	[BUG]  [BUGGY]  readFully(SHORT_BUF,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SHORT_BUF,  TWO_EXP_32);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  TWO_EXP_32);	  readFully(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
550	[BUG]  [BUGGY]  readFully(SCRIPT_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SCRIPT_BUF,  TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SCRIPT_BUF,  TWO_DWORD_BUF);	  readFully(SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
551	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	new  ZipLong(ZipLong.DD_SIG);	  if(current.entry!=    null)    {    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
552	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  readInflater(current.entry,  zipEncoding);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry,  zipEncoding);	  Inflater    inf    =    readInflater(current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
553	[BUG]  [BUGGY]  readFully(SCRIPT_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SCRIPT_BUF,  SHORT_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SCRIPT_BUF,  SHORT_BUF);	  readFully(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
554	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
555	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
556	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
557	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
558	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
559	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
560	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
561	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD!=  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD!=  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD!=	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
562	[BUG]  [BUGGY]  readFully(current,  current.entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(current,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(current,  current.entry);	  readFully(WRITE_DWORD_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
563	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF	  if(current.entry!=    null)    {    if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
564	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_DWORD_BUF,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_DWORD_BUF,  1);	  readFully(ZERO_DWORD_BUF,    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
565	[BUG]  [BUGGY]  readFully(WORD_BUF,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WORD_BUF,  1);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WORD_BUF,  1);	  readFully(ZERO_DWORD_BUF,    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
566	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(zipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)&&    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
567	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)&&    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
568	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)&&    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
569	[BUG]  [BUGGY]  if(ZipLong.DD_BIGINT.equals(val)||  ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BIGINT.equals(val)||  ZipLong.DD_BUF.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BIGINT.equals(val)||  ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
570	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(current.entry))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(current.entry))  {	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
571	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.getInstance();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  zipEncoding.getInstance();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  zipEncoding.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
572	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.createInstance();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  ZipLong.createInstance();  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  ZipLong.createInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
573	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.getInstance(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  ZipLong.getInstance(current.entry.getValue());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  ZipLong.getInstance(current.entry.getValue());	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
574	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
575	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIZE.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIZE.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIZE.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
576	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
577	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_BUF.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
578	[BUG]  [BUGGY]  ReadFully(ZipLong.DEFAULT_SIG,  current.entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DEFAULT_SIG,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DEFAULT_SIG,  current.entry);	  readFully(ZipLong.DEFAULT_SIG,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
579	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry));  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry));	  readFully(ZipLong.DECEMBER,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
580	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry)&&  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(current.entry))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
581	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(in.readUTF());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(in.readUTF());  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInputStream(in.readUTF());	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
582	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.inputStream;  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  this.inputStream;	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
583	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
584	[BUG]  [BUGGY]  if(current.entry  ==  null  ||!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null  ||!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null  ||!current.entry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
585	[BUG]  [BUGGY]  if(current.entry  ==  null  ||!current.entry.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null  ||!current.entry.isEnabled())  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null  ||!current.entry.isEnabled())  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
586	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  entryEncoding.equals(ZipLong.DD_SIG))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null  ||  entryEncoding.equals(ZipLong.DD_SIG))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null  ||  entryEncoding.equals(ZipLong.DD_SIG))  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
587	[BUG]  [BUGGY]  if(current.entry  ==  null  ||!current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(current.entry  ==  null  ||!current.entry.isDirectory())  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null  ||!current.entry.isDirectory())  {	  if(current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
588	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_DWORD_BUF,  0);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_DWORD_BUF,  0);	  readFully(ZERO_DWORD_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
589	[BUG]  [BUGGY]  if(ZipLong.DD_SIG!=  null  ||  zipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_SIG!=  null  ||  zipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG!=  null  ||  zipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
590	[BUG]  [BUGGY]  readFully(TWO_EXP_32,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(TWO_EXP_32,  TWO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_EXP_32,  TWO_DWORD_BUF);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
591	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  bytesReadFromStream);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  bytesReadFromStream);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
592	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  SKIP_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  TWO_EXP_32,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF,    TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
593	[BUG]  [BUGGY]  if(ZipLong.DD_BUF!=  null  ||!ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF!=  null  ||!ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF!=  null  ||!ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
594	[BUG]  [BUGGY]  if(ZipLong.DD_BUF!=  null  &&  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF!=  null  &&  ZipLong.DD_SIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF!=  null  &&  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_BUF!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
595	[BUG]  [BUGGY]  ReadFully(ZipLong.DECLARATION,  current.entry);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZipLong.DECLARATION,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECLARATION,  current.entry);	  readFully(ZipLong.DECLARATION);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
596	[BUG]  [BUGGY]  ReadFully(ZERO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ReadFully(ZERO_DWORD_BUF);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZERO_DWORD_BUF);	  ReadFully(WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
597	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIG.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_BIG.equals(val))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
598	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SUB.equals(val))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SUB.equals(val))  {  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SUB.equals(val))  {	  if(ZipLong.DD_BUF.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
599	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(val);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val);	  ||    ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
600	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(TWO_EXP_32);  }  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val))  {  readFully(TWO_EXP_32);  }	  ||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
601	[BUG]  [BUGGY]  readFully(SCRIPT_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  readFully(SCRIPT_BUF,  current.entry);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SCRIPT_BUF,  current.entry);	  readFully(SHORT_BUF,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
602	[BUG]  [BUGGY]  Inflater  inf  =  getInflater(inputStream);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInflater(inputStream);  [BUGGY]      ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInflater(inputStream);	  Inflater    inf    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
