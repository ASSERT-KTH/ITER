bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  Inflater  inf  =  getInputStream();  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  Inflater  inf  =  readInflater(current.entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  Inflater  inf  =  readInflater(current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  readInflater(current.entry);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  readFully(ZipLong.DECLARATION);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DECLARATION);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECLARATION);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  Inflater  inf  =  current.getInputStream();  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  current.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry.getValue());  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry.getValue());	  readFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DD_SIG,  val);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val);	  readFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DD_SIG,  current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  current.entry);	  readFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getValue());  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getValue());	  readFully(ZipLong.DECEMBER);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry);	  readFully(ZipLong.DECEMBER);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DECEMBER,  current.entry.getKey());  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  current.entry.getKey());	  readFully(ZipLong.DECEMBER);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ReadFully(ZipLong.DECEMBER,  current.entry.getValue());  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DECEMBER,  current.entry.getValue());	  readFully(ZipLong.DECEMBER);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)&&  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  readFully(SHORT_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(SHORT_BUF,  current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  current.entry);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  readFully(SHORT_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(SHORT_BUF,  SHORT_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  SHORT_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  readFully(SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(SHORT_BUF,  SKIP_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  SKIP_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue());  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry.getValue());	  readFully(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  current.entry);	  readFully(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  true);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  true);	  readFully(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(WRITE_DWORD_BUF,  current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  current.entry);	  readFully(WRITE_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(WRITE_DWORD_BUF,  current.entry.getValue());  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  current.entry.getValue());	  readFully(WRITE_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  readFully(WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(WRITE_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_BUF);	  readFully(WRITE_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  val  =  new  ZipLong(WORD_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val)||  ZipLong.DD_SIG.equals(val))  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  current.entry);	  readFully(ZERO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZERO_DWORD_BUF,  current.entry.getValue());  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  current.entry.getValue());	  readFully(ZERO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  readFully(ZipLong.DD,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DD,  current.entry.getValue());  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD,  current.entry.getValue());	  readFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  readFully(ZipLong.DD,  current.entry);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DD,  current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD,  current.entry);	  readFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
38	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
39	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  val	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    return    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
40	[BUG]  [BUGGY]  ReadFully(WORD_BUF);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ReadFully(WORD_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ReadFully(ZipLong.DD_SIG,  val);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG,  val);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val))  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DD_SIG,  val))  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  val))  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  0);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  0);	  readFully(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DEFAULT_SIG,  1);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DEFAULT_SIG,  1);	  readFully(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  readFully(LFH_BUF);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(LFH_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(LFH_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  readFully(SKIP_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(SKIP_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SKIP_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  readFully(SHORT_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(SHORT_BUF,  TWO_DWORD_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(SHORT_BUF,  TWO_DWORD_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    return    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    return    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    return    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  return	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    return    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    return    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry  ==  null)  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry  ==  null)  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  if(current.entry!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  if(ZipLong.DD_SIG  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG  ==  null)  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG  ==  null)  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  if(ZipLong.DD_SIG!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG!=  null)  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG!=  null)  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
57	[BUG]  [BUGGY]  if(ZipLong.DD_BUF!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_BUF!=  null)  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF!=  null)  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
58	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ReadFully(ZipLong.DD_SIG);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD_SIG);	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZERO_DWORD_BUF,  SHORT_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  SHORT_BUF);	  readFully(ZERO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZERO_DWORD_BUF,  0);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  0);	  readFully(ZERO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  readFully(CFH_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(CFH_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(CFH_BUF);	  readFully(ZERO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  readFully(ZERO_DWORD_BUF,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZERO_DWORD_BUF,  1);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZERO_DWORD_BUF,  1);	  readFully(ZERO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  Inflater  inf  =  ze.getInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  Inflater  inf  =  ze.getInputStream();  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  ze.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  Inflater  inf  =  getInflater();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  Inflater  inf  =  getInflater();  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  getInflater();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  ReadFully(current.entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ReadFully(current.entry);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(current.entry);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DEFAULT_SIZE);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  Inflater  inf  =  createInflater();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  Inflater  inf  =  createInflater();  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  createInflater();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DECEMBER,  1);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  1);	  readFully(ZipLong.DECEMBER);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DECEMBER,  0);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  0);	  readFully(ZipLong.DECEMBER);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
71	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(value)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
72	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(WRITE_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
73	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  if(ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  0);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DD_SIG,  0);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  0);	  readFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
75	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  true);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DD_SIG,  true);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DD_SIG,  true);	  readFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
76	[BUG]  [BUGGY]  ReadFully(ZipLong.DD);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  ReadFully(ZipLong.DD);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	ReadFully(ZipLong.DD);	  readFully(ZipLong.DD);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(WRITE_DWORD_BUF,  SHORT_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  SHORT_BUF);	  readFully(WRITE_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
78	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(WRITE_DWORD_BUF,  TWO_EXP_32);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  TWO_EXP_32);	  readFully(WRITE_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(WRITE_DWORD_BUF,  SKIP_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  SKIP_BUF);	  readFully(WRITE_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.getInstance();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  Inflater  inf  =  ZipLong.getInstance();  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	Inflater  inf  =  ZipLong.getInstance();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  current.entry  =  new  ZipLong(TWO_EXP_32);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
82	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(SHORT_BUF);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(SHORT_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  current.entry  =  new  ZipLong(SHORT_BUF);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(current.entry!=  null)  {  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  readFully(TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(TWO_DWORD_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(TWO_DWORD_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  readFully(STANDARD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(STANDARD_BUF);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(STANDARD_BUF);	  readFully(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  readFully(WRITE_DWORD_BUF,  val);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(WRITE_DWORD_BUF,  val);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(WRITE_DWORD_BUF,  val);	  readFully(WRITE_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
87	[BUG]  [BUGGY]  readFully(ZipLong.DECEMBER,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  readFully(ZipLong.DECEMBER,  true);  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	readFully(ZipLong.DECEMBER,  true);	  readFully(ZipLong.DECEMBER);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
88	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.getValue()))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.descriptor))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    return    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
92	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    return    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
93	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(current.entry))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
94	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(value))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
95	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(current.entry)||  ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val)||    ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
96	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_BUF.equals(val))  {  readFully(WORD_BUF);  }  else  {  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(val))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {    [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(val))  {  [BUGGY]    ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());    [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_BUF.equals(val))  {	  if(ZipLong.DD_SIG.equals(val))    {    readFully(WORD_BUF);    }    else    {    ZipLong    val    =    new    ZipLong(WORD_BUF);    if    (ZipLong.DD_SIG.equals(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
