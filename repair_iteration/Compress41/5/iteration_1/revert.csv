projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG.equals(val)
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG.equals(val)){return
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=readInflater(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECLARATION);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=current.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,current.entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DECEMBER,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)&&ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729val=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)||ZipLong.DD_SIG.equals(val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD,current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);val
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,val)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DEFAULT_SIG,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(SHORT_BUF,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);return
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG==null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF!=null){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(CFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZERO_DWORD_BUF,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ze.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=getInflater();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(current.entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(ZipLong.DEFAULT_SIZE);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=createInflater();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(value)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(val)){readFully(WRITE_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){if(ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DD_SIG,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729ReadFully(ZipLong.DD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,TWO_EXP_32);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729Inflaterinf=ZipLong.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(TWO_EXP_32);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(SHORT_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(current.entry!=null){current.entry=newZipLong(ZipLong.DD_SIG);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(STANDARD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(WRITE_DWORD_BUF,val);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729readFully(ZipLong.DECEMBER,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.getValue())){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.descriptor)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD_SIG
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(current.entry)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_SIG.equals(value)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(current.entry)||ZipLong.DD_SIG.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_BUF.equals(val)){readFully(WORD_BUF);}else{ZipLongval=newZipLong(WORD_BUF);if(ZipLong.DD
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java729if(ZipLong.DD_SIG.equals(val)||ZipLong.DD_BUF.equals(val)){
